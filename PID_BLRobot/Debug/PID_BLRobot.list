
PID_BLRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a434  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800a548  0800a548  0000b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa30  0800aa30  0000c278  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa30  0800aa30  0000ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa38  0800aa38  0000c278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa3c  0800aa3c  0000ba3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800aa40  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000278  0800acb8  0000c278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800acb8  0000c608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f96f  00000000  00000000  0000c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259b  00000000  00000000  0001bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0001e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c50  00000000  00000000  0001f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ca  00000000  00000000  0001fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b51  00000000  00000000  00039372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0eb  00000000  00000000  0004bec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dafae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000591c  00000000  00000000  000daff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e0910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a52c 	.word	0x0800a52c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800a52c 	.word	0x0800a52c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a23      	ldr	r2, [pc, #140]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011fa:	f043 0320 	orr.w	r3, r3, #32
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0320 	and.w	r3, r3, #32
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001242:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_GPIO_Init+0xac>)
 8001244:	f001 fd5c 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2302      	movs	r3, #2
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_GPIO_Init+0xac>)
 8001262:	f001 fbc9 	bl	80029f8 <HAL_GPIO_Init>

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40011000 	.word	0x40011000

08001278 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_I2C2_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_I2C2_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_I2C2_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_I2C2_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_I2C2_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_I2C2_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_I2C2_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <MX_I2C2_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_I2C2_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <MX_I2C2_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_I2C2_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_I2C2_Init+0x50>)
 80012b6:	f001 fd3b 	bl	8002d30 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fae8 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000294 	.word	0x20000294
 80012cc:	40005800 	.word	0x40005800
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d124      	bne.n	800133e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_I2C_MspInit+0x78>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <HAL_I2C_MspInit+0x78>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_I2C_MspInit+0x78>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800130c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001312:	2312      	movs	r3, #18
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <HAL_I2C_MspInit+0x7c>)
 8001322:	f001 fb69 	bl	80029f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_I2C_MspInit+0x78>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_I2C_MspInit+0x78>)
 800132c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_I2C_MspInit+0x78>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005800 	.word	0x40005800
 800134c:	40021000 	.word	0x40021000
 8001350:	40010c00 	.word	0x40010c00

08001354 <Motor_Control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Control Motor
void Motor_Control(int16_t M2_velocity , int16_t M1_velocity)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	80fb      	strh	r3, [r7, #6]
 8001360:	4613      	mov	r3, r2
 8001362:	80bb      	strh	r3, [r7, #4]
	//Left Motor
	if(M1_velocity < 0)
 8001364:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	da08      	bge.n	800137e <Motor_Control+0x2a>
	{
		TIM3 -> CCR1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <Motor_Control+0x7c>)
 800136e:	2200      	movs	r2, #0
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3 -> CCR2 = - M1_velocity;
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	425a      	negs	r2, r3
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <Motor_Control+0x7c>)
 800137a:	639a      	str	r2, [r3, #56]	@ 0x38
 800137c:	e00a      	b.n	8001394 <Motor_Control+0x40>
	}

	else if(M1_velocity > 0)
 800137e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd06      	ble.n	8001394 <Motor_Control+0x40>
	{
		TIM3 -> CCR1 = M1_velocity;
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <Motor_Control+0x7c>)
 8001388:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800138c:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = 0;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <Motor_Control+0x7c>)
 8001390:	2200      	movs	r2, #0
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	//Right Motor
	if(M2_velocity < 0)
 8001394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da08      	bge.n	80013ae <Motor_Control+0x5a>
	{
		TIM3 -> CCR3 = 0;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <Motor_Control+0x7c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR4 = - M2_velocity;
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	425a      	negs	r2, r3
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <Motor_Control+0x7c>)
 80013aa:	641a      	str	r2, [r3, #64]	@ 0x40
	{
		TIM3 -> CCR3 = M2_velocity;
		TIM3 -> CCR4 = 0;
	}

}
 80013ac:	e00a      	b.n	80013c4 <Motor_Control+0x70>
	else if(M2_velocity > 0)
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd06      	ble.n	80013c4 <Motor_Control+0x70>
		TIM3 -> CCR3 = M2_velocity;
 80013b6:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <Motor_Control+0x7c>)
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
		TIM3 -> CCR4 = 0;
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <Motor_Control+0x7c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40000400 	.word	0x40000400
 80013d4:	00000000 	.word	0x00000000

080013d8 <PID_Control>:


void PID_Control(float _Kp , float _Ki , float _Kd , float angle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]

	float oldAngleError = 0;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
	float Total = 0;
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
	int16_t increased_speed = 0, decreased_speed = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	83fb      	strh	r3, [r7, #30]
 80013f6:	2300      	movs	r3, #0
 80013f8:	83bb      	strh	r3, [r7, #28]

	//Calculate PID
	//-2.01846361
	angleError = -2.0184361 - angle;
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f7ff f814 	bl	8000428 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	a17a      	add	r1, pc, #488	@ (adr r1, 80015f0 <PID_Control+0x218>)
 8001406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800140a:	f7fe fead 	bl	8000168 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb57 	bl	8000ac8 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a76      	ldr	r2, [pc, #472]	@ (80015f8 <PID_Control+0x220>)
 800141e:	6013      	str	r3, [r2, #0]
	P = _Kp * angleError ;
 8001420:	4b75      	ldr	r3, [pc, #468]	@ (80015f8 <PID_Control+0x220>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68f9      	ldr	r1, [r7, #12]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fcac 	bl	8000d84 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b72      	ldr	r3, [pc, #456]	@ (80015fc <PID_Control+0x224>)
 8001432:	601a      	str	r2, [r3, #0]
	D = _Kd * (angleError - oldAngleError);
 8001434:	4b70      	ldr	r3, [pc, #448]	@ (80015f8 <PID_Control+0x220>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb98 	bl	8000b70 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc9d 	bl	8000d84 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b6c      	ldr	r3, [pc, #432]	@ (8001600 <PID_Control+0x228>)
 8001450:	601a      	str	r2, [r3, #0]

	oldAngleError = angleError;
 8001452:	4b69      	ldr	r3, [pc, #420]	@ (80015f8 <PID_Control+0x220>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]

	if((- 5 < angleError) && ( angleError < 5))
 8001458:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <PID_Control+0x220>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4969      	ldr	r1, [pc, #420]	@ (8001604 <PID_Control+0x22c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe4c 	bl	80010fc <__aeabi_fcmpgt>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01b      	beq.n	80014a2 <PID_Control+0xca>
 800146a:	4b63      	ldr	r3, [pc, #396]	@ (80015f8 <PID_Control+0x220>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4966      	ldr	r1, [pc, #408]	@ (8001608 <PID_Control+0x230>)
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe25 	bl	80010c0 <__aeabi_fcmplt>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d012      	beq.n	80014a2 <PID_Control+0xca>
	{
		I = I + (_Ki * angleError);
 800147c:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <PID_Control+0x220>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc7e 	bl	8000d84 <__aeabi_fmul>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b5f      	ldr	r3, [pc, #380]	@ (800160c <PID_Control+0x234>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fb6e 	bl	8000b74 <__addsf3>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b5b      	ldr	r3, [pc, #364]	@ (800160c <PID_Control+0x234>)
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e002      	b.n	80014a8 <PID_Control+0xd0>
	}
	else
	{
		_Ki = 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
	}

	Total = P + I + D;
 80014a8:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <PID_Control+0x224>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a57      	ldr	r2, [pc, #348]	@ (800160c <PID_Control+0x234>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb5e 	bl	8000b74 <__addsf3>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b50      	ldr	r3, [pc, #320]	@ (8001600 <PID_Control+0x228>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fb56 	bl	8000b74 <__addsf3>
 80014c8:	4603      	mov	r3, r0
 80014ca:	617b      	str	r3, [r7, #20]

	increased_speed =  + ((Total > 0) ? Total : -Total);
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff fe13 	bl	80010fc <__aeabi_fcmpgt>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <PID_Control+0x110>
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7ff fe17 	bl	8001110 <__aeabi_f2iz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	e007      	b.n	80014f8 <PID_Control+0x120>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe0e 	bl	8001110 <__aeabi_f2iz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	83fb      	strh	r3, [r7, #30]
	decreased_speed =  - ((Total > 0) ? Total : -Total);
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff fdfc 	bl	80010fc <__aeabi_fcmpgt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <PID_Control+0x144>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fdfd 	bl	8001110 <__aeabi_f2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	b21b      	sxth	r3, r3
 800151a:	e004      	b.n	8001526 <PID_Control+0x14e>
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f7ff fdf7 	bl	8001110 <__aeabi_f2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	b21b      	sxth	r3, r3
 8001526:	83bb      	strh	r3, [r7, #28]

	if(increased_speed < -900)
 8001528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800152c:	f513 7f61 	cmn.w	r3, #900	@ 0x384
 8001530:	da02      	bge.n	8001538 <PID_Control+0x160>
		increased_speed = -900;
 8001532:	f64f 437c 	movw	r3, #64636	@ 0xfc7c
 8001536:	83fb      	strh	r3, [r7, #30]
	if(increased_speed > 900)
 8001538:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001540:	dd02      	ble.n	8001548 <PID_Control+0x170>
		increased_speed = 900;
 8001542:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8001546:	83fb      	strh	r3, [r7, #30]
	if(decreased_speed < -900)
 8001548:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800154c:	f513 7f61 	cmn.w	r3, #900	@ 0x384
 8001550:	da02      	bge.n	8001558 <PID_Control+0x180>
		decreased_speed = -900;
 8001552:	f64f 437c 	movw	r3, #64636	@ 0xfc7c
 8001556:	83bb      	strh	r3, [r7, #28]
	if(decreased_speed > 900)
 8001558:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800155c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001560:	dd02      	ble.n	8001568 <PID_Control+0x190>
		decreased_speed = 900;
 8001562:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8001566:	83bb      	strh	r3, [r7, #28]

	//Control Motor
	if ( (0 < angleError) && (angleError < 10)  )
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <PID_Control+0x220>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 0100 	mov.w	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fdc3 	bl	80010fc <__aeabi_fcmpgt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d011      	beq.n	80015a0 <PID_Control+0x1c8>
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <PID_Control+0x220>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4923      	ldr	r1, [pc, #140]	@ (8001610 <PID_Control+0x238>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fd9c 	bl	80010c0 <__aeabi_fcmplt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <PID_Control+0x1c8>
	{

		Motor_Control(decreased_speed, decreased_speed);
 800158e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001592:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fedb 	bl	8001354 <Motor_Control>
 800159e:	e020      	b.n	80015e2 <PID_Control+0x20a>

	}
	else if ( (-20 < angleError) && (angleError < 0) )
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <PID_Control+0x220>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	491b      	ldr	r1, [pc, #108]	@ (8001614 <PID_Control+0x23c>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fda8 	bl	80010fc <__aeabi_fcmpgt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d012      	beq.n	80015d8 <PID_Control+0x200>
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <PID_Control+0x220>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd80 	bl	80010c0 <__aeabi_fcmplt>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <PID_Control+0x200>
	{

		Motor_Control(increased_speed, increased_speed);
 80015c6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80015ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff febf 	bl	8001354 <Motor_Control>
 80015d6:	e004      	b.n	80015e2 <PID_Control+0x20a>

	}
	else
	{
		Motor_Control(0 , 0);
 80015d8:	2100      	movs	r1, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff feba 	bl	8001354 <Motor_Control>

	}


}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	d37486bb 	.word	0xd37486bb
 80015f4:	c00025c1 	.word	0xc00025c1
 80015f8:	2000038c 	.word	0x2000038c
 80015fc:	20000380 	.word	0x20000380
 8001600:	20000388 	.word	0x20000388
 8001604:	c0a00000 	.word	0xc0a00000
 8001608:	40a00000 	.word	0x40a00000
 800160c:	20000384 	.word	0x20000384
 8001610:	41200000 	.word	0x41200000
 8001614:	c1a00000 	.word	0xc1a00000

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800161c:	b08a      	sub	sp, #40	@ 0x28
 800161e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f001 f8a4 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f8f6 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f7ff fdce 	bl	80011c8 <MX_GPIO_Init>
  MX_TIM4_Init();
 800162c:	f000 fed8 	bl	80023e0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001630:	f000 fde6 	bl	8002200 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001634:	f000 fe3c 	bl	80022b0 <MX_TIM3_Init>
  MX_I2C2_Init();
 8001638:	f7ff fe1e 	bl	8001278 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800163c:	f000 fffc 	bl	8002638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001640:	2100      	movs	r1, #0
 8001642:	485e      	ldr	r0, [pc, #376]	@ (80017bc <main+0x1a4>)
 8001644:	f003 f886 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	485c      	ldr	r0, [pc, #368]	@ (80017bc <main+0x1a4>)
 800164c:	f003 f882 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001650:	2108      	movs	r1, #8
 8001652:	485a      	ldr	r0, [pc, #360]	@ (80017bc <main+0x1a4>)
 8001654:	f003 f87e 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001658:	210c      	movs	r1, #12
 800165a:	4858      	ldr	r0, [pc, #352]	@ (80017bc <main+0x1a4>)
 800165c:	f003 f87a 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001660:	2104      	movs	r1, #4
 8001662:	4857      	ldr	r0, [pc, #348]	@ (80017c0 <main+0x1a8>)
 8001664:	f003 f9ba 	bl	80049dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001668:	2104      	movs	r1, #4
 800166a:	4856      	ldr	r0, [pc, #344]	@ (80017c4 <main+0x1ac>)
 800166c:	f003 f9b6 	bl	80049dc <HAL_TIM_Encoder_Start>

  while (MPU6050_Init(&hi2c2) == 1);
 8001670:	bf00      	nop
 8001672:	4855      	ldr	r0, [pc, #340]	@ (80017c8 <main+0x1b0>)
 8001674:	f000 f914 	bl	80018a0 <MPU6050_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d0f9      	beq.n	8001672 <main+0x5a>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MPU6050_Read_All(&hi2c2, &MPU6050);
 800167e:	4953      	ldr	r1, [pc, #332]	@ (80017cc <main+0x1b4>)
 8001680:	4851      	ldr	r0, [pc, #324]	@ (80017c8 <main+0x1b0>)
 8001682:	f000 f965 	bl	8001950 <MPU6050_Read_All>

	  Ax = MPU6050.Ax;
 8001686:	4b51      	ldr	r3, [pc, #324]	@ (80017cc <main+0x1b4>)
 8001688:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa1a 	bl	8000ac8 <__aeabi_d2f>
 8001694:	4603      	mov	r3, r0
 8001696:	4a4e      	ldr	r2, [pc, #312]	@ (80017d0 <main+0x1b8>)
 8001698:	6013      	str	r3, [r2, #0]
	  Ay = MPU6050.Ay;
 800169a:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <main+0x1b4>)
 800169c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa10 	bl	8000ac8 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a4a      	ldr	r2, [pc, #296]	@ (80017d4 <main+0x1bc>)
 80016ac:	6013      	str	r3, [r2, #0]
	  Az = MPU6050.Az;
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <main+0x1b4>)
 80016b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fa06 	bl	8000ac8 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a46      	ldr	r2, [pc, #280]	@ (80017d8 <main+0x1c0>)
 80016c0:	6013      	str	r3, [r2, #0]
	  Gx = MPU6050.Gx;
 80016c2:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <main+0x1b4>)
 80016c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9fc 	bl	8000ac8 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a42      	ldr	r2, [pc, #264]	@ (80017dc <main+0x1c4>)
 80016d4:	6013      	str	r3, [r2, #0]
	  Gy = MPU6050.Gy;
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <main+0x1b4>)
 80016d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff f9f2 	bl	8000ac8 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a3e      	ldr	r2, [pc, #248]	@ (80017e0 <main+0x1c8>)
 80016e8:	6013      	str	r3, [r2, #0]
	  Gz = MPU6050.Gz;
 80016ea:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <main+0x1b4>)
 80016ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f9e8 	bl	8000ac8 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a3a      	ldr	r2, [pc, #232]	@ (80017e4 <main+0x1cc>)
 80016fc:	6013      	str	r3, [r2, #0]
	  Kalman_X = MPU6050.KalmanAngleX;
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <main+0x1b4>)
 8001700:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff f9de 	bl	8000ac8 <__aeabi_d2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4a36      	ldr	r2, [pc, #216]	@ (80017e8 <main+0x1d0>)
 8001710:	6013      	str	r3, [r2, #0]
	  Kalman_Y = MPU6050.KalmanAngleY;
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <main+0x1b4>)
 8001714:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f9d4 	bl	8000ac8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <main+0x1d4>)
 8001724:	6013      	str	r3, [r2, #0]


	  PID_Control(108.4375, 0.00003051757813 , 3 , Kalman_Y);
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <main+0x1d4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a31      	ldr	r2, [pc, #196]	@ (80017f0 <main+0x1d8>)
 800172c:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8001730:	4830      	ldr	r0, [pc, #192]	@ (80017f4 <main+0x1dc>)
 8001732:	f7ff fe51 	bl	80013d8 <PID_Control>
	  sprintf(&buffer , "%.0f %.3f %.2f %.1f %.1f\n\r" , P , Kalman_Y , D, angleError , HAL_GetTick()/100.0);
 8001736:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <main+0x1e0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe74 	bl	8000428 <__aeabi_f2d>
 8001740:	e9c7 0100 	strd	r0, r1, [r7]
 8001744:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <main+0x1d4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <main+0x1e4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	4680      	mov	r8, r0
 800175e:	4689      	mov	r9, r1
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <main+0x1e8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe5f 	bl	8000428 <__aeabi_f2d>
 800176a:	4682      	mov	sl, r0
 800176c:	468b      	mov	fp, r1
 800176e:	f001 f855 	bl	800281c <HAL_GetTick>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe35 	bl	80003e4 <__aeabi_ui2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <main+0x1ec>)
 8001780:	f7fe ffd4 	bl	800072c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800178c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001794:	e9cd 4500 	strd	r4, r5, [sp]
 8001798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179c:	491a      	ldr	r1, [pc, #104]	@ (8001808 <main+0x1f0>)
 800179e:	481b      	ldr	r0, [pc, #108]	@ (800180c <main+0x1f4>)
 80017a0:	f004 ff34 	bl	800660c <siprintf>
	  HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 35);
 80017a4:	4819      	ldr	r0, [pc, #100]	@ (800180c <main+0x1f4>)
 80017a6:	f7fe fcd3 	bl	8000150 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	2323      	movs	r3, #35	@ 0x23
 80017b0:	4916      	ldr	r1, [pc, #88]	@ (800180c <main+0x1f4>)
 80017b2:	4817      	ldr	r0, [pc, #92]	@ (8001810 <main+0x1f8>)
 80017b4:	f003 fe7c 	bl	80054b0 <HAL_UART_Transmit>
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 80017b8:	bf00      	nop
 80017ba:	e760      	b.n	800167e <main+0x66>
 80017bc:	200003e0 	.word	0x200003e0
 80017c0:	20000398 	.word	0x20000398
 80017c4:	20000428 	.word	0x20000428
 80017c8:	20000294 	.word	0x20000294
 80017cc:	200002e8 	.word	0x200002e8
 80017d0:	20000340 	.word	0x20000340
 80017d4:	20000344 	.word	0x20000344
 80017d8:	20000348 	.word	0x20000348
 80017dc:	2000034c 	.word	0x2000034c
 80017e0:	20000350 	.word	0x20000350
 80017e4:	20000354 	.word	0x20000354
 80017e8:	20000358 	.word	0x20000358
 80017ec:	2000035c 	.word	0x2000035c
 80017f0:	40400000 	.word	0x40400000
 80017f4:	42d8e000 	.word	0x42d8e000
 80017f8:	20000380 	.word	0x20000380
 80017fc:	20000388 	.word	0x20000388
 8001800:	2000038c 	.word	0x2000038c
 8001804:	40590000 	.word	0x40590000
 8001808:	0800a548 	.word	0x0800a548
 800180c:	20000360 	.word	0x20000360
 8001810:	20000470 	.word	0x20000470

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b090      	sub	sp, #64	@ 0x40
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	2228      	movs	r2, #40	@ 0x28
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f004 ff55 	bl	80066d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183a:	2301      	movs	r3, #1
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183e:	2310      	movs	r3, #16
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800184a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fac5 	bl	8003de4 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001860:	f000 f818 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fd33 	bl	80042e8 <HAL_RCC_ClockConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001888:	f000 f804 	bl	8001894 <Error_Handler>
  }
}
 800188c:	bf00      	nop
 800188e:	3740      	adds	r7, #64	@ 0x40
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80018a8:	2364      	movs	r3, #100	@ 0x64
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	2301      	movs	r3, #1
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	2275      	movs	r2, #117	@ 0x75
 80018ba:	21d0      	movs	r1, #208	@ 0xd0
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 fc75 	bl	80031ac <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b68      	cmp	r3, #104	@ 0x68
 80018c6:	d13d      	bne.n	8001944 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80018cc:	2364      	movs	r3, #100	@ 0x64
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	2301      	movs	r3, #1
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	f107 030e 	add.w	r3, r7, #14
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	226b      	movs	r2, #107	@ 0x6b
 80018de:	21d0      	movs	r1, #208	@ 0xd0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f001 fb69 	bl	8002fb8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80018e6:	2307      	movs	r3, #7
 80018e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80018ea:	2364      	movs	r3, #100	@ 0x64
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f107 030e 	add.w	r3, r7, #14
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2219      	movs	r2, #25
 80018fc:	21d0      	movs	r1, #208	@ 0xd0
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f001 fb5a 	bl	8002fb8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001908:	2364      	movs	r3, #100	@ 0x64
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	f107 030e 	add.w	r3, r7, #14
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	221c      	movs	r2, #28
 800191a:	21d0      	movs	r1, #208	@ 0xd0
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f001 fb4b 	bl	8002fb8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001926:	2364      	movs	r3, #100	@ 0x64
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2301      	movs	r3, #1
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f107 030e 	add.w	r3, r7, #14
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	221b      	movs	r2, #27
 8001938:	21d0      	movs	r1, #208	@ 0xd0
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f001 fb3c 	bl	8002fb8 <HAL_I2C_Mem_Write>
        return 0;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <MPU6050_Init+0xa6>
    }
    return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001954:	b094      	sub	sp, #80	@ 0x50
 8001956:	af04      	add	r7, sp, #16
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800195c:	2364      	movs	r3, #100	@ 0x64
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	230e      	movs	r3, #14
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	223b      	movs	r2, #59	@ 0x3b
 800196e:	21d0      	movs	r1, #208	@ 0xd0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 fc1b 	bl	80031ac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001976:	7a3b      	ldrb	r3, [r7, #8]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21a      	sxth	r2, r3
 800197c:	7a7b      	ldrb	r3, [r7, #9]
 800197e:	b21b      	sxth	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b21a      	sxth	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001988:	7abb      	ldrb	r3, [r7, #10]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21a      	sxth	r2, r3
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	b21b      	sxth	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	b21a      	sxth	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800199a:	7b3b      	ldrb	r3, [r7, #12]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	b21a      	sxth	r2, r3
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80019ba:	7c3b      	ldrb	r3, [r7, #16]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	7c7b      	ldrb	r3, [r7, #17]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80019cc:	7cbb      	ldrb	r3, [r7, #18]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	7cfb      	ldrb	r3, [r7, #19]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21a      	sxth	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80019de:	7d3b      	ldrb	r3, [r7, #20]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	7d7b      	ldrb	r3, [r7, #21]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd04 	bl	8000404 <__aeabi_i2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b95      	ldr	r3, [pc, #596]	@ (8001c58 <MPU6050_Read_All+0x308>)
 8001a02:	f7fe fe93 	bl	800072c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fcf4 	bl	8000404 <__aeabi_i2d>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b8d      	ldr	r3, [pc, #564]	@ (8001c58 <MPU6050_Read_All+0x308>)
 8001a22:	f7fe fe83 	bl	800072c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fce4 	bl	8000404 <__aeabi_i2d>
 8001a3c:	a380      	add	r3, pc, #512	@ (adr r3, 8001c40 <MPU6050_Read_All+0x2f0>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fe73 	bl	800072c <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001a50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f941 	bl	8000cdc <__aeabi_i2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	497f      	ldr	r1, [pc, #508]	@ (8001c5c <MPU6050_Read_All+0x30c>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fa44 	bl	8000eec <__aeabi_fdiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	497e      	ldr	r1, [pc, #504]	@ (8001c60 <MPU6050_Read_All+0x310>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f883 	bl	8000b74 <__addsf3>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fcc1 	bl	8000404 <__aeabi_i2d>
 8001a82:	a371      	add	r3, pc, #452	@ (adr r3, 8001c48 <MPU6050_Read_All+0x2f8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fe50 	bl	800072c <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcb1 	bl	8000404 <__aeabi_i2d>
 8001aa2:	a369      	add	r3, pc, #420	@ (adr r3, 8001c48 <MPU6050_Read_All+0x2f8>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fe40 	bl	800072c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fca1 	bl	8000404 <__aeabi_i2d>
 8001ac2:	a361      	add	r3, pc, #388	@ (adr r3, 8001c48 <MPU6050_Read_All+0x2f8>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fe30 	bl	800072c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001ad6:	f000 fea1 	bl	800281c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <MPU6050_Read_All+0x314>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc7e 	bl	80003e4 <__aeabi_ui2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <MPU6050_Read_All+0x318>)
 8001aee:	f7fe fe1d 	bl	800072c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001afa:	f000 fe8f 	bl	800281c <HAL_GetTick>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <MPU6050_Read_All+0x314>)
 8001b02:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	fb03 f202 	mul.w	r2, r3, r2
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc6a 	bl	8000404 <__aeabi_i2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f008 f996 	bl	8009e68 <sqrt>
 8001b3c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b4c:	f7fe ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc51 	bl	8000404 <__aeabi_i2d>
 8001b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b66:	f7fe fde1 	bl	800072c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f008 f99d 	bl	8009eb0 <atan>
 8001b76:	a336      	add	r3, pc, #216	@ (adr r3, 8001c50 <MPU6050_Read_All+0x300>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fcac 	bl	80004d8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001b88:	e005      	b.n	8001b96 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9c:	425b      	negs	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc30 	bl	8000404 <__aeabi_i2d>
 8001ba4:	4682      	mov	sl, r0
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc28 	bl	8000404 <__aeabi_i2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4650      	mov	r0, sl
 8001bba:	4659      	mov	r1, fp
 8001bbc:	f008 f952 	bl	8009e64 <atan2>
 8001bc0:	a323      	add	r3, pc, #140	@ (adr r3, 8001c50 <MPU6050_Read_All+0x300>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fc87 	bl	80004d8 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <MPU6050_Read_All+0x31c>)
 8001bd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bdc:	f7fe feee 	bl	80009bc <__aeabi_dcmplt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <MPU6050_Read_All+0x2ac>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <MPU6050_Read_All+0x320>)
 8001bf2:	f7fe ff01 	bl	80009f8 <__aeabi_dcmpgt>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d114      	bne.n	8001c26 <MPU6050_Read_All+0x2d6>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <MPU6050_Read_All+0x320>)
 8001c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c06:	f7fe fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d033      	beq.n	8001c78 <MPU6050_Read_All+0x328>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MPU6050_Read_All+0x31c>)
 8001c1c:	f7fe fece 	bl	80009bc <__aeabi_dcmplt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d028      	beq.n	8001c78 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8001c26:	4913      	ldr	r1, [pc, #76]	@ (8001c74 <MPU6050_Read_All+0x324>)
 8001c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c36:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c3a:	e030      	b.n	8001c9e <MPU6050_Read_All+0x34e>
 8001c3c:	f3af 8000 	nop.w
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40cc2900 	.word	0x40cc2900
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40606000 	.word	0x40606000
 8001c50:	1a63c1f8 	.word	0x1a63c1f8
 8001c54:	404ca5dc 	.word	0x404ca5dc
 8001c58:	40d00000 	.word	0x40d00000
 8001c5c:	43aa0000 	.word	0x43aa0000
 8001c60:	42121eb8 	.word	0x42121eb8
 8001c64:	20000390 	.word	0x20000390
 8001c68:	408f4000 	.word	0x408f4000
 8001c6c:	c0568000 	.word	0xc0568000
 8001c70:	40568000 	.word	0x40568000
 8001c74:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c86:	e9cd 2300 	strd	r2, r3, [sp]
 8001c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8e:	481c      	ldr	r0, [pc, #112]	@ (8001d00 <MPU6050_Read_All+0x3b0>)
 8001c90:	f000 f83c 	bl	8001d0c <Kalman_getAngle>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <MPU6050_Read_All+0x3b4>)
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cde:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ce6:	4808      	ldr	r0, [pc, #32]	@ (8001d08 <MPU6050_Read_All+0x3b8>)
 8001ce8:	f000 f810 	bl	8001d0c <Kalman_getAngle>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001cf6:	bf00      	nop
 8001cf8:	3740      	adds	r7, #64	@ 0x40
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d00:	20000048 	.word	0x20000048
 8001d04:	40568000 	.word	0x40568000
 8001d08:	20000000 	.word	0x20000000

08001d0c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b092      	sub	sp, #72	@ 0x48
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d22:	f7fe fa21 	bl	8000168 <__aeabi_dsub>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001d3c:	f7fe fbcc 	bl	80004d8 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fa10 	bl	800016c <__adddf3>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001d62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001d66:	f7fe fbb7 	bl	80004d8 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d78:	f7fe f9f6 	bl	8000168 <__aeabi_dsub>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001d8a:	f7fe f9ed 	bl	8000168 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe f9e6 	bl	800016c <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001dac:	f7fe fb94 	bl	80004d8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe f9d8 	bl	800016c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001dd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001dd6:	f7fe fb7f 	bl	80004d8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4620      	mov	r0, r4
 8001de0:	4629      	mov	r1, r5
 8001de2:	f7fe f9c1 	bl	8000168 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001dfc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e00:	f7fe fb6a 	bl	80004d8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe f9ac 	bl	8000168 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e2a:	f7fe fb55 	bl	80004d8 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe f999 	bl	800016c <__adddf3>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e50:	f7fe f98c 	bl	800016c <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e66:	f7fe fc61 	bl	800072c <__aeabi_ddiv>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e7c:	f7fe fc56 	bl	800072c <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e92:	f7fe f969 	bl	8000168 <__aeabi_dsub>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001eac:	f7fe fb14 	bl	80004d8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe f958 	bl	800016c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ecc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ed4:	f7fe fb00 	bl	80004d8 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe f944 	bl	800016c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ef4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001efe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001f08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f10:	f7fe fae2 	bl	80004d8 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe f924 	bl	8000168 <__aeabi_dsub>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001f30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f38:	f7fe face 	bl	80004d8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f910 	bl	8000168 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001f58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f60:	f7fe faba 	bl	80004d8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe f8fc 	bl	8000168 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001f80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f88:	f7fe faa6 	bl	80004d8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f8e8 	bl	8000168 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	3748      	adds	r7, #72	@ 0x48
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6193      	str	r3, [r2, #24]
 8001fc6:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_MspInit+0x5c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_MspInit+0x60>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_MspInit+0x60>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 fbc6 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <_kill>:

int _kill(int pid, int sig)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002088:	f004 fb76 	bl	8006778 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	2216      	movs	r2, #22
 8002090:	601a      	str	r2, [r3, #0]
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_exit>:

void _exit (int status)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffe7 	bl	800207e <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
  }

  return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
  }
  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214c:	605a      	str	r2, [r3, #4]
  return 0;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_isatty>:

int _isatty(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f004 fade 	bl	8006778 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20005000 	.word	0x20005000
 80021e8:	00000400 	.word	0x00000400
 80021ec:	20000394 	.word	0x20000394
 80021f0:	20000608 	.word	0x20000608

080021f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	@ 0x30
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fa5f 	bl	80066d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800221c:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 800221e:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <MX_TIM1_Init+0xac>)
 8002220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002248:	2303      	movs	r3, #3
 800224a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002250:	2301      	movs	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002260:	2301      	movs	r3, #1
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4619      	mov	r1, r3
 8002272:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002274:	f002 fb10 	bl	8004898 <HAL_TIM_Encoder_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800227e:	f7ff fb09 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <MX_TIM1_Init+0xa8>)
 8002290:	f003 f860 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800229a:	f7ff fafb 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	3730      	adds	r7, #48	@ 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000398 	.word	0x20000398
 80022ac:	40012c00 	.word	0x40012c00

080022b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	@ 0x38
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
 80022dc:	615a      	str	r2, [r3, #20]
 80022de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022e0:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80022e2:	4a3e      	ldr	r2, [pc, #248]	@ (80023dc <MX_TIM3_Init+0x12c>)
 80022e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80022e6:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80022f2:	4b39      	ldr	r3, [pc, #228]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80022f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b37      	ldr	r3, [pc, #220]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002300:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002306:	4834      	ldr	r0, [pc, #208]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002308:	f002 f97c 	bl	8004604 <HAL_TIM_Base_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002312:	f7ff fabf 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800231c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002320:	4619      	mov	r1, r3
 8002322:	482d      	ldr	r0, [pc, #180]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002324:	f002 fcaa 	bl	8004c7c <HAL_TIM_ConfigClockSource>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800232e:	f7ff fab1 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002332:	4829      	ldr	r0, [pc, #164]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002334:	f002 f9b5 	bl	80046a2 <HAL_TIM_PWM_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800233e:	f7ff faa9 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	4619      	mov	r1, r3
 8002350:	4821      	ldr	r0, [pc, #132]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002352:	f002 ffff 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800235c:	f7ff fa9a 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002360:	2360      	movs	r3, #96	@ 0x60
 8002362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4818      	ldr	r0, [pc, #96]	@ (80023d8 <MX_TIM3_Init+0x128>)
 8002378:	f002 fbbe 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002382:	f7ff fa87 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2204      	movs	r2, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <MX_TIM3_Init+0x128>)
 800238e:	f002 fbb3 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002398:	f7ff fa7c 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2208      	movs	r2, #8
 80023a0:	4619      	mov	r1, r3
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80023a4:	f002 fba8 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80023ae:	f7ff fa71 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	220c      	movs	r2, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80023ba:	f002 fb9d 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80023c4:	f7ff fa66 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023c8:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <MX_TIM3_Init+0x128>)
 80023ca:	f000 f8e9 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3738      	adds	r7, #56	@ 0x38
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200003e0 	.word	0x200003e0
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 f96f 	bl	80066d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <MX_TIM4_Init+0xa0>)
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <MX_TIM4_Init+0xa0>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_TIM4_Init+0xa0>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65534;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <MX_TIM4_Init+0xa0>)
 8002410:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_TIM4_Init+0xa0>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_TIM4_Init+0xa0>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002422:	2303      	movs	r3, #3
 8002424:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242a:	2301      	movs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	480c      	ldr	r0, [pc, #48]	@ (8002480 <MX_TIM4_Init+0xa0>)
 800244e:	f002 fa23 	bl	8004898 <HAL_TIM_Encoder_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002458:	f7ff fa1c 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_TIM4_Init+0xa0>)
 800246a:	f002 ff73 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002474:	f7ff fa0e 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	@ 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000428 	.word	0x20000428
 8002484:	40000800 	.word	0x40000800

08002488 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <HAL_TIM_Encoder_MspInit+0xc8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d125      	bne.n	80024f4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a29      	ldr	r2, [pc, #164]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a23      	ldr	r2, [pc, #140]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 0318 	add.w	r3, r7, #24
 80024ea:	4619      	mov	r1, r3
 80024ec:	481a      	ldr	r0, [pc, #104]	@ (8002558 <HAL_TIM_Encoder_MspInit+0xd0>)
 80024ee:	f000 fa83 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024f2:	e028      	b.n	8002546 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d123      	bne.n	8002546 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6193      	str	r3, [r2, #24]
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252e:	23c0      	movs	r3, #192	@ 0xc0
 8002530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 0318 	add.w	r3, r7, #24
 800253e:	4619      	mov	r1, r3
 8002540:	4807      	ldr	r0, [pc, #28]	@ (8002560 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002542:	f000 fa59 	bl	80029f8 <HAL_GPIO_Init>
}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	40000800 	.word	0x40000800
 8002560:	40010c00 	.word	0x40010c00

08002564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <HAL_TIM_Base_MspInit+0x34>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10b      	bne.n	800258e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_TIM_Base_MspInit+0x38>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <HAL_TIM_Base_MspInit+0x38>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_TIM_Base_MspInit+0x38>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40000400 	.word	0x40000400
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_TIM_MspPostInit+0x88>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d12f      	bne.n	8002620 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	4b14      	ldr	r3, [pc, #80]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a13      	ldr	r2, [pc, #76]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_TIM_MspPostInit+0x8c>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f0:	23c0      	movs	r3, #192	@ 0xc0
 80025f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	4619      	mov	r1, r3
 8002602:	480b      	ldr	r0, [pc, #44]	@ (8002630 <HAL_TIM_MspPostInit+0x90>)
 8002604:	f000 f9f8 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002608:	2303      	movs	r3, #3
 800260a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2302      	movs	r3, #2
 8002612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	@ (8002634 <HAL_TIM_MspPostInit+0x94>)
 800261c:	f000 f9ec 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40000400 	.word	0x40000400
 800262c:	40021000 	.word	0x40021000
 8002630:	40010800 	.word	0x40010800
 8002634:	40010c00 	.word	0x40010c00

08002638 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <MX_USART2_UART_Init+0x50>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 8002644:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <MX_USART2_UART_Init+0x4c>)
 8002670:	f002 fece 	bl	8005410 <HAL_UART_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800267a:	f7ff f90b 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000470 	.word	0x20000470
 8002688:	40004400 	.word	0x40004400

0800268c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <HAL_UART_MspInit+0x88>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d12f      	bne.n	800270c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b6:	61d3      	str	r3, [r2, #28]
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_UART_MspInit+0x8c>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026dc:	2304      	movs	r3, #4
 80026de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	@ (800271c <HAL_UART_MspInit+0x90>)
 80026f0:	f000 f982 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f4:	2308      	movs	r3, #8
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	@ (800271c <HAL_UART_MspInit+0x90>)
 8002708:	f000 f976 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40004400 	.word	0x40004400
 8002718:	40021000 	.word	0x40021000
 800271c:	40010800 	.word	0x40010800

08002720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002720:	f7ff fd68 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	@ (8002754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002726:	490c      	ldr	r1, [pc, #48]	@ (8002758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002728:	4a0c      	ldr	r2, [pc, #48]	@ (800275c <LoopFillZerobss+0x16>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800273c:	4c09      	ldr	r4, [pc, #36]	@ (8002764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f004 f81b 	bl	8006784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7fe ff63 	bl	8001618 <main>
  bx lr
 8002752:	4770      	bx	lr
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800275c:	0800aa40 	.word	0x0800aa40
  ldr r2, =_sbss
 8002760:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002764:	20000608 	.word	0x20000608

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <HAL_Init+0x28>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <HAL_Init+0x28>)
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f907 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fc14 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f911 	bl	80029de <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027d4:	f000 f8e7 	bl	80029a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000090 	.word	0x20000090
 80027f0:	20000098 	.word	0x20000098
 80027f4:	20000094 	.word	0x20000094

080027f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_IncTick+0x1c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_IncTick+0x20>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a03      	ldr	r2, [pc, #12]	@ (8002818 <HAL_IncTick+0x20>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000098 	.word	0x20000098
 8002818:	200004b8 	.word	0x200004b8

0800281c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b02      	ldr	r3, [pc, #8]	@ (800282c <HAL_GetTick+0x10>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	200004b8 	.word	0x200004b8

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	@ (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002970:	f7ff ff90 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	@ (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff49 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff5e 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff90 	bl	80028e8 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5f 	bl	8002894 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffb0 	bl	800294c <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b08b      	sub	sp, #44	@ 0x2c
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	e169      	b.n	8002ce0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8158 	bne.w	8002cda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a9a      	ldr	r2, [pc, #616]	@ (8002c98 <HAL_GPIO_Init+0x2a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d05e      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
 8002a34:	4a98      	ldr	r2, [pc, #608]	@ (8002c98 <HAL_GPIO_Init+0x2a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d875      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a3a:	4a98      	ldr	r2, [pc, #608]	@ (8002c9c <HAL_GPIO_Init+0x2a4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d058      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
 8002a40:	4a96      	ldr	r2, [pc, #600]	@ (8002c9c <HAL_GPIO_Init+0x2a4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d86f      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a46:	4a96      	ldr	r2, [pc, #600]	@ (8002ca0 <HAL_GPIO_Init+0x2a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d052      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
 8002a4c:	4a94      	ldr	r2, [pc, #592]	@ (8002ca0 <HAL_GPIO_Init+0x2a8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d869      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a52:	4a94      	ldr	r2, [pc, #592]	@ (8002ca4 <HAL_GPIO_Init+0x2ac>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d04c      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
 8002a58:	4a92      	ldr	r2, [pc, #584]	@ (8002ca4 <HAL_GPIO_Init+0x2ac>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d863      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a5e:	4a92      	ldr	r2, [pc, #584]	@ (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d046      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
 8002a64:	4a90      	ldr	r2, [pc, #576]	@ (8002ca8 <HAL_GPIO_Init+0x2b0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d85d      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a6a:	2b12      	cmp	r3, #18
 8002a6c:	d82a      	bhi.n	8002ac4 <HAL_GPIO_Init+0xcc>
 8002a6e:	2b12      	cmp	r3, #18
 8002a70:	d859      	bhi.n	8002b26 <HAL_GPIO_Init+0x12e>
 8002a72:	a201      	add	r2, pc, #4	@ (adr r2, 8002a78 <HAL_GPIO_Init+0x80>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002af3 	.word	0x08002af3
 8002a7c:	08002acd 	.word	0x08002acd
 8002a80:	08002adf 	.word	0x08002adf
 8002a84:	08002b21 	.word	0x08002b21
 8002a88:	08002b27 	.word	0x08002b27
 8002a8c:	08002b27 	.word	0x08002b27
 8002a90:	08002b27 	.word	0x08002b27
 8002a94:	08002b27 	.word	0x08002b27
 8002a98:	08002b27 	.word	0x08002b27
 8002a9c:	08002b27 	.word	0x08002b27
 8002aa0:	08002b27 	.word	0x08002b27
 8002aa4:	08002b27 	.word	0x08002b27
 8002aa8:	08002b27 	.word	0x08002b27
 8002aac:	08002b27 	.word	0x08002b27
 8002ab0:	08002b27 	.word	0x08002b27
 8002ab4:	08002b27 	.word	0x08002b27
 8002ab8:	08002b27 	.word	0x08002b27
 8002abc:	08002ad5 	.word	0x08002ad5
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	4a79      	ldr	r2, [pc, #484]	@ (8002cac <HAL_GPIO_Init+0x2b4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aca:	e02c      	b.n	8002b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	623b      	str	r3, [r7, #32]
          break;
 8002ad2:	e029      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	623b      	str	r3, [r7, #32]
          break;
 8002adc:	e024      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e01f      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	330c      	adds	r3, #12
 8002aee:	623b      	str	r3, [r7, #32]
          break;
 8002af0:	e01a      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002afa:	2304      	movs	r3, #4
 8002afc:	623b      	str	r3, [r7, #32]
          break;
 8002afe:	e013      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	611a      	str	r2, [r3, #16]
          break;
 8002b12:	e009      	b.n	8002b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b14:	2308      	movs	r3, #8
 8002b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	615a      	str	r2, [r3, #20]
          break;
 8002b1e:	e003      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
          break;
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x130>
          break;
 8002b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2bff      	cmp	r3, #255	@ 0xff
 8002b2c:	d801      	bhi.n	8002b32 <HAL_GPIO_Init+0x13a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	e001      	b.n	8002b36 <HAL_GPIO_Init+0x13e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2bff      	cmp	r3, #255	@ 0xff
 8002b3c:	d802      	bhi.n	8002b44 <HAL_GPIO_Init+0x14c>
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	e002      	b.n	8002b4a <HAL_GPIO_Init+0x152>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	3b08      	subs	r3, #8
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	210f      	movs	r1, #15
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	6a39      	ldr	r1, [r7, #32]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80b1 	beq.w	8002cda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b78:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb0 <HAL_GPIO_Init+0x2b8>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb0 <HAL_GPIO_Init+0x2b8>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <HAL_GPIO_Init+0x2b8>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b90:	4a48      	ldr	r2, [pc, #288]	@ (8002cb4 <HAL_GPIO_Init+0x2bc>)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	@ (8002cb8 <HAL_GPIO_Init+0x2c0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_GPIO_Init+0x1ec>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8002cbc <HAL_GPIO_Init+0x2c4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00d      	beq.n	8002be0 <HAL_GPIO_Init+0x1e8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cc0 <HAL_GPIO_Init+0x2c8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <HAL_GPIO_Init+0x1e4>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc4 <HAL_GPIO_Init+0x2cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_GPIO_Init+0x1e0>
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e006      	b.n	8002be6 <HAL_GPIO_Init+0x1ee>
 8002bd8:	2304      	movs	r3, #4
 8002bda:	e004      	b.n	8002be6 <HAL_GPIO_Init+0x1ee>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x1ee>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_GPIO_Init+0x1ee>
 8002be4:	2300      	movs	r3, #0
 8002be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be8:	f002 0203 	and.w	r2, r2, #3
 8002bec:	0092      	lsls	r2, r2, #2
 8002bee:	4093      	lsls	r3, r2
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf6:	492f      	ldr	r1, [pc, #188]	@ (8002cb4 <HAL_GPIO_Init+0x2bc>)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c10:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	492c      	ldr	r1, [pc, #176]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4928      	ldr	r1, [pc, #160]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c38:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4922      	ldr	r1, [pc, #136]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60cb      	str	r3, [r1, #12]
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	491e      	ldr	r1, [pc, #120]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4918      	ldr	r1, [pc, #96]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	4914      	ldr	r1, [pc, #80]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d021      	beq.n	8002ccc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c88:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	490e      	ldr	r1, [pc, #56]	@ (8002cc8 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e021      	b.n	8002cda <HAL_GPIO_Init+0x2e2>
 8002c96:	bf00      	nop
 8002c98:	10320000 	.word	0x10320000
 8002c9c:	10310000 	.word	0x10310000
 8002ca0:	10220000 	.word	0x10220000
 8002ca4:	10210000 	.word	0x10210000
 8002ca8:	10120000 	.word	0x10120000
 8002cac:	10110000 	.word	0x10110000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40010800 	.word	0x40010800
 8002cbc:	40010c00 	.word	0x40010c00
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4909      	ldr	r1, [pc, #36]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f ae8e 	bne.w	8002a0c <HAL_GPIO_Init+0x14>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	372c      	adds	r7, #44	@ 0x2c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12b      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fabc 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	@ 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d94:	f001 fbf0 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a81      	ldr	r2, [pc, #516]	@ (8002fa4 <HAL_I2C_Init+0x274>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <HAL_I2C_Init+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a80      	ldr	r2, [pc, #512]	@ (8002fa8 <HAL_I2C_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e006      	b.n	8002dc2 <HAL_I2C_Init+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	@ (8002fac <HAL_I2C_Init+0x27c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0e7      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a78      	ldr	r2, [pc, #480]	@ (8002fb0 <HAL_I2C_Init+0x280>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa4 <HAL_I2C_Init+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <HAL_I2C_Init+0xd4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	e009      	b.n	8002e18 <HAL_I2C_Init+0xe8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4a69      	ldr	r2, [pc, #420]	@ (8002fb4 <HAL_I2C_Init+0x284>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	3301      	adds	r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	495c      	ldr	r1, [pc, #368]	@ (8002fa4 <HAL_I2C_Init+0x274>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d819      	bhi.n	8002e6c <HAL_I2C_Init+0x13c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Init+0x138>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e59      	subs	r1, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	e051      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_I2C_Init+0x168>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e012      	b.n	8002ebe <HAL_I2C_Init+0x18e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x196>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_I2C_Init+0x1bc>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e58      	subs	r0, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6911      	ldr	r1, [r2, #16]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68d2      	ldr	r2, [r2, #12]
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000186a0 	.word	0x000186a0
 8002fa8:	001e847f 	.word	0x001e847f
 8002fac:	003d08ff 	.word	0x003d08ff
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd2:	f7ff fc23 	bl	800281c <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f040 80d9 	bne.w	8003198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2319      	movs	r3, #25
 8002fec:	2201      	movs	r2, #1
 8002fee:	496d      	ldr	r1, [pc, #436]	@ (80031a4 <HAL_I2C_Mem_Write+0x1ec>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fcc1 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0cc      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_I2C_Mem_Write+0x56>
 800300a:	2302      	movs	r3, #2
 800300c:	e0c5      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d007      	beq.n	8003034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2221      	movs	r2, #33	@ 0x21
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003076:	88f8      	ldrh	r0, [r7, #6]
 8003078:	893a      	ldrh	r2, [r7, #8]
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	4603      	mov	r3, r0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 faf8 	bl	800367c <I2C_RequestMemoryWrite>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d052      	beq.n	8003138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e081      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fd86 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06b      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d11b      	bne.n	8003138 <HAL_I2C_Mem_Write+0x180>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1aa      	bne.n	8003096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fd79 	bl	8003c3c <I2C_WaitOnBTFFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	2b04      	cmp	r3, #4
 8003156:	d107      	bne.n	8003168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e016      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	00100002 	.word	0x00100002
 80031a8:	ffff0000 	.word	0xffff0000

080031ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	@ 0x30
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	460b      	mov	r3, r1
 80031c0:	813b      	strh	r3, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ca:	f7ff fb27 	bl	800281c <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 8244 	bne.w	8003666 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	4982      	ldr	r1, [pc, #520]	@ (80033f0 <HAL_I2C_Mem_Read+0x244>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fbc5 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e237      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Read+0x5a>
 8003202:	2302      	movs	r3, #2
 8003204:	e230      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d007      	beq.n	800322c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2222      	movs	r2, #34	@ 0x22
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	@ 0x40
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a62      	ldr	r2, [pc, #392]	@ (80033f4 <HAL_I2C_Mem_Read+0x248>)
 800326c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800326e:	88f8      	ldrh	r0, [r7, #6]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4603      	mov	r3, r0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa92 	bl	80037a8 <I2C_RequestMemoryRead>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1ec      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e1c0      	b.n	8003640 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11e      	bne.n	8003304 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032d6:	b672      	cpsid	i
}
 80032d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003300:	b662      	cpsie	i
}
 8003302:	e035      	b.n	8003370 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11e      	bne.n	800334a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800331c:	b672      	cpsid	i
}
 800331e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003346:	b662      	cpsie	i
}
 8003348:	e012      	b.n	8003370 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003358:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003370:	e166      	b.n	8003640 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	2b03      	cmp	r3, #3
 8003378:	f200 811f 	bhi.w	80035ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b01      	cmp	r3, #1
 8003382:	d123      	bne.n	80033cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fc9f 	bl	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e167      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033ca:	e139      	b.n	8003640 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d152      	bne.n	800347a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033da:	2200      	movs	r2, #0
 80033dc:	4906      	ldr	r1, [pc, #24]	@ (80033f8 <HAL_I2C_Mem_Read+0x24c>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 faca 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e13c      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
 80033ee:	bf00      	nop
 80033f0:	00100002 	.word	0x00100002
 80033f4:	ffff0000 	.word	0xffff0000
 80033f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003442:	b662      	cpsie	i
}
 8003444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003478:	e0e2      	b.n	8003640 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	2200      	movs	r2, #0
 8003482:	497b      	ldr	r1, [pc, #492]	@ (8003670 <HAL_I2C_Mem_Read+0x4c4>)
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fa77 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0e9      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a4:	b672      	cpsid	i
}
 80034a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034da:	4b66      	ldr	r3, [pc, #408]	@ (8003674 <HAL_I2C_Mem_Read+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	08db      	lsrs	r3, r3, #3
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_I2C_Mem_Read+0x4cc>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	0a1a      	lsrs	r2, r3, #8
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00da      	lsls	r2, r3, #3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d118      	bne.n	8003532 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003522:	b662      	cpsie	i
}
 8003524:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e09a      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d1d9      	bne.n	80034f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003582:	b662      	cpsie	i
}
 8003584:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b8:	e042      	b.n	8003640 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fb84 	bl	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e04c      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d118      	bne.n	8003640 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f ae94 	bne.w	8003372 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	@ 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	00010004 	.word	0x00010004
 8003674:	20000090 	.word	0x20000090
 8003678:	14f8b589 	.word	0x14f8b589

0800367c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f960 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036cc:	d103      	bne.n	80036d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e05f      	b.n	800379a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	492d      	ldr	r1, [pc, #180]	@ (80037a4 <I2C_RequestMemoryWrite+0x128>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9bb 	bl	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04c      	b.n	800379a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa46 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e02b      	b.n	800379a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e021      	b.n	8003798 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b29b      	uxth	r3, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003764:	6a39      	ldr	r1, [r7, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa20 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e005      	b.n	800379a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	00010002 	.word	0x00010002

080037a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f8c2 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003808:	d103      	bne.n	8003812 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0aa      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	4952      	ldr	r1, [pc, #328]	@ (8003974 <I2C_RequestMemoryRead+0x1cc>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f91d 	bl	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e097      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003854:	6a39      	ldr	r1, [r7, #32]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f9a8 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b04      	cmp	r3, #4
 8003868:	d107      	bne.n	800387a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e076      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003884:	893b      	ldrh	r3, [r7, #8]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	e021      	b.n	80038d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b29b      	uxth	r3, r3
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f982 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d107      	bne.n	80038c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e050      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ca:	893b      	ldrh	r3, [r7, #8]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	6a39      	ldr	r1, [r7, #32]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f967 	bl	8003bac <I2C_WaitOnTXEFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d107      	bne.n	80038fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e035      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800390e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2200      	movs	r2, #0
 8003918:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f82b 	bl	8003978 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003936:	d103      	bne.n	8003940 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e013      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003944:	897b      	ldrh	r3, [r7, #10]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	6a3a      	ldr	r2, [r7, #32]
 8003958:	4906      	ldr	r1, [pc, #24]	@ (8003974 <I2C_RequestMemoryRead+0x1cc>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f886 	bl	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	00010002 	.word	0x00010002

08003978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	e048      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003990:	d044      	beq.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe ff43 	bl	800281c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d139      	bne.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10d      	bne.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	e00c      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d116      	bne.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e023      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	e00c      	b.n	8003a5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d093      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7a:	e071      	b.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8a:	d123      	bne.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e067      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ada:	d041      	beq.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fe9e 	bl	800281c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d136      	bne.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10c      	bne.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e00b      	b.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e021      	b.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10c      	bne.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e00b      	b.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af6d 	bne.w	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb8:	e034      	b.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8e3 	bl	8003d86 <I2C_IsAcknowledgeFailed>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e034      	b.n	8003c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd0:	d028      	beq.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fe23 	bl	800281c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11d      	bne.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d016      	beq.n	8003c24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d1c3      	bne.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c48:	e034      	b.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f89b 	bl	8003d86 <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e034      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c60:	d028      	beq.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe fddb 	bl	800281c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11d      	bne.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d016      	beq.n	8003cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d1c3      	bne.n	8003c4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd8:	e049      	b.n	8003d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d119      	bne.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0210 	mvn.w	r2, #16
 8003cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e030      	b.n	8003d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fe fd7e 	bl	800281c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11d      	bne.n	8003d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	d016      	beq.n	8003d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e007      	b.n	8003d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d1ae      	bne.n	8003cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9c:	d11b      	bne.n	8003dd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003da6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e272      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8087 	beq.w	8003f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e04:	4b92      	ldr	r3, [pc, #584]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d00c      	beq.n	8003e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e10:	4b8f      	ldr	r3, [pc, #572]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d112      	bne.n	8003e42 <HAL_RCC_OscConfig+0x5e>
 8003e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2a:	4b89      	ldr	r3, [pc, #548]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d06c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x12c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d168      	bne.n	8003f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e24c      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x76>
 8003e4c:	4b80      	ldr	r3, [pc, #512]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a7f      	ldr	r2, [pc, #508]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	e02e      	b.n	8003eb8 <HAL_RCC_OscConfig+0xd4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x98>
 8003e62:	4b7b      	ldr	r3, [pc, #492]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7a      	ldr	r2, [pc, #488]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b78      	ldr	r3, [pc, #480]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a77      	ldr	r2, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xd4>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xbc>
 8003e86:	4b72      	ldr	r3, [pc, #456]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a71      	ldr	r2, [pc, #452]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b6f      	ldr	r3, [pc, #444]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6e      	ldr	r2, [pc, #440]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xd4>
 8003ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6a      	ldr	r2, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b68      	ldr	r3, [pc, #416]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a67      	ldr	r2, [pc, #412]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fcac 	bl	800281c <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fca8 	bl	800281c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e200      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b5d      	ldr	r3, [pc, #372]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xe4>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fc98 	bl	800281c <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fc94 	bl	800281c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1ec      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b53      	ldr	r3, [pc, #332]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x10c>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f2a:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d11c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x18c>
 8003f36:	4b46      	ldr	r3, [pc, #280]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d116      	bne.n	8003f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x176>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e1c0      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4939      	ldr	r1, [pc, #228]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	e03a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f78:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fc4d 	bl	800281c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fe fc49 	bl	800281c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1a1      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	4b2d      	ldr	r3, [pc, #180]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4927      	ldr	r1, [pc, #156]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fba:	4b26      	ldr	r3, [pc, #152]	@ (8004054 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fc2c 	bl	800281c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fc28 	bl	800281c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e180      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03a      	beq.n	8004068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d019      	beq.n	800402e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004000:	f7fe fc0c 	bl	800281c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004008:	f7fe fc08 	bl	800281c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e160      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_RCC_OscConfig+0x26c>)
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004026:	2001      	movs	r0, #1
 8004028:	f000 face 	bl	80045c8 <RCC_Delay>
 800402c:	e01c      	b.n	8004068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402e:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_RCC_OscConfig+0x274>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fe fbf2 	bl	800281c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800403a:	e00f      	b.n	800405c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403c:	f7fe fbee 	bl	800281c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d908      	bls.n	800405c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e146      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	42420000 	.word	0x42420000
 8004058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	4b92      	ldr	r3, [pc, #584]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e9      	bne.n	800403c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a6 	beq.w	80041c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800407a:	4b8b      	ldr	r3, [pc, #556]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	4b88      	ldr	r3, [pc, #544]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4a87      	ldr	r2, [pc, #540]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	61d3      	str	r3, [r2, #28]
 8004092:	4b85      	ldr	r3, [pc, #532]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b82      	ldr	r3, [pc, #520]	@ (80042ac <HAL_RCC_OscConfig+0x4c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d118      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b7f      	ldr	r3, [pc, #508]	@ (80042ac <HAL_RCC_OscConfig+0x4c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7e      	ldr	r2, [pc, #504]	@ (80042ac <HAL_RCC_OscConfig+0x4c8>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fbaf 	bl	800281c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe fbab 	bl	800281c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	@ 0x64
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e103      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b75      	ldr	r3, [pc, #468]	@ (80042ac <HAL_RCC_OscConfig+0x4c8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x312>
 80040e8:	4b6f      	ldr	r3, [pc, #444]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a6e      	ldr	r2, [pc, #440]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	e02d      	b.n	8004152 <HAL_RCC_OscConfig+0x36e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x334>
 80040fe:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4a69      	ldr	r2, [pc, #420]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	6213      	str	r3, [r2, #32]
 800410a:	4b67      	ldr	r3, [pc, #412]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4a66      	ldr	r2, [pc, #408]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	f023 0304 	bic.w	r3, r3, #4
 8004114:	6213      	str	r3, [r2, #32]
 8004116:	e01c      	b.n	8004152 <HAL_RCC_OscConfig+0x36e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d10c      	bne.n	800413a <HAL_RCC_OscConfig+0x356>
 8004120:	4b61      	ldr	r3, [pc, #388]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4a60      	ldr	r2, [pc, #384]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6213      	str	r3, [r2, #32]
 800412c:	4b5e      	ldr	r3, [pc, #376]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4a5d      	ldr	r2, [pc, #372]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6213      	str	r3, [r2, #32]
 8004138:	e00b      	b.n	8004152 <HAL_RCC_OscConfig+0x36e>
 800413a:	4b5b      	ldr	r3, [pc, #364]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a5a      	ldr	r2, [pc, #360]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6213      	str	r3, [r2, #32]
 8004146:	4b58      	ldr	r3, [pc, #352]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4a57      	ldr	r2, [pc, #348]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d015      	beq.n	8004186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fe fb5f 	bl	800281c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe fb5b 	bl	800281c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0b1      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	4b4b      	ldr	r3, [pc, #300]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RCC_OscConfig+0x37e>
 8004184:	e014      	b.n	80041b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fe fb49 	bl	800281c <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fe fb45 	bl	800281c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e09b      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a4:	4b40      	ldr	r3, [pc, #256]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ee      	bne.n	800418e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b3c      	ldr	r3, [pc, #240]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	4a3b      	ldr	r2, [pc, #236]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8087 	beq.w	80042da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041cc:	4b36      	ldr	r3, [pc, #216]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d061      	beq.n	800429c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d146      	bne.n	800426e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b33      	ldr	r3, [pc, #204]	@ (80042b0 <HAL_RCC_OscConfig+0x4cc>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fe fb19 	bl	800281c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe fb15 	bl	800281c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e06d      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004200:	4b29      	ldr	r3, [pc, #164]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004214:	d108      	bne.n	8004228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4921      	ldr	r1, [pc, #132]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004228:	4b1f      	ldr	r3, [pc, #124]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a19      	ldr	r1, [r3, #32]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	430b      	orrs	r3, r1
 800423a:	491b      	ldr	r1, [pc, #108]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x4cc>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fe fae9 	bl	800281c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424e:	f7fe fae5 	bl	800281c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e03d      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x46a>
 800426c:	e035      	b.n	80042da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	@ (80042b0 <HAL_RCC_OscConfig+0x4cc>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fe fad2 	bl	800281c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fe face 	bl	800281c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e026      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <HAL_RCC_OscConfig+0x4c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x498>
 800429a:	e01e      	b.n	80042da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e019      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40007000 	.word	0x40007000
 80042b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCC_OscConfig+0x500>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d0      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b67      	ldr	r3, [pc, #412]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	4965      	ldr	r1, [pc, #404]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800434e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d040      	beq.n	8004408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d115      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e073      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06b      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c6:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f023 0203 	bic.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4936      	ldr	r1, [pc, #216]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d8:	f7fe fa20 	bl	800281c <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7fe fa1c 	bl	800281c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e053      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 020c 	and.w	r2, r3, #12
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	429a      	cmp	r2, r3
 8004406:	d1eb      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004408:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d210      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 0207 	bic.w	r2, r3, #7
 800441e:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f97e 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40021000 	.word	0x40021000
 80044b0:	0800a564 	.word	0x0800a564
 80044b4:	20000090 	.word	0x20000090
 80044b8:	20000094 	.word	0x20000094

080044bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x30>
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x36>
 80044ea:	e027      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ee:	613b      	str	r3, [r7, #16]
      break;
 80044f0:	e027      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	0c9b      	lsrs	r3, r3, #18
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x94>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	0c5b      	lsrs	r3, r3, #17
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	4a11      	ldr	r2, [pc, #68]	@ (800455c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x98>)
 800451e:	fb03 f202 	mul.w	r2, r3, r2
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	e004      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0c      	ldr	r2, [pc, #48]	@ (8004560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	613b      	str	r3, [r7, #16]
      break;
 800453a:	e002      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x98>)
 800453e:	613b      	str	r3, [r7, #16]
      break;
 8004540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004542:	693b      	ldr	r3, [r7, #16]
}
 8004544:	4618      	mov	r0, r3
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	007a1200 	.word	0x007a1200
 8004558:	0800a57c 	.word	0x0800a57c
 800455c:	0800a58c 	.word	0x0800a58c
 8004560:	003d0900 	.word	0x003d0900

08004564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b02      	ldr	r3, [pc, #8]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x10>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	20000090 	.word	0x20000090

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff2 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	0800a574 	.word	0x0800a574

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffde 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0adb      	lsrs	r3, r3, #11
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800a574 	.word	0x0800a574

080045c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <RCC_Delay+0x34>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <RCC_Delay+0x38>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045e4:	bf00      	nop
  }
  while (Delay --);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1e5a      	subs	r2, r3, #1
 80045ea:	60fa      	str	r2, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f9      	bne.n	80045e4 <RCC_Delay+0x1c>
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	20000090 	.word	0x20000090
 8004600:	10624dd3 	.word	0x10624dd3

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e041      	b.n	800469a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd ff9a 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fbe2 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e041      	b.n	8004738 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f839 	bl	8004740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fb93 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
	...

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e022      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e015      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e008      	b.n	80047be <HAL_TIM_PWM_Start+0x6a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e05e      	b.n	8004884 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0x82>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d4:	e013      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x92>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e4:	e00b      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f4:	e003      	b.n	80047fe <HAL_TIM_PWM_Start+0xaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd80 	bl	800530c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <HAL_TIM_PWM_Start+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d107      	bne.n	8004826 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_TIM_PWM_Start+0x138>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_TIM_PWM_Start+0xfa>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004838:	d009      	beq.n	800484e <HAL_TIM_PWM_Start+0xfa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a14      	ldr	r2, [pc, #80]	@ (8004890 <HAL_TIM_PWM_Start+0x13c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_TIM_PWM_Start+0xfa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a12      	ldr	r2, [pc, #72]	@ (8004894 <HAL_TIM_PWM_Start+0x140>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d111      	bne.n	8004872 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b06      	cmp	r3, #6
 800485e:	d010      	beq.n	8004882 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	e007      	b.n	8004882 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e093      	b.n	80049d4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fd fde1 	bl	8002488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fa8d 	bl	8004e0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	4313      	orrs	r3, r2
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004938:	f023 030c 	bic.w	r3, r3, #12
 800493c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004944:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	4313      	orrs	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	011a      	lsls	r2, r3, #4
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	4313      	orrs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4313      	orrs	r3, r2
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a12:	7b7b      	ldrb	r3, [r7, #13]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e069      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a2c:	e031      	b.n	8004a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d110      	bne.n	8004a56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a3a:	7b3b      	ldrb	r3, [r7, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e055      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a54:	e01d      	b.n	8004a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a62:	7b7b      	ldrb	r3, [r7, #13]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d102      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a68:	7b3b      	ldrb	r3, [r7, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e03e      	b.n	8004af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_Encoder_Start+0xc4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d008      	beq.n	8004ab0 <HAL_TIM_Encoder_Start+0xd4>
 8004a9e:	e00f      	b.n	8004ac0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fc2f 	bl	800530c <TIM_CCxChannelCmd>
      break;
 8004aae:	e016      	b.n	8004ade <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fc27 	bl	800530c <TIM_CCxChannelCmd>
      break;
 8004abe:	e00e      	b.n	8004ade <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fc1f 	bl	800530c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fc18 	bl	800530c <TIM_CCxChannelCmd>
      break;
 8004adc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0ae      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	f200 809f 	bhi.w	8004c64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b26:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004c65 	.word	0x08004c65
 8004b34:	08004c65 	.word	0x08004c65
 8004b38:	08004c65 	.word	0x08004c65
 8004b3c:	08004ba1 	.word	0x08004ba1
 8004b40:	08004c65 	.word	0x08004c65
 8004b44:	08004c65 	.word	0x08004c65
 8004b48:	08004c65 	.word	0x08004c65
 8004b4c:	08004be3 	.word	0x08004be3
 8004b50:	08004c65 	.word	0x08004c65
 8004b54:	08004c65 	.word	0x08004c65
 8004b58:	08004c65 	.word	0x08004c65
 8004b5c:	08004c23 	.word	0x08004c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f9b2 	bl	8004ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0208 	orr.w	r2, r2, #8
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0204 	bic.w	r2, r2, #4
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	619a      	str	r2, [r3, #24]
      break;
 8004b9e:	e064      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f9f8 	bl	8004f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	021a      	lsls	r2, r3, #8
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	619a      	str	r2, [r3, #24]
      break;
 8004be0:	e043      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fa41 	bl	8005070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0208 	orr.w	r2, r2, #8
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0204 	bic.w	r2, r2, #4
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	61da      	str	r2, [r3, #28]
      break;
 8004c20:	e023      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fa8b 	bl	8005144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	021a      	lsls	r2, r3, #8
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	61da      	str	r2, [r3, #28]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
      break;
 8004c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_ConfigClockSource+0x1c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0b4      	b.n	8004e02 <HAL_TIM_ConfigClockSource+0x186>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd0:	d03e      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0xd4>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd6:	f200 8087 	bhi.w	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cde:	f000 8086 	beq.w	8004dee <HAL_TIM_ConfigClockSource+0x172>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce6:	d87f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b70      	cmp	r3, #112	@ 0x70
 8004cea:	d01a      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xa6>
 8004cec:	2b70      	cmp	r3, #112	@ 0x70
 8004cee:	d87b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b60      	cmp	r3, #96	@ 0x60
 8004cf2:	d050      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x11a>
 8004cf4:	2b60      	cmp	r3, #96	@ 0x60
 8004cf6:	d877      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b50      	cmp	r3, #80	@ 0x50
 8004cfa:	d03c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0xfa>
 8004cfc:	2b50      	cmp	r3, #80	@ 0x50
 8004cfe:	d873      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b40      	cmp	r3, #64	@ 0x40
 8004d02:	d058      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d04:	2b40      	cmp	r3, #64	@ 0x40
 8004d06:	d86f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b30      	cmp	r3, #48	@ 0x30
 8004d0a:	d064      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0c:	2b30      	cmp	r3, #48	@ 0x30
 8004d0e:	d86b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d060      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d867      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05c      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d05a      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	e062      	b.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d32:	f000 facc 	bl	80052ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	609a      	str	r2, [r3, #8]
      break;
 8004d4e:	e04f      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d60:	f000 fab5 	bl	80052ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d72:	609a      	str	r2, [r3, #8]
      break;
 8004d74:	e03c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 fa2c 	bl	80051e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2150      	movs	r1, #80	@ 0x50
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fa83 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004d94:	e02c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 fa4a 	bl	800523c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2160      	movs	r1, #96	@ 0x60
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fa73 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004db4:	e01c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 fa0c 	bl	80051e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2140      	movs	r1, #64	@ 0x40
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa63 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e00c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f000 fa5a 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004de6:	e003      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <TIM_Base_SetConfig+0xb8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <TIM_Base_SetConfig+0xbc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x30>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a25      	ldr	r2, [pc, #148]	@ (8004ecc <TIM_Base_SetConfig+0xc0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <TIM_Base_SetConfig+0xb8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <TIM_Base_SetConfig+0xbc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x62>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a18      	ldr	r2, [pc, #96]	@ (8004ecc <TIM_Base_SetConfig+0xc0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a07      	ldr	r2, [pc, #28]	@ (8004ec4 <TIM_Base_SetConfig+0xb8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d103      	bne.n	8004eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800

08004ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f023 0201 	bic.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0302 	bic.w	r3, r3, #2
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <TIM_OC1_SetConfig+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10c      	bne.n	8004f46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0308 	bic.w	r3, r3, #8
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <TIM_OC1_SetConfig+0xc8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d111      	bne.n	8004f72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00

08004f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f023 0210 	bic.w	r2, r3, #16
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <TIM_OC2_SetConfig+0xd0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10d      	bne.n	8005018 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005016:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a14      	ldr	r2, [pc, #80]	@ (800506c <TIM_OC2_SetConfig+0xd0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d113      	bne.n	8005048 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	40012c00 	.word	0x40012c00

08005070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d113      	bne.n	800511a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00

08005144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800518e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0f      	ldr	r2, [pc, #60]	@ (80051dc <TIM_OC4_SetConfig+0x98>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d109      	bne.n	80051b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	019b      	lsls	r3, r3, #6
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00

080051e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 030a 	bic.w	r3, r3, #10
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0210 	bic.w	r2, r3, #16
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	031b      	lsls	r3, r3, #12
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005278:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	021a      	lsls	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	609a      	str	r2, [r3, #8]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2201      	movs	r2, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e046      	b.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d009      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a12      	ldr	r2, [pc, #72]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a10      	ldr	r2, [pc, #64]	@ (800540c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10c      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800

08005410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e042      	b.n	80054a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fd f928 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	@ 0x24
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f91d 	bl	8005694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d16d      	bne.n	80055ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_UART_Transmit+0x2c>
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e066      	b.n	80055ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2221      	movs	r2, #33	@ 0x21
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ee:	f7fd f995 	bl	800281c <HAL_GetTick>
 80054f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005508:	d108      	bne.n	800551c <HAL_UART_Transmit+0x6c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e003      	b.n	8005524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005524:	e02a      	b.n	800557c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f840 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e036      	b.n	80055ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3302      	adds	r3, #2
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e007      	b.n	800556e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1cf      	bne.n	8005526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	2140      	movs	r1, #64	@ 0x40
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f810 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e006      	b.n	80055ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b090      	sub	sp, #64	@ 0x40
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	e050      	b.n	800566a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ce:	d04c      	beq.n	800566a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d6:	f7fd f921 	bl	800281c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d241      	bcs.n	800566a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005606:	637a      	str	r2, [r7, #52]	@ 0x34
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800560c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3314      	adds	r3, #20
 8005620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800563a:	623a      	str	r2, [r7, #32]
 800563c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	69f9      	ldr	r1, [r7, #28]
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	61bb      	str	r3, [r7, #24]
   return(result);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e00f      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	429a      	cmp	r2, r3
 8005686:	d09f      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3740      	adds	r7, #64	@ 0x40
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80056ce:	f023 030c 	bic.w	r3, r3, #12
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	430b      	orrs	r3, r1
 80056da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2c      	ldr	r2, [pc, #176]	@ (80057a8 <UART_SetConfig+0x114>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d103      	bne.n	8005704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fe ff50 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	e002      	b.n	800570a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe ff38 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8005708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	4a22      	ldr	r2, [pc, #136]	@ (80057ac <UART_SetConfig+0x118>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	0119      	lsls	r1, r3, #4
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009a      	lsls	r2, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005740:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <UART_SetConfig+0x118>)
 8005742:	fba3 0302 	umull	r0, r3, r3, r2
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2064      	movs	r0, #100	@ 0x64
 800574a:	fb00 f303 	mul.w	r3, r0, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	3332      	adds	r3, #50	@ 0x32
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <UART_SetConfig+0x118>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005760:	4419      	add	r1, r3
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009a      	lsls	r2, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	fbb2 f2f3 	udiv	r2, r2, r3
 8005778:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <UART_SetConfig+0x118>)
 800577a:	fba3 0302 	umull	r0, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2064      	movs	r0, #100	@ 0x64
 8005782:	fb00 f303 	mul.w	r3, r0, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	3332      	adds	r3, #50	@ 0x32
 800578c:	4a07      	ldr	r2, [pc, #28]	@ (80057ac <UART_SetConfig+0x118>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	440a      	add	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40013800 	.word	0x40013800
 80057ac:	51eb851f 	.word	0x51eb851f

080057b0 <__cvt>:
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b6:	461d      	mov	r5, r3
 80057b8:	bfbb      	ittet	lt
 80057ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80057be:	461d      	movlt	r5, r3
 80057c0:	2300      	movge	r3, #0
 80057c2:	232d      	movlt	r3, #45	@ 0x2d
 80057c4:	b088      	sub	sp, #32
 80057c6:	4614      	mov	r4, r2
 80057c8:	bfb8      	it	lt
 80057ca:	4614      	movlt	r4, r2
 80057cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80057d0:	7013      	strb	r3, [r2, #0]
 80057d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057d8:	f023 0820 	bic.w	r8, r3, #32
 80057dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e0:	d005      	beq.n	80057ee <__cvt+0x3e>
 80057e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057e6:	d100      	bne.n	80057ea <__cvt+0x3a>
 80057e8:	3601      	adds	r6, #1
 80057ea:	2302      	movs	r3, #2
 80057ec:	e000      	b.n	80057f0 <__cvt+0x40>
 80057ee:	2303      	movs	r3, #3
 80057f0:	aa07      	add	r2, sp, #28
 80057f2:	9204      	str	r2, [sp, #16]
 80057f4:	aa06      	add	r2, sp, #24
 80057f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057fa:	e9cd 3600 	strd	r3, r6, [sp]
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f001 f881 	bl	8006908 <_dtoa_r>
 8005806:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800580a:	4607      	mov	r7, r0
 800580c:	d119      	bne.n	8005842 <__cvt+0x92>
 800580e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005810:	07db      	lsls	r3, r3, #31
 8005812:	d50e      	bpl.n	8005832 <__cvt+0x82>
 8005814:	eb00 0906 	add.w	r9, r0, r6
 8005818:	2200      	movs	r2, #0
 800581a:	2300      	movs	r3, #0
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fb f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8005824:	b108      	cbz	r0, 800582a <__cvt+0x7a>
 8005826:	f8cd 901c 	str.w	r9, [sp, #28]
 800582a:	2230      	movs	r2, #48	@ 0x30
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	454b      	cmp	r3, r9
 8005830:	d31e      	bcc.n	8005870 <__cvt+0xc0>
 8005832:	4638      	mov	r0, r7
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005838:	1bdb      	subs	r3, r3, r7
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	b008      	add	sp, #32
 800583e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005842:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005846:	eb00 0906 	add.w	r9, r0, r6
 800584a:	d1e5      	bne.n	8005818 <__cvt+0x68>
 800584c:	7803      	ldrb	r3, [r0, #0]
 800584e:	2b30      	cmp	r3, #48	@ 0x30
 8005850:	d10a      	bne.n	8005868 <__cvt+0xb8>
 8005852:	2200      	movs	r2, #0
 8005854:	2300      	movs	r3, #0
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f7fb f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800585e:	b918      	cbnz	r0, 8005868 <__cvt+0xb8>
 8005860:	f1c6 0601 	rsb	r6, r6, #1
 8005864:	f8ca 6000 	str.w	r6, [sl]
 8005868:	f8da 3000 	ldr.w	r3, [sl]
 800586c:	4499      	add	r9, r3
 800586e:	e7d3      	b.n	8005818 <__cvt+0x68>
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	9107      	str	r1, [sp, #28]
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e7d9      	b.n	800582c <__cvt+0x7c>

08005878 <__exponent>:
 8005878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800587a:	2900      	cmp	r1, #0
 800587c:	bfb6      	itet	lt
 800587e:	232d      	movlt	r3, #45	@ 0x2d
 8005880:	232b      	movge	r3, #43	@ 0x2b
 8005882:	4249      	neglt	r1, r1
 8005884:	2909      	cmp	r1, #9
 8005886:	7002      	strb	r2, [r0, #0]
 8005888:	7043      	strb	r3, [r0, #1]
 800588a:	dd29      	ble.n	80058e0 <__exponent+0x68>
 800588c:	f10d 0307 	add.w	r3, sp, #7
 8005890:	461d      	mov	r5, r3
 8005892:	270a      	movs	r7, #10
 8005894:	fbb1 f6f7 	udiv	r6, r1, r7
 8005898:	461a      	mov	r2, r3
 800589a:	fb07 1416 	mls	r4, r7, r6, r1
 800589e:	3430      	adds	r4, #48	@ 0x30
 80058a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058a4:	460c      	mov	r4, r1
 80058a6:	2c63      	cmp	r4, #99	@ 0x63
 80058a8:	4631      	mov	r1, r6
 80058aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80058ae:	dcf1      	bgt.n	8005894 <__exponent+0x1c>
 80058b0:	3130      	adds	r1, #48	@ 0x30
 80058b2:	1e94      	subs	r4, r2, #2
 80058b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058b8:	4623      	mov	r3, r4
 80058ba:	1c41      	adds	r1, r0, #1
 80058bc:	42ab      	cmp	r3, r5
 80058be:	d30a      	bcc.n	80058d6 <__exponent+0x5e>
 80058c0:	f10d 0309 	add.w	r3, sp, #9
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	42ac      	cmp	r4, r5
 80058c8:	bf88      	it	hi
 80058ca:	2300      	movhi	r3, #0
 80058cc:	3302      	adds	r3, #2
 80058ce:	4403      	add	r3, r0
 80058d0:	1a18      	subs	r0, r3, r0
 80058d2:	b003      	add	sp, #12
 80058d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058de:	e7ed      	b.n	80058bc <__exponent+0x44>
 80058e0:	2330      	movs	r3, #48	@ 0x30
 80058e2:	3130      	adds	r1, #48	@ 0x30
 80058e4:	7083      	strb	r3, [r0, #2]
 80058e6:	70c1      	strb	r1, [r0, #3]
 80058e8:	1d03      	adds	r3, r0, #4
 80058ea:	e7f1      	b.n	80058d0 <__exponent+0x58>

080058ec <_printf_float>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	b091      	sub	sp, #68	@ 0x44
 80058f2:	460c      	mov	r4, r1
 80058f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80058f8:	4616      	mov	r6, r2
 80058fa:	461f      	mov	r7, r3
 80058fc:	4605      	mov	r5, r0
 80058fe:	f000 fef1 	bl	80066e4 <_localeconv_r>
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	9308      	str	r3, [sp, #32]
 8005908:	f7fa fc22 	bl	8000150 <strlen>
 800590c:	2300      	movs	r3, #0
 800590e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005910:	f8d8 3000 	ldr.w	r3, [r8]
 8005914:	9009      	str	r0, [sp, #36]	@ 0x24
 8005916:	3307      	adds	r3, #7
 8005918:	f023 0307 	bic.w	r3, r3, #7
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005924:	f8d4 b000 	ldr.w	fp, [r4]
 8005928:	f8c8 2000 	str.w	r2, [r8]
 800592c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005936:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800593a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800593e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005946:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb8 <_printf_float+0x2cc>)
 8005948:	f7fb f860 	bl	8000a0c <__aeabi_dcmpun>
 800594c:	bb70      	cbnz	r0, 80059ac <_printf_float+0xc0>
 800594e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005952:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005956:	4b98      	ldr	r3, [pc, #608]	@ (8005bb8 <_printf_float+0x2cc>)
 8005958:	f7fb f83a 	bl	80009d0 <__aeabi_dcmple>
 800595c:	bb30      	cbnz	r0, 80059ac <_printf_float+0xc0>
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fb f829 	bl	80009bc <__aeabi_dcmplt>
 800596a:	b110      	cbz	r0, 8005972 <_printf_float+0x86>
 800596c:	232d      	movs	r3, #45	@ 0x2d
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005972:	4a92      	ldr	r2, [pc, #584]	@ (8005bbc <_printf_float+0x2d0>)
 8005974:	4b92      	ldr	r3, [pc, #584]	@ (8005bc0 <_printf_float+0x2d4>)
 8005976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800597a:	bf94      	ite	ls
 800597c:	4690      	movls	r8, r2
 800597e:	4698      	movhi	r8, r3
 8005980:	2303      	movs	r3, #3
 8005982:	f04f 0900 	mov.w	r9, #0
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	f02b 0304 	bic.w	r3, fp, #4
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	4633      	mov	r3, r6
 8005990:	4621      	mov	r1, r4
 8005992:	4628      	mov	r0, r5
 8005994:	9700      	str	r7, [sp, #0]
 8005996:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005998:	f000 f9d4 	bl	8005d44 <_printf_common>
 800599c:	3001      	adds	r0, #1
 800599e:	f040 8090 	bne.w	8005ac2 <_printf_float+0x1d6>
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059a6:	b011      	add	sp, #68	@ 0x44
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fb f82a 	bl	8000a0c <__aeabi_dcmpun>
 80059b8:	b148      	cbz	r0, 80059ce <_printf_float+0xe2>
 80059ba:	464b      	mov	r3, r9
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfb8      	it	lt
 80059c0:	232d      	movlt	r3, #45	@ 0x2d
 80059c2:	4a80      	ldr	r2, [pc, #512]	@ (8005bc4 <_printf_float+0x2d8>)
 80059c4:	bfb8      	it	lt
 80059c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059ca:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc8 <_printf_float+0x2dc>)
 80059cc:	e7d3      	b.n	8005976 <_printf_float+0x8a>
 80059ce:	6863      	ldr	r3, [r4, #4]
 80059d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	d13f      	bne.n	8005a58 <_printf_float+0x16c>
 80059d8:	2306      	movs	r3, #6
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	9206      	str	r2, [sp, #24]
 80059e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80059e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80059ec:	aa0d      	add	r2, sp, #52	@ 0x34
 80059ee:	9203      	str	r2, [sp, #12]
 80059f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80059f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	4642      	mov	r2, r8
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	4628      	mov	r0, r5
 8005a00:	464b      	mov	r3, r9
 8005a02:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a04:	f7ff fed4 	bl	80057b0 <__cvt>
 8005a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	2947      	cmp	r1, #71	@ 0x47
 8005a0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005a10:	d128      	bne.n	8005a64 <_printf_float+0x178>
 8005a12:	1cc8      	adds	r0, r1, #3
 8005a14:	db02      	blt.n	8005a1c <_printf_float+0x130>
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	dd40      	ble.n	8005a9e <_printf_float+0x1b2>
 8005a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a20:	fa5f fa8a 	uxtb.w	sl, sl
 8005a24:	4652      	mov	r2, sl
 8005a26:	3901      	subs	r1, #1
 8005a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a2c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005a2e:	f7ff ff23 	bl	8005878 <__exponent>
 8005a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a34:	4681      	mov	r9, r0
 8005a36:	1813      	adds	r3, r2, r0
 8005a38:	2a01      	cmp	r2, #1
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	dc02      	bgt.n	8005a44 <_printf_float+0x158>
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	07d2      	lsls	r2, r2, #31
 8005a42:	d501      	bpl.n	8005a48 <_printf_float+0x15c>
 8005a44:	3301      	adds	r3, #1
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d09e      	beq.n	800598e <_printf_float+0xa2>
 8005a50:	232d      	movs	r3, #45	@ 0x2d
 8005a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a56:	e79a      	b.n	800598e <_printf_float+0xa2>
 8005a58:	2947      	cmp	r1, #71	@ 0x47
 8005a5a:	d1bf      	bne.n	80059dc <_printf_float+0xf0>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1bd      	bne.n	80059dc <_printf_float+0xf0>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e7ba      	b.n	80059da <_printf_float+0xee>
 8005a64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a68:	d9dc      	bls.n	8005a24 <_printf_float+0x138>
 8005a6a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a6e:	d118      	bne.n	8005aa2 <_printf_float+0x1b6>
 8005a70:	2900      	cmp	r1, #0
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	dd0b      	ble.n	8005a8e <_printf_float+0x1a2>
 8005a76:	6121      	str	r1, [r4, #16]
 8005a78:	b913      	cbnz	r3, 8005a80 <_printf_float+0x194>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	07d0      	lsls	r0, r2, #31
 8005a7e:	d502      	bpl.n	8005a86 <_printf_float+0x19a>
 8005a80:	3301      	adds	r3, #1
 8005a82:	440b      	add	r3, r1
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	f04f 0900 	mov.w	r9, #0
 8005a8a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a8c:	e7dc      	b.n	8005a48 <_printf_float+0x15c>
 8005a8e:	b913      	cbnz	r3, 8005a96 <_printf_float+0x1aa>
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	07d2      	lsls	r2, r2, #31
 8005a94:	d501      	bpl.n	8005a9a <_printf_float+0x1ae>
 8005a96:	3302      	adds	r3, #2
 8005a98:	e7f4      	b.n	8005a84 <_printf_float+0x198>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7f2      	b.n	8005a84 <_printf_float+0x198>
 8005a9e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aa4:	4299      	cmp	r1, r3
 8005aa6:	db05      	blt.n	8005ab4 <_printf_float+0x1c8>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	6121      	str	r1, [r4, #16]
 8005aac:	07d8      	lsls	r0, r3, #31
 8005aae:	d5ea      	bpl.n	8005a86 <_printf_float+0x19a>
 8005ab0:	1c4b      	adds	r3, r1, #1
 8005ab2:	e7e7      	b.n	8005a84 <_printf_float+0x198>
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	bfcc      	ite	gt
 8005ab8:	2201      	movgt	r2, #1
 8005aba:	f1c1 0202 	rsble	r2, r1, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	e7e0      	b.n	8005a84 <_printf_float+0x198>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	055a      	lsls	r2, r3, #21
 8005ac6:	d407      	bmi.n	8005ad8 <_printf_float+0x1ec>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	4642      	mov	r2, r8
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d12b      	bne.n	8005b2e <_printf_float+0x242>
 8005ad6:	e764      	b.n	80059a2 <_printf_float+0xb6>
 8005ad8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005adc:	f240 80dc 	bls.w	8005c98 <_printf_float+0x3ac>
 8005ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f7fa ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d033      	beq.n	8005b58 <_printf_float+0x26c>
 8005af0:	2301      	movs	r3, #1
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	4a35      	ldr	r2, [pc, #212]	@ (8005bcc <_printf_float+0x2e0>)
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f af51 	beq.w	80059a2 <_printf_float+0xb6>
 8005b00:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005b04:	4543      	cmp	r3, r8
 8005b06:	db02      	blt.n	8005b0e <_printf_float+0x222>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07d8      	lsls	r0, r3, #31
 8005b0c:	d50f      	bpl.n	8005b2e <_printf_float+0x242>
 8005b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f af42 	beq.w	80059a2 <_printf_float+0xb6>
 8005b1e:	f04f 0900 	mov.w	r9, #0
 8005b22:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005b26:	f104 0a1a 	add.w	sl, r4, #26
 8005b2a:	45c8      	cmp	r8, r9
 8005b2c:	dc09      	bgt.n	8005b42 <_printf_float+0x256>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	079b      	lsls	r3, r3, #30
 8005b32:	f100 8102 	bmi.w	8005d3a <_printf_float+0x44e>
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	bfb8      	it	lt
 8005b3e:	4618      	movlt	r0, r3
 8005b40:	e731      	b.n	80059a6 <_printf_float+0xba>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4652      	mov	r2, sl
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f af28 	beq.w	80059a2 <_printf_float+0xb6>
 8005b52:	f109 0901 	add.w	r9, r9, #1
 8005b56:	e7e8      	b.n	8005b2a <_printf_float+0x23e>
 8005b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dc38      	bgt.n	8005bd0 <_printf_float+0x2e4>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <_printf_float+0x2e0>)
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f af1a 	beq.w	80059a2 <_printf_float+0xb6>
 8005b6e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b72:	ea59 0303 	orrs.w	r3, r9, r3
 8005b76:	d102      	bne.n	8005b7e <_printf_float+0x292>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	d5d7      	bpl.n	8005b2e <_printf_float+0x242>
 8005b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f af0a 	beq.w	80059a2 <_printf_float+0xb6>
 8005b8e:	f04f 0a00 	mov.w	sl, #0
 8005b92:	f104 0b1a 	add.w	fp, r4, #26
 8005b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b98:	425b      	negs	r3, r3
 8005b9a:	4553      	cmp	r3, sl
 8005b9c:	dc01      	bgt.n	8005ba2 <_printf_float+0x2b6>
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	e793      	b.n	8005aca <_printf_float+0x1de>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	465a      	mov	r2, fp
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f aef8 	beq.w	80059a2 <_printf_float+0xb6>
 8005bb2:	f10a 0a01 	add.w	sl, sl, #1
 8005bb6:	e7ee      	b.n	8005b96 <_printf_float+0x2aa>
 8005bb8:	7fefffff 	.word	0x7fefffff
 8005bbc:	0800a58e 	.word	0x0800a58e
 8005bc0:	0800a592 	.word	0x0800a592
 8005bc4:	0800a596 	.word	0x0800a596
 8005bc8:	0800a59a 	.word	0x0800a59a
 8005bcc:	0800a59e 	.word	0x0800a59e
 8005bd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bd2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005bd6:	4553      	cmp	r3, sl
 8005bd8:	bfa8      	it	ge
 8005bda:	4653      	movge	r3, sl
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	4699      	mov	r9, r3
 8005be0:	dc36      	bgt.n	8005c50 <_printf_float+0x364>
 8005be2:	f04f 0b00 	mov.w	fp, #0
 8005be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bea:	f104 021a 	add.w	r2, r4, #26
 8005bee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bf2:	eba3 0309 	sub.w	r3, r3, r9
 8005bf6:	455b      	cmp	r3, fp
 8005bf8:	dc31      	bgt.n	8005c5e <_printf_float+0x372>
 8005bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bfc:	459a      	cmp	sl, r3
 8005bfe:	dc3a      	bgt.n	8005c76 <_printf_float+0x38a>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07da      	lsls	r2, r3, #31
 8005c04:	d437      	bmi.n	8005c76 <_printf_float+0x38a>
 8005c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c08:	ebaa 0903 	sub.w	r9, sl, r3
 8005c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c0e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c12:	4599      	cmp	r9, r3
 8005c14:	bfa8      	it	ge
 8005c16:	4699      	movge	r9, r3
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	dc33      	bgt.n	8005c86 <_printf_float+0x39a>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c26:	f104 0b1a 	add.w	fp, r4, #26
 8005c2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c30:	eba3 0309 	sub.w	r3, r3, r9
 8005c34:	4543      	cmp	r3, r8
 8005c36:	f77f af7a 	ble.w	8005b2e <_printf_float+0x242>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	465a      	mov	r2, fp
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f aeac 	beq.w	80059a2 <_printf_float+0xb6>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	e7ec      	b.n	8005c2a <_printf_float+0x33e>
 8005c50:	4642      	mov	r2, r8
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1c2      	bne.n	8005be2 <_printf_float+0x2f6>
 8005c5c:	e6a1      	b.n	80059a2 <_printf_float+0xb6>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f ae9a 	beq.w	80059a2 <_printf_float+0xb6>
 8005c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c70:	f10b 0b01 	add.w	fp, fp, #1
 8005c74:	e7bb      	b.n	8005bee <_printf_float+0x302>
 8005c76:	4631      	mov	r1, r6
 8005c78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	d1c0      	bne.n	8005c06 <_printf_float+0x31a>
 8005c84:	e68d      	b.n	80059a2 <_printf_float+0xb6>
 8005c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c88:	464b      	mov	r3, r9
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	4442      	add	r2, r8
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	d1c3      	bne.n	8005c1e <_printf_float+0x332>
 8005c96:	e684      	b.n	80059a2 <_printf_float+0xb6>
 8005c98:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c9c:	f1ba 0f01 	cmp.w	sl, #1
 8005ca0:	dc01      	bgt.n	8005ca6 <_printf_float+0x3ba>
 8005ca2:	07db      	lsls	r3, r3, #31
 8005ca4:	d536      	bpl.n	8005d14 <_printf_float+0x428>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f ae76 	beq.w	80059a2 <_printf_float+0xb6>
 8005cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae6e 	beq.w	80059a2 <_printf_float+0xb6>
 8005cc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005cd2:	f7fa fe69 	bl	80009a8 <__aeabi_dcmpeq>
 8005cd6:	b9c0      	cbnz	r0, 8005d0a <_printf_float+0x41e>
 8005cd8:	4653      	mov	r3, sl
 8005cda:	f108 0201 	add.w	r2, r8, #1
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d10c      	bne.n	8005d02 <_printf_float+0x416>
 8005ce8:	e65b      	b.n	80059a2 <_printf_float+0xb6>
 8005cea:	2301      	movs	r3, #1
 8005cec:	465a      	mov	r2, fp
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae54 	beq.w	80059a2 <_printf_float+0xb6>
 8005cfa:	f108 0801 	add.w	r8, r8, #1
 8005cfe:	45d0      	cmp	r8, sl
 8005d00:	dbf3      	blt.n	8005cea <_printf_float+0x3fe>
 8005d02:	464b      	mov	r3, r9
 8005d04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d08:	e6e0      	b.n	8005acc <_printf_float+0x1e0>
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f104 0b1a 	add.w	fp, r4, #26
 8005d12:	e7f4      	b.n	8005cfe <_printf_float+0x412>
 8005d14:	2301      	movs	r3, #1
 8005d16:	4642      	mov	r2, r8
 8005d18:	e7e1      	b.n	8005cde <_printf_float+0x3f2>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	464a      	mov	r2, r9
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	f43f ae3c 	beq.w	80059a2 <_printf_float+0xb6>
 8005d2a:	f108 0801 	add.w	r8, r8, #1
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d32:	1a5b      	subs	r3, r3, r1
 8005d34:	4543      	cmp	r3, r8
 8005d36:	dcf0      	bgt.n	8005d1a <_printf_float+0x42e>
 8005d38:	e6fd      	b.n	8005b36 <_printf_float+0x24a>
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	f104 0919 	add.w	r9, r4, #25
 8005d42:	e7f4      	b.n	8005d2e <_printf_float+0x442>

08005d44 <_printf_common>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	4616      	mov	r6, r2
 8005d4a:	4698      	mov	r8, r3
 8005d4c:	688a      	ldr	r2, [r1, #8]
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	4607      	mov	r7, r0
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bfb8      	it	lt
 8005d56:	4613      	movlt	r3, r2
 8005d58:	6033      	str	r3, [r6, #0]
 8005d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d64:	b10a      	cbz	r2, 8005d6a <_printf_common+0x26>
 8005d66:	3301      	adds	r3, #1
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	0699      	lsls	r1, r3, #26
 8005d6e:	bf42      	ittt	mi
 8005d70:	6833      	ldrmi	r3, [r6, #0]
 8005d72:	3302      	addmi	r3, #2
 8005d74:	6033      	strmi	r3, [r6, #0]
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	f015 0506 	ands.w	r5, r5, #6
 8005d7c:	d106      	bne.n	8005d8c <_printf_common+0x48>
 8005d7e:	f104 0a19 	add.w	sl, r4, #25
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	6832      	ldr	r2, [r6, #0]
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dc2b      	bgt.n	8005de4 <_printf_common+0xa0>
 8005d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	3b00      	subs	r3, #0
 8005d94:	bf18      	it	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d430      	bmi.n	8005dfe <_printf_common+0xba>
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005da4:	47c8      	blx	r9
 8005da6:	3001      	adds	r0, #1
 8005da8:	d023      	beq.n	8005df2 <_printf_common+0xae>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	6922      	ldr	r2, [r4, #16]
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	bf14      	ite	ne
 8005db6:	2500      	movne	r5, #0
 8005db8:	6833      	ldreq	r3, [r6, #0]
 8005dba:	f04f 0600 	mov.w	r6, #0
 8005dbe:	bf08      	it	eq
 8005dc0:	68e5      	ldreq	r5, [r4, #12]
 8005dc2:	f104 041a 	add.w	r4, r4, #26
 8005dc6:	bf08      	it	eq
 8005dc8:	1aed      	subeq	r5, r5, r3
 8005dca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dce:	bf08      	it	eq
 8005dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bfc4      	itt	gt
 8005dd8:	1a9b      	subgt	r3, r3, r2
 8005dda:	18ed      	addgt	r5, r5, r3
 8005ddc:	42b5      	cmp	r5, r6
 8005dde:	d11a      	bne.n	8005e16 <_printf_common+0xd2>
 8005de0:	2000      	movs	r0, #0
 8005de2:	e008      	b.n	8005df6 <_printf_common+0xb2>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4652      	mov	r2, sl
 8005de8:	4641      	mov	r1, r8
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c8      	blx	r9
 8005dee:	3001      	adds	r0, #1
 8005df0:	d103      	bne.n	8005dfa <_printf_common+0xb6>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfa:	3501      	adds	r5, #1
 8005dfc:	e7c1      	b.n	8005d82 <_printf_common+0x3e>
 8005dfe:	2030      	movs	r0, #48	@ 0x30
 8005e00:	18e1      	adds	r1, r4, r3
 8005e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e0c:	4422      	add	r2, r4
 8005e0e:	3302      	adds	r3, #2
 8005e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e14:	e7c2      	b.n	8005d9c <_printf_common+0x58>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	47c8      	blx	r9
 8005e20:	3001      	adds	r0, #1
 8005e22:	d0e6      	beq.n	8005df2 <_printf_common+0xae>
 8005e24:	3601      	adds	r6, #1
 8005e26:	e7d9      	b.n	8005ddc <_printf_common+0x98>

08005e28 <_printf_i>:
 8005e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	7e0f      	ldrb	r7, [r1, #24]
 8005e2e:	4691      	mov	r9, r2
 8005e30:	2f78      	cmp	r7, #120	@ 0x78
 8005e32:	4680      	mov	r8, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	469a      	mov	sl, r3
 8005e38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e3e:	d807      	bhi.n	8005e50 <_printf_i+0x28>
 8005e40:	2f62      	cmp	r7, #98	@ 0x62
 8005e42:	d80a      	bhi.n	8005e5a <_printf_i+0x32>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	f000 80d3 	beq.w	8005ff0 <_printf_i+0x1c8>
 8005e4a:	2f58      	cmp	r7, #88	@ 0x58
 8005e4c:	f000 80ba 	beq.w	8005fc4 <_printf_i+0x19c>
 8005e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e58:	e03a      	b.n	8005ed0 <_printf_i+0xa8>
 8005e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e5e:	2b15      	cmp	r3, #21
 8005e60:	d8f6      	bhi.n	8005e50 <_printf_i+0x28>
 8005e62:	a101      	add	r1, pc, #4	@ (adr r1, 8005e68 <_printf_i+0x40>)
 8005e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e68:	08005ec1 	.word	0x08005ec1
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005e51 	.word	0x08005e51
 8005e74:	08005e51 	.word	0x08005e51
 8005e78:	08005e51 	.word	0x08005e51
 8005e7c:	08005e51 	.word	0x08005e51
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e51 	.word	0x08005e51
 8005e88:	08005e51 	.word	0x08005e51
 8005e8c:	08005e51 	.word	0x08005e51
 8005e90:	08005e51 	.word	0x08005e51
 8005e94:	08005fd7 	.word	0x08005fd7
 8005e98:	08005eff 	.word	0x08005eff
 8005e9c:	08005f91 	.word	0x08005f91
 8005ea0:	08005e51 	.word	0x08005e51
 8005ea4:	08005e51 	.word	0x08005e51
 8005ea8:	08005ff9 	.word	0x08005ff9
 8005eac:	08005e51 	.word	0x08005e51
 8005eb0:	08005eff 	.word	0x08005eff
 8005eb4:	08005e51 	.word	0x08005e51
 8005eb8:	08005e51 	.word	0x08005e51
 8005ebc:	08005f99 	.word	0x08005f99
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6032      	str	r2, [r6, #0]
 8005ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e09e      	b.n	8006012 <_printf_i+0x1ea>
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	1d19      	adds	r1, r3, #4
 8005eda:	6031      	str	r1, [r6, #0]
 8005edc:	0606      	lsls	r6, r0, #24
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0xbc>
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	e003      	b.n	8005eec <_printf_i+0xc4>
 8005ee4:	0645      	lsls	r5, r0, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0xb8>
 8005ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	da03      	bge.n	8005ef8 <_printf_i+0xd0>
 8005ef0:	232d      	movs	r3, #45	@ 0x2d
 8005ef2:	426d      	negs	r5, r5
 8005ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef8:	230a      	movs	r3, #10
 8005efa:	4859      	ldr	r0, [pc, #356]	@ (8006060 <_printf_i+0x238>)
 8005efc:	e011      	b.n	8005f22 <_printf_i+0xfa>
 8005efe:	6821      	ldr	r1, [r4, #0]
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	0608      	lsls	r0, r1, #24
 8005f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f08:	d402      	bmi.n	8005f10 <_printf_i+0xe8>
 8005f0a:	0649      	lsls	r1, r1, #25
 8005f0c:	bf48      	it	mi
 8005f0e:	b2ad      	uxthmi	r5, r5
 8005f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	bf14      	ite	ne
 8005f16:	230a      	movne	r3, #10
 8005f18:	2308      	moveq	r3, #8
 8005f1a:	4851      	ldr	r0, [pc, #324]	@ (8006060 <_printf_i+0x238>)
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f22:	6866      	ldr	r6, [r4, #4]
 8005f24:	2e00      	cmp	r6, #0
 8005f26:	bfa8      	it	ge
 8005f28:	6821      	ldrge	r1, [r4, #0]
 8005f2a:	60a6      	str	r6, [r4, #8]
 8005f2c:	bfa4      	itt	ge
 8005f2e:	f021 0104 	bicge.w	r1, r1, #4
 8005f32:	6021      	strge	r1, [r4, #0]
 8005f34:	b90d      	cbnz	r5, 8005f3a <_printf_i+0x112>
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	d04b      	beq.n	8005fd2 <_printf_i+0x1aa>
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f40:	fb03 5711 	mls	r7, r3, r1, r5
 8005f44:	5dc7      	ldrb	r7, [r0, r7]
 8005f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f4a:	462f      	mov	r7, r5
 8005f4c:	42bb      	cmp	r3, r7
 8005f4e:	460d      	mov	r5, r1
 8005f50:	d9f4      	bls.n	8005f3c <_printf_i+0x114>
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d10b      	bne.n	8005f6e <_printf_i+0x146>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	07df      	lsls	r7, r3, #31
 8005f5a:	d508      	bpl.n	8005f6e <_printf_i+0x146>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	6861      	ldr	r1, [r4, #4]
 8005f60:	4299      	cmp	r1, r3
 8005f62:	bfde      	ittt	le
 8005f64:	2330      	movle	r3, #48	@ 0x30
 8005f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f6a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f6e:	1b92      	subs	r2, r2, r6
 8005f70:	6122      	str	r2, [r4, #16]
 8005f72:	464b      	mov	r3, r9
 8005f74:	4621      	mov	r1, r4
 8005f76:	4640      	mov	r0, r8
 8005f78:	f8cd a000 	str.w	sl, [sp]
 8005f7c:	aa03      	add	r2, sp, #12
 8005f7e:	f7ff fee1 	bl	8005d44 <_printf_common>
 8005f82:	3001      	adds	r0, #1
 8005f84:	d14a      	bne.n	800601c <_printf_i+0x1f4>
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f8a:	b004      	add	sp, #16
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f043 0320 	orr.w	r3, r3, #32
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	2778      	movs	r7, #120	@ 0x78
 8005f9a:	4832      	ldr	r0, [pc, #200]	@ (8006064 <_printf_i+0x23c>)
 8005f9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	6831      	ldr	r1, [r6, #0]
 8005fa4:	061f      	lsls	r7, r3, #24
 8005fa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005faa:	d402      	bmi.n	8005fb2 <_printf_i+0x18a>
 8005fac:	065f      	lsls	r7, r3, #25
 8005fae:	bf48      	it	mi
 8005fb0:	b2ad      	uxthmi	r5, r5
 8005fb2:	6031      	str	r1, [r6, #0]
 8005fb4:	07d9      	lsls	r1, r3, #31
 8005fb6:	bf44      	itt	mi
 8005fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fbc:	6023      	strmi	r3, [r4, #0]
 8005fbe:	b11d      	cbz	r5, 8005fc8 <_printf_i+0x1a0>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	e7ab      	b.n	8005f1c <_printf_i+0xf4>
 8005fc4:	4826      	ldr	r0, [pc, #152]	@ (8006060 <_printf_i+0x238>)
 8005fc6:	e7e9      	b.n	8005f9c <_printf_i+0x174>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	f023 0320 	bic.w	r3, r3, #32
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	e7f6      	b.n	8005fc0 <_printf_i+0x198>
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	e7bd      	b.n	8005f52 <_printf_i+0x12a>
 8005fd6:	6833      	ldr	r3, [r6, #0]
 8005fd8:	6825      	ldr	r5, [r4, #0]
 8005fda:	1d18      	adds	r0, r3, #4
 8005fdc:	6961      	ldr	r1, [r4, #20]
 8005fde:	6030      	str	r0, [r6, #0]
 8005fe0:	062e      	lsls	r6, r5, #24
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	d501      	bpl.n	8005fea <_printf_i+0x1c2>
 8005fe6:	6019      	str	r1, [r3, #0]
 8005fe8:	e002      	b.n	8005ff0 <_printf_i+0x1c8>
 8005fea:	0668      	lsls	r0, r5, #25
 8005fec:	d5fb      	bpl.n	8005fe6 <_printf_i+0x1be>
 8005fee:	8019      	strh	r1, [r3, #0]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4616      	mov	r6, r2
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	e7bc      	b.n	8005f72 <_printf_i+0x14a>
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	6032      	str	r2, [r6, #0]
 8006000:	681e      	ldr	r6, [r3, #0]
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 fbe4 	bl	80067d2 <memchr>
 800600a:	b108      	cbz	r0, 8006010 <_printf_i+0x1e8>
 800600c:	1b80      	subs	r0, r0, r6
 800600e:	6060      	str	r0, [r4, #4]
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2300      	movs	r3, #0
 8006016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800601a:	e7aa      	b.n	8005f72 <_printf_i+0x14a>
 800601c:	4632      	mov	r2, r6
 800601e:	4649      	mov	r1, r9
 8006020:	4640      	mov	r0, r8
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	47d0      	blx	sl
 8006026:	3001      	adds	r0, #1
 8006028:	d0ad      	beq.n	8005f86 <_printf_i+0x15e>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	079b      	lsls	r3, r3, #30
 800602e:	d413      	bmi.n	8006058 <_printf_i+0x230>
 8006030:	68e0      	ldr	r0, [r4, #12]
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	4298      	cmp	r0, r3
 8006036:	bfb8      	it	lt
 8006038:	4618      	movlt	r0, r3
 800603a:	e7a6      	b.n	8005f8a <_printf_i+0x162>
 800603c:	2301      	movs	r3, #1
 800603e:	4632      	mov	r2, r6
 8006040:	4649      	mov	r1, r9
 8006042:	4640      	mov	r0, r8
 8006044:	47d0      	blx	sl
 8006046:	3001      	adds	r0, #1
 8006048:	d09d      	beq.n	8005f86 <_printf_i+0x15e>
 800604a:	3501      	adds	r5, #1
 800604c:	68e3      	ldr	r3, [r4, #12]
 800604e:	9903      	ldr	r1, [sp, #12]
 8006050:	1a5b      	subs	r3, r3, r1
 8006052:	42ab      	cmp	r3, r5
 8006054:	dcf2      	bgt.n	800603c <_printf_i+0x214>
 8006056:	e7eb      	b.n	8006030 <_printf_i+0x208>
 8006058:	2500      	movs	r5, #0
 800605a:	f104 0619 	add.w	r6, r4, #25
 800605e:	e7f5      	b.n	800604c <_printf_i+0x224>
 8006060:	0800a5a0 	.word	0x0800a5a0
 8006064:	0800a5b1 	.word	0x0800a5b1

08006068 <_scanf_float>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	b087      	sub	sp, #28
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	688b      	ldr	r3, [r1, #8]
 8006072:	4617      	mov	r7, r2
 8006074:	1e5a      	subs	r2, r3, #1
 8006076:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800607a:	bf82      	ittt	hi
 800607c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006080:	eb03 0b05 	addhi.w	fp, r3, r5
 8006084:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006088:	460a      	mov	r2, r1
 800608a:	f04f 0500 	mov.w	r5, #0
 800608e:	bf88      	it	hi
 8006090:	608b      	strhi	r3, [r1, #8]
 8006092:	680b      	ldr	r3, [r1, #0]
 8006094:	4680      	mov	r8, r0
 8006096:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800609a:	f842 3b1c 	str.w	r3, [r2], #28
 800609e:	460c      	mov	r4, r1
 80060a0:	bf98      	it	ls
 80060a2:	f04f 0b00 	movls.w	fp, #0
 80060a6:	4616      	mov	r6, r2
 80060a8:	46aa      	mov	sl, r5
 80060aa:	46a9      	mov	r9, r5
 80060ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060b0:	9201      	str	r2, [sp, #4]
 80060b2:	9502      	str	r5, [sp, #8]
 80060b4:	68a2      	ldr	r2, [r4, #8]
 80060b6:	b152      	cbz	r2, 80060ce <_scanf_float+0x66>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80060be:	d865      	bhi.n	800618c <_scanf_float+0x124>
 80060c0:	2b40      	cmp	r3, #64	@ 0x40
 80060c2:	d83d      	bhi.n	8006140 <_scanf_float+0xd8>
 80060c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80060c8:	b2c8      	uxtb	r0, r1
 80060ca:	280e      	cmp	r0, #14
 80060cc:	d93b      	bls.n	8006146 <_scanf_float+0xde>
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	d003      	beq.n	80060dc <_scanf_float+0x74>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80060e0:	f1ba 0f01 	cmp.w	sl, #1
 80060e4:	f200 8118 	bhi.w	8006318 <_scanf_float+0x2b0>
 80060e8:	9b01      	ldr	r3, [sp, #4]
 80060ea:	429e      	cmp	r6, r3
 80060ec:	f200 8109 	bhi.w	8006302 <_scanf_float+0x29a>
 80060f0:	2001      	movs	r0, #1
 80060f2:	b007      	add	sp, #28
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80060fc:	2a0d      	cmp	r2, #13
 80060fe:	d8e6      	bhi.n	80060ce <_scanf_float+0x66>
 8006100:	a101      	add	r1, pc, #4	@ (adr r1, 8006108 <_scanf_float+0xa0>)
 8006102:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800624f 	.word	0x0800624f
 800610c:	080060cf 	.word	0x080060cf
 8006110:	080060cf 	.word	0x080060cf
 8006114:	080060cf 	.word	0x080060cf
 8006118:	080062af 	.word	0x080062af
 800611c:	08006287 	.word	0x08006287
 8006120:	080060cf 	.word	0x080060cf
 8006124:	080060cf 	.word	0x080060cf
 8006128:	0800625d 	.word	0x0800625d
 800612c:	080060cf 	.word	0x080060cf
 8006130:	080060cf 	.word	0x080060cf
 8006134:	080060cf 	.word	0x080060cf
 8006138:	080060cf 	.word	0x080060cf
 800613c:	08006215 	.word	0x08006215
 8006140:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006144:	e7da      	b.n	80060fc <_scanf_float+0x94>
 8006146:	290e      	cmp	r1, #14
 8006148:	d8c1      	bhi.n	80060ce <_scanf_float+0x66>
 800614a:	a001      	add	r0, pc, #4	@ (adr r0, 8006150 <_scanf_float+0xe8>)
 800614c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006150:	08006205 	.word	0x08006205
 8006154:	080060cf 	.word	0x080060cf
 8006158:	08006205 	.word	0x08006205
 800615c:	0800629b 	.word	0x0800629b
 8006160:	080060cf 	.word	0x080060cf
 8006164:	080061ad 	.word	0x080061ad
 8006168:	080061eb 	.word	0x080061eb
 800616c:	080061eb 	.word	0x080061eb
 8006170:	080061eb 	.word	0x080061eb
 8006174:	080061eb 	.word	0x080061eb
 8006178:	080061eb 	.word	0x080061eb
 800617c:	080061eb 	.word	0x080061eb
 8006180:	080061eb 	.word	0x080061eb
 8006184:	080061eb 	.word	0x080061eb
 8006188:	080061eb 	.word	0x080061eb
 800618c:	2b6e      	cmp	r3, #110	@ 0x6e
 800618e:	d809      	bhi.n	80061a4 <_scanf_float+0x13c>
 8006190:	2b60      	cmp	r3, #96	@ 0x60
 8006192:	d8b1      	bhi.n	80060f8 <_scanf_float+0x90>
 8006194:	2b54      	cmp	r3, #84	@ 0x54
 8006196:	d07b      	beq.n	8006290 <_scanf_float+0x228>
 8006198:	2b59      	cmp	r3, #89	@ 0x59
 800619a:	d198      	bne.n	80060ce <_scanf_float+0x66>
 800619c:	2d07      	cmp	r5, #7
 800619e:	d196      	bne.n	80060ce <_scanf_float+0x66>
 80061a0:	2508      	movs	r5, #8
 80061a2:	e02c      	b.n	80061fe <_scanf_float+0x196>
 80061a4:	2b74      	cmp	r3, #116	@ 0x74
 80061a6:	d073      	beq.n	8006290 <_scanf_float+0x228>
 80061a8:	2b79      	cmp	r3, #121	@ 0x79
 80061aa:	e7f6      	b.n	800619a <_scanf_float+0x132>
 80061ac:	6821      	ldr	r1, [r4, #0]
 80061ae:	05c8      	lsls	r0, r1, #23
 80061b0:	d51b      	bpl.n	80061ea <_scanf_float+0x182>
 80061b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80061b6:	6021      	str	r1, [r4, #0]
 80061b8:	f109 0901 	add.w	r9, r9, #1
 80061bc:	f1bb 0f00 	cmp.w	fp, #0
 80061c0:	d003      	beq.n	80061ca <_scanf_float+0x162>
 80061c2:	3201      	adds	r2, #1
 80061c4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80061c8:	60a2      	str	r2, [r4, #8]
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	3301      	adds	r3, #1
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3b01      	subs	r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	f340 8087 	ble.w	80062f0 <_scanf_float+0x288>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	e764      	b.n	80060b4 <_scanf_float+0x4c>
 80061ea:	eb1a 0105 	adds.w	r1, sl, r5
 80061ee:	f47f af6e 	bne.w	80060ce <_scanf_float+0x66>
 80061f2:	460d      	mov	r5, r1
 80061f4:	468a      	mov	sl, r1
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	f806 3b01 	strb.w	r3, [r6], #1
 8006202:	e7e2      	b.n	80061ca <_scanf_float+0x162>
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	0610      	lsls	r0, r2, #24
 8006208:	f57f af61 	bpl.w	80060ce <_scanf_float+0x66>
 800620c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	e7f4      	b.n	80061fe <_scanf_float+0x196>
 8006214:	f1ba 0f00 	cmp.w	sl, #0
 8006218:	d10e      	bne.n	8006238 <_scanf_float+0x1d0>
 800621a:	f1b9 0f00 	cmp.w	r9, #0
 800621e:	d10e      	bne.n	800623e <_scanf_float+0x1d6>
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006226:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800622a:	d108      	bne.n	800623e <_scanf_float+0x1d6>
 800622c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006230:	f04f 0a01 	mov.w	sl, #1
 8006234:	6022      	str	r2, [r4, #0]
 8006236:	e7e2      	b.n	80061fe <_scanf_float+0x196>
 8006238:	f1ba 0f02 	cmp.w	sl, #2
 800623c:	d055      	beq.n	80062ea <_scanf_float+0x282>
 800623e:	2d01      	cmp	r5, #1
 8006240:	d002      	beq.n	8006248 <_scanf_float+0x1e0>
 8006242:	2d04      	cmp	r5, #4
 8006244:	f47f af43 	bne.w	80060ce <_scanf_float+0x66>
 8006248:	3501      	adds	r5, #1
 800624a:	b2ed      	uxtb	r5, r5
 800624c:	e7d7      	b.n	80061fe <_scanf_float+0x196>
 800624e:	f1ba 0f01 	cmp.w	sl, #1
 8006252:	f47f af3c 	bne.w	80060ce <_scanf_float+0x66>
 8006256:	f04f 0a02 	mov.w	sl, #2
 800625a:	e7d0      	b.n	80061fe <_scanf_float+0x196>
 800625c:	b97d      	cbnz	r5, 800627e <_scanf_float+0x216>
 800625e:	f1b9 0f00 	cmp.w	r9, #0
 8006262:	f47f af37 	bne.w	80060d4 <_scanf_float+0x6c>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800626c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006270:	f040 8103 	bne.w	800647a <_scanf_float+0x412>
 8006274:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006278:	2501      	movs	r5, #1
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	e7bf      	b.n	80061fe <_scanf_float+0x196>
 800627e:	2d03      	cmp	r5, #3
 8006280:	d0e2      	beq.n	8006248 <_scanf_float+0x1e0>
 8006282:	2d05      	cmp	r5, #5
 8006284:	e7de      	b.n	8006244 <_scanf_float+0x1dc>
 8006286:	2d02      	cmp	r5, #2
 8006288:	f47f af21 	bne.w	80060ce <_scanf_float+0x66>
 800628c:	2503      	movs	r5, #3
 800628e:	e7b6      	b.n	80061fe <_scanf_float+0x196>
 8006290:	2d06      	cmp	r5, #6
 8006292:	f47f af1c 	bne.w	80060ce <_scanf_float+0x66>
 8006296:	2507      	movs	r5, #7
 8006298:	e7b1      	b.n	80061fe <_scanf_float+0x196>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	0591      	lsls	r1, r2, #22
 800629e:	f57f af16 	bpl.w	80060ce <_scanf_float+0x66>
 80062a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80062ac:	e7a7      	b.n	80061fe <_scanf_float+0x196>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80062b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80062b8:	d006      	beq.n	80062c8 <_scanf_float+0x260>
 80062ba:	0550      	lsls	r0, r2, #21
 80062bc:	f57f af07 	bpl.w	80060ce <_scanf_float+0x66>
 80062c0:	f1b9 0f00 	cmp.w	r9, #0
 80062c4:	f000 80d9 	beq.w	800647a <_scanf_float+0x412>
 80062c8:	0591      	lsls	r1, r2, #22
 80062ca:	bf58      	it	pl
 80062cc:	9902      	ldrpl	r1, [sp, #8]
 80062ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062d2:	bf58      	it	pl
 80062d4:	eba9 0101 	subpl.w	r1, r9, r1
 80062d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80062dc:	f04f 0900 	mov.w	r9, #0
 80062e0:	bf58      	it	pl
 80062e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062e6:	6022      	str	r2, [r4, #0]
 80062e8:	e789      	b.n	80061fe <_scanf_float+0x196>
 80062ea:	f04f 0a03 	mov.w	sl, #3
 80062ee:	e786      	b.n	80061fe <_scanf_float+0x196>
 80062f0:	4639      	mov	r1, r7
 80062f2:	4640      	mov	r0, r8
 80062f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80062f8:	4798      	blx	r3
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f43f aeda 	beq.w	80060b4 <_scanf_float+0x4c>
 8006300:	e6e5      	b.n	80060ce <_scanf_float+0x66>
 8006302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006306:	463a      	mov	r2, r7
 8006308:	4640      	mov	r0, r8
 800630a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800630e:	4798      	blx	r3
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	3b01      	subs	r3, #1
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	e6e7      	b.n	80060e8 <_scanf_float+0x80>
 8006318:	1e6b      	subs	r3, r5, #1
 800631a:	2b06      	cmp	r3, #6
 800631c:	d824      	bhi.n	8006368 <_scanf_float+0x300>
 800631e:	2d02      	cmp	r5, #2
 8006320:	d836      	bhi.n	8006390 <_scanf_float+0x328>
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	429e      	cmp	r6, r3
 8006326:	f67f aee3 	bls.w	80060f0 <_scanf_float+0x88>
 800632a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800632e:	463a      	mov	r2, r7
 8006330:	4640      	mov	r0, r8
 8006332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006336:	4798      	blx	r3
 8006338:	6923      	ldr	r3, [r4, #16]
 800633a:	3b01      	subs	r3, #1
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	e7f0      	b.n	8006322 <_scanf_float+0x2ba>
 8006340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006344:	463a      	mov	r2, r7
 8006346:	4640      	mov	r0, r8
 8006348:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800634c:	4798      	blx	r3
 800634e:	6923      	ldr	r3, [r4, #16]
 8006350:	3b01      	subs	r3, #1
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006358:	fa5f fa8a 	uxtb.w	sl, sl
 800635c:	f1ba 0f02 	cmp.w	sl, #2
 8006360:	d1ee      	bne.n	8006340 <_scanf_float+0x2d8>
 8006362:	3d03      	subs	r5, #3
 8006364:	b2ed      	uxtb	r5, r5
 8006366:	1b76      	subs	r6, r6, r5
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	05da      	lsls	r2, r3, #23
 800636c:	d530      	bpl.n	80063d0 <_scanf_float+0x368>
 800636e:	055b      	lsls	r3, r3, #21
 8006370:	d511      	bpl.n	8006396 <_scanf_float+0x32e>
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	429e      	cmp	r6, r3
 8006376:	f67f aebb 	bls.w	80060f0 <_scanf_float+0x88>
 800637a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800637e:	463a      	mov	r2, r7
 8006380:	4640      	mov	r0, r8
 8006382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006386:	4798      	blx	r3
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	3b01      	subs	r3, #1
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	e7f0      	b.n	8006372 <_scanf_float+0x30a>
 8006390:	46aa      	mov	sl, r5
 8006392:	46b3      	mov	fp, r6
 8006394:	e7de      	b.n	8006354 <_scanf_float+0x2ec>
 8006396:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	2965      	cmp	r1, #101	@ 0x65
 800639e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80063a2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	d00c      	beq.n	80063c4 <_scanf_float+0x35c>
 80063aa:	2945      	cmp	r1, #69	@ 0x45
 80063ac:	d00a      	beq.n	80063c4 <_scanf_float+0x35c>
 80063ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063b2:	463a      	mov	r2, r7
 80063b4:	4640      	mov	r0, r8
 80063b6:	4798      	blx	r3
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063be:	3b01      	subs	r3, #1
 80063c0:	1eb5      	subs	r5, r6, #2
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	463a      	mov	r2, r7
 80063c6:	4640      	mov	r0, r8
 80063c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063cc:	4798      	blx	r3
 80063ce:	462e      	mov	r6, r5
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	f012 0210 	ands.w	r2, r2, #16
 80063d6:	d001      	beq.n	80063dc <_scanf_float+0x374>
 80063d8:	2000      	movs	r0, #0
 80063da:	e68a      	b.n	80060f2 <_scanf_float+0x8a>
 80063dc:	7032      	strb	r2, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e8:	d11c      	bne.n	8006424 <_scanf_float+0x3bc>
 80063ea:	9b02      	ldr	r3, [sp, #8]
 80063ec:	454b      	cmp	r3, r9
 80063ee:	eba3 0209 	sub.w	r2, r3, r9
 80063f2:	d123      	bne.n	800643c <_scanf_float+0x3d4>
 80063f4:	2200      	movs	r2, #0
 80063f6:	4640      	mov	r0, r8
 80063f8:	9901      	ldr	r1, [sp, #4]
 80063fa:	f002 fbed 	bl	8008bd8 <_strtod_r>
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	6825      	ldr	r5, [r4, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f015 0f02 	tst.w	r5, #2
 8006408:	4606      	mov	r6, r0
 800640a:	460f      	mov	r7, r1
 800640c:	f103 0204 	add.w	r2, r3, #4
 8006410:	d01f      	beq.n	8006452 <_scanf_float+0x3ea>
 8006412:	9903      	ldr	r1, [sp, #12]
 8006414:	600a      	str	r2, [r1, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	e9c3 6700 	strd	r6, r7, [r3]
 800641c:	68e3      	ldr	r3, [r4, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60e3      	str	r3, [r4, #12]
 8006422:	e7d9      	b.n	80063d8 <_scanf_float+0x370>
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0e4      	beq.n	80063f4 <_scanf_float+0x38c>
 800642a:	9905      	ldr	r1, [sp, #20]
 800642c:	230a      	movs	r3, #10
 800642e:	4640      	mov	r0, r8
 8006430:	3101      	adds	r1, #1
 8006432:	f002 fc51 	bl	8008cd8 <_strtol_r>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	9e05      	ldr	r6, [sp, #20]
 800643a:	1ac2      	subs	r2, r0, r3
 800643c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006440:	429e      	cmp	r6, r3
 8006442:	bf28      	it	cs
 8006444:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006448:	4630      	mov	r0, r6
 800644a:	490d      	ldr	r1, [pc, #52]	@ (8006480 <_scanf_float+0x418>)
 800644c:	f000 f8de 	bl	800660c <siprintf>
 8006450:	e7d0      	b.n	80063f4 <_scanf_float+0x38c>
 8006452:	076d      	lsls	r5, r5, #29
 8006454:	d4dd      	bmi.n	8006412 <_scanf_float+0x3aa>
 8006456:	9d03      	ldr	r5, [sp, #12]
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	681d      	ldr	r5, [r3, #0]
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	f7fa fad4 	bl	8000a0c <__aeabi_dcmpun>
 8006464:	b120      	cbz	r0, 8006470 <_scanf_float+0x408>
 8006466:	4807      	ldr	r0, [pc, #28]	@ (8006484 <_scanf_float+0x41c>)
 8006468:	f000 f9c2 	bl	80067f0 <nanf>
 800646c:	6028      	str	r0, [r5, #0]
 800646e:	e7d5      	b.n	800641c <_scanf_float+0x3b4>
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7fa fb28 	bl	8000ac8 <__aeabi_d2f>
 8006478:	e7f8      	b.n	800646c <_scanf_float+0x404>
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	e62d      	b.n	80060dc <_scanf_float+0x74>
 8006480:	0800a5c2 	.word	0x0800a5c2
 8006484:	0800a95d 	.word	0x0800a95d

08006488 <std>:
 8006488:	2300      	movs	r3, #0
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	e9c0 3300 	strd	r3, r3, [r0]
 8006492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006496:	6083      	str	r3, [r0, #8]
 8006498:	8181      	strh	r1, [r0, #12]
 800649a:	6643      	str	r3, [r0, #100]	@ 0x64
 800649c:	81c2      	strh	r2, [r0, #14]
 800649e:	6183      	str	r3, [r0, #24]
 80064a0:	4619      	mov	r1, r3
 80064a2:	2208      	movs	r2, #8
 80064a4:	305c      	adds	r0, #92	@ 0x5c
 80064a6:	f000 f914 	bl	80066d2 <memset>
 80064aa:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <std+0x58>)
 80064ac:	6224      	str	r4, [r4, #32]
 80064ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <std+0x5c>)
 80064b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064b4:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <std+0x60>)
 80064b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064b8:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <std+0x64>)
 80064ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <std+0x68>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	d006      	beq.n	80064d0 <std+0x48>
 80064c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064c6:	4294      	cmp	r4, r2
 80064c8:	d002      	beq.n	80064d0 <std+0x48>
 80064ca:	33d0      	adds	r3, #208	@ 0xd0
 80064cc:	429c      	cmp	r4, r3
 80064ce:	d105      	bne.n	80064dc <std+0x54>
 80064d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d8:	f000 b978 	b.w	80067cc <__retarget_lock_init_recursive>
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	bf00      	nop
 80064e0:	0800664d 	.word	0x0800664d
 80064e4:	0800666f 	.word	0x0800666f
 80064e8:	080066a7 	.word	0x080066a7
 80064ec:	080066cb 	.word	0x080066cb
 80064f0:	200004bc 	.word	0x200004bc

080064f4 <stdio_exit_handler>:
 80064f4:	4a02      	ldr	r2, [pc, #8]	@ (8006500 <stdio_exit_handler+0xc>)
 80064f6:	4903      	ldr	r1, [pc, #12]	@ (8006504 <stdio_exit_handler+0x10>)
 80064f8:	4803      	ldr	r0, [pc, #12]	@ (8006508 <stdio_exit_handler+0x14>)
 80064fa:	f000 b869 	b.w	80065d0 <_fwalk_sglue>
 80064fe:	bf00      	nop
 8006500:	2000009c 	.word	0x2000009c
 8006504:	0800908d 	.word	0x0800908d
 8006508:	200000ac 	.word	0x200000ac

0800650c <cleanup_stdio>:
 800650c:	6841      	ldr	r1, [r0, #4]
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <cleanup_stdio+0x34>)
 8006510:	b510      	push	{r4, lr}
 8006512:	4299      	cmp	r1, r3
 8006514:	4604      	mov	r4, r0
 8006516:	d001      	beq.n	800651c <cleanup_stdio+0x10>
 8006518:	f002 fdb8 	bl	800908c <_fflush_r>
 800651c:	68a1      	ldr	r1, [r4, #8]
 800651e:	4b09      	ldr	r3, [pc, #36]	@ (8006544 <cleanup_stdio+0x38>)
 8006520:	4299      	cmp	r1, r3
 8006522:	d002      	beq.n	800652a <cleanup_stdio+0x1e>
 8006524:	4620      	mov	r0, r4
 8006526:	f002 fdb1 	bl	800908c <_fflush_r>
 800652a:	68e1      	ldr	r1, [r4, #12]
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <cleanup_stdio+0x3c>)
 800652e:	4299      	cmp	r1, r3
 8006530:	d004      	beq.n	800653c <cleanup_stdio+0x30>
 8006532:	4620      	mov	r0, r4
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f002 bda8 	b.w	800908c <_fflush_r>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	bf00      	nop
 8006540:	200004bc 	.word	0x200004bc
 8006544:	20000524 	.word	0x20000524
 8006548:	2000058c 	.word	0x2000058c

0800654c <global_stdio_init.part.0>:
 800654c:	b510      	push	{r4, lr}
 800654e:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <global_stdio_init.part.0+0x30>)
 8006550:	4c0b      	ldr	r4, [pc, #44]	@ (8006580 <global_stdio_init.part.0+0x34>)
 8006552:	4a0c      	ldr	r2, [pc, #48]	@ (8006584 <global_stdio_init.part.0+0x38>)
 8006554:	4620      	mov	r0, r4
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	2104      	movs	r1, #4
 800655a:	2200      	movs	r2, #0
 800655c:	f7ff ff94 	bl	8006488 <std>
 8006560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006564:	2201      	movs	r2, #1
 8006566:	2109      	movs	r1, #9
 8006568:	f7ff ff8e 	bl	8006488 <std>
 800656c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006570:	2202      	movs	r2, #2
 8006572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006576:	2112      	movs	r1, #18
 8006578:	f7ff bf86 	b.w	8006488 <std>
 800657c:	200005f4 	.word	0x200005f4
 8006580:	200004bc 	.word	0x200004bc
 8006584:	080064f5 	.word	0x080064f5

08006588 <__sfp_lock_acquire>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__sfp_lock_acquire+0x8>)
 800658a:	f000 b920 	b.w	80067ce <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	200005fd 	.word	0x200005fd

08006594 <__sfp_lock_release>:
 8006594:	4801      	ldr	r0, [pc, #4]	@ (800659c <__sfp_lock_release+0x8>)
 8006596:	f000 b91b 	b.w	80067d0 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	200005fd 	.word	0x200005fd

080065a0 <__sinit>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	f7ff fff0 	bl	8006588 <__sfp_lock_acquire>
 80065a8:	6a23      	ldr	r3, [r4, #32]
 80065aa:	b11b      	cbz	r3, 80065b4 <__sinit+0x14>
 80065ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b0:	f7ff bff0 	b.w	8006594 <__sfp_lock_release>
 80065b4:	4b04      	ldr	r3, [pc, #16]	@ (80065c8 <__sinit+0x28>)
 80065b6:	6223      	str	r3, [r4, #32]
 80065b8:	4b04      	ldr	r3, [pc, #16]	@ (80065cc <__sinit+0x2c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f5      	bne.n	80065ac <__sinit+0xc>
 80065c0:	f7ff ffc4 	bl	800654c <global_stdio_init.part.0>
 80065c4:	e7f2      	b.n	80065ac <__sinit+0xc>
 80065c6:	bf00      	nop
 80065c8:	0800650d 	.word	0x0800650d
 80065cc:	200005f4 	.word	0x200005f4

080065d0 <_fwalk_sglue>:
 80065d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d4:	4607      	mov	r7, r0
 80065d6:	4688      	mov	r8, r1
 80065d8:	4614      	mov	r4, r2
 80065da:	2600      	movs	r6, #0
 80065dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065e0:	f1b9 0901 	subs.w	r9, r9, #1
 80065e4:	d505      	bpl.n	80065f2 <_fwalk_sglue+0x22>
 80065e6:	6824      	ldr	r4, [r4, #0]
 80065e8:	2c00      	cmp	r4, #0
 80065ea:	d1f7      	bne.n	80065dc <_fwalk_sglue+0xc>
 80065ec:	4630      	mov	r0, r6
 80065ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d907      	bls.n	8006608 <_fwalk_sglue+0x38>
 80065f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065fc:	3301      	adds	r3, #1
 80065fe:	d003      	beq.n	8006608 <_fwalk_sglue+0x38>
 8006600:	4629      	mov	r1, r5
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	4306      	orrs	r6, r0
 8006608:	3568      	adds	r5, #104	@ 0x68
 800660a:	e7e9      	b.n	80065e0 <_fwalk_sglue+0x10>

0800660c <siprintf>:
 800660c:	b40e      	push	{r1, r2, r3}
 800660e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006612:	b500      	push	{lr}
 8006614:	b09c      	sub	sp, #112	@ 0x70
 8006616:	ab1d      	add	r3, sp, #116	@ 0x74
 8006618:	9002      	str	r0, [sp, #8]
 800661a:	9006      	str	r0, [sp, #24]
 800661c:	9107      	str	r1, [sp, #28]
 800661e:	9104      	str	r1, [sp, #16]
 8006620:	4808      	ldr	r0, [pc, #32]	@ (8006644 <siprintf+0x38>)
 8006622:	4909      	ldr	r1, [pc, #36]	@ (8006648 <siprintf+0x3c>)
 8006624:	f853 2b04 	ldr.w	r2, [r3], #4
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	a902      	add	r1, sp, #8
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	f002 fbb0 	bl	8008d94 <_svfiprintf_r>
 8006634:	2200      	movs	r2, #0
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	b01c      	add	sp, #112	@ 0x70
 800663c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006640:	b003      	add	sp, #12
 8006642:	4770      	bx	lr
 8006644:	200000a8 	.word	0x200000a8
 8006648:	ffff0208 	.word	0xffff0208

0800664c <__sread>:
 800664c:	b510      	push	{r4, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	f000 f86c 	bl	8006730 <_read_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	bfab      	itete	ge
 800665c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800665e:	89a3      	ldrhlt	r3, [r4, #12]
 8006660:	181b      	addge	r3, r3, r0
 8006662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006666:	bfac      	ite	ge
 8006668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800666a:	81a3      	strhlt	r3, [r4, #12]
 800666c:	bd10      	pop	{r4, pc}

0800666e <__swrite>:
 800666e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006672:	461f      	mov	r7, r3
 8006674:	898b      	ldrh	r3, [r1, #12]
 8006676:	4605      	mov	r5, r0
 8006678:	05db      	lsls	r3, r3, #23
 800667a:	460c      	mov	r4, r1
 800667c:	4616      	mov	r6, r2
 800667e:	d505      	bpl.n	800668c <__swrite+0x1e>
 8006680:	2302      	movs	r3, #2
 8006682:	2200      	movs	r2, #0
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	f000 f840 	bl	800670c <_lseek_r>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	4632      	mov	r2, r6
 8006690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	4628      	mov	r0, r5
 8006698:	463b      	mov	r3, r7
 800669a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a2:	f000 b857 	b.w	8006754 <_write_r>

080066a6 <__sseek>:
 80066a6:	b510      	push	{r4, lr}
 80066a8:	460c      	mov	r4, r1
 80066aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ae:	f000 f82d 	bl	800670c <_lseek_r>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	bf15      	itete	ne
 80066b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066c2:	81a3      	strheq	r3, [r4, #12]
 80066c4:	bf18      	it	ne
 80066c6:	81a3      	strhne	r3, [r4, #12]
 80066c8:	bd10      	pop	{r4, pc}

080066ca <__sclose>:
 80066ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ce:	f000 b80d 	b.w	80066ec <_close_r>

080066d2 <memset>:
 80066d2:	4603      	mov	r3, r0
 80066d4:	4402      	add	r2, r0
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d100      	bne.n	80066dc <memset+0xa>
 80066da:	4770      	bx	lr
 80066dc:	f803 1b01 	strb.w	r1, [r3], #1
 80066e0:	e7f9      	b.n	80066d6 <memset+0x4>
	...

080066e4 <_localeconv_r>:
 80066e4:	4800      	ldr	r0, [pc, #0]	@ (80066e8 <_localeconv_r+0x4>)
 80066e6:	4770      	bx	lr
 80066e8:	200001e8 	.word	0x200001e8

080066ec <_close_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	2300      	movs	r3, #0
 80066f0:	4d05      	ldr	r5, [pc, #20]	@ (8006708 <_close_r+0x1c>)
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fb fd15 	bl	8002126 <_close>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_close_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_close_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	200005f8 	.word	0x200005f8

0800670c <_lseek_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	2200      	movs	r2, #0
 8006716:	4d05      	ldr	r5, [pc, #20]	@ (800672c <_lseek_r+0x20>)
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f7fb fd27 	bl	800216e <_lseek>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_lseek_r+0x1e>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_lseek_r+0x1e>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	200005f8 	.word	0x200005f8

08006730 <_read_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	2200      	movs	r2, #0
 800673a:	4d05      	ldr	r5, [pc, #20]	@ (8006750 <_read_r+0x20>)
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fb fcb8 	bl	80020b4 <_read>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_read_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_read_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200005f8 	.word	0x200005f8

08006754 <_write_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	2200      	movs	r2, #0
 800675e:	4d05      	ldr	r5, [pc, #20]	@ (8006774 <_write_r+0x20>)
 8006760:	602a      	str	r2, [r5, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	f7fb fcc3 	bl	80020ee <_write>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_write_r+0x1e>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_write_r+0x1e>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	200005f8 	.word	0x200005f8

08006778 <__errno>:
 8006778:	4b01      	ldr	r3, [pc, #4]	@ (8006780 <__errno+0x8>)
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	200000a8 	.word	0x200000a8

08006784 <__libc_init_array>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	2600      	movs	r6, #0
 8006788:	4d0c      	ldr	r5, [pc, #48]	@ (80067bc <__libc_init_array+0x38>)
 800678a:	4c0d      	ldr	r4, [pc, #52]	@ (80067c0 <__libc_init_array+0x3c>)
 800678c:	1b64      	subs	r4, r4, r5
 800678e:	10a4      	asrs	r4, r4, #2
 8006790:	42a6      	cmp	r6, r4
 8006792:	d109      	bne.n	80067a8 <__libc_init_array+0x24>
 8006794:	f003 feca 	bl	800a52c <_init>
 8006798:	2600      	movs	r6, #0
 800679a:	4d0a      	ldr	r5, [pc, #40]	@ (80067c4 <__libc_init_array+0x40>)
 800679c:	4c0a      	ldr	r4, [pc, #40]	@ (80067c8 <__libc_init_array+0x44>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	42a6      	cmp	r6, r4
 80067a4:	d105      	bne.n	80067b2 <__libc_init_array+0x2e>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ac:	4798      	blx	r3
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7ee      	b.n	8006790 <__libc_init_array+0xc>
 80067b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b6:	4798      	blx	r3
 80067b8:	3601      	adds	r6, #1
 80067ba:	e7f2      	b.n	80067a2 <__libc_init_array+0x1e>
 80067bc:	0800aa38 	.word	0x0800aa38
 80067c0:	0800aa38 	.word	0x0800aa38
 80067c4:	0800aa38 	.word	0x0800aa38
 80067c8:	0800aa3c 	.word	0x0800aa3c

080067cc <__retarget_lock_init_recursive>:
 80067cc:	4770      	bx	lr

080067ce <__retarget_lock_acquire_recursive>:
 80067ce:	4770      	bx	lr

080067d0 <__retarget_lock_release_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <memchr>:
 80067d2:	4603      	mov	r3, r0
 80067d4:	b510      	push	{r4, lr}
 80067d6:	b2c9      	uxtb	r1, r1
 80067d8:	4402      	add	r2, r0
 80067da:	4293      	cmp	r3, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	d101      	bne.n	80067e4 <memchr+0x12>
 80067e0:	2000      	movs	r0, #0
 80067e2:	e003      	b.n	80067ec <memchr+0x1a>
 80067e4:	7804      	ldrb	r4, [r0, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	428c      	cmp	r4, r1
 80067ea:	d1f6      	bne.n	80067da <memchr+0x8>
 80067ec:	bd10      	pop	{r4, pc}
	...

080067f0 <nanf>:
 80067f0:	4800      	ldr	r0, [pc, #0]	@ (80067f4 <nanf+0x4>)
 80067f2:	4770      	bx	lr
 80067f4:	7fc00000 	.word	0x7fc00000

080067f8 <quorem>:
 80067f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	6903      	ldr	r3, [r0, #16]
 80067fe:	690c      	ldr	r4, [r1, #16]
 8006800:	4607      	mov	r7, r0
 8006802:	42a3      	cmp	r3, r4
 8006804:	db7e      	blt.n	8006904 <quorem+0x10c>
 8006806:	3c01      	subs	r4, #1
 8006808:	00a3      	lsls	r3, r4, #2
 800680a:	f100 0514 	add.w	r5, r0, #20
 800680e:	f101 0814 	add.w	r8, r1, #20
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800681e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006822:	3301      	adds	r3, #1
 8006824:	429a      	cmp	r2, r3
 8006826:	fbb2 f6f3 	udiv	r6, r2, r3
 800682a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800682e:	d32e      	bcc.n	800688e <quorem+0x96>
 8006830:	f04f 0a00 	mov.w	sl, #0
 8006834:	46c4      	mov	ip, r8
 8006836:	46ae      	mov	lr, r5
 8006838:	46d3      	mov	fp, sl
 800683a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800683e:	b298      	uxth	r0, r3
 8006840:	fb06 a000 	mla	r0, r6, r0, sl
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	0c02      	lsrs	r2, r0, #16
 8006848:	fb06 2303 	mla	r3, r6, r3, r2
 800684c:	f8de 2000 	ldr.w	r2, [lr]
 8006850:	b280      	uxth	r0, r0
 8006852:	b292      	uxth	r2, r2
 8006854:	1a12      	subs	r2, r2, r0
 8006856:	445a      	add	r2, fp
 8006858:	f8de 0000 	ldr.w	r0, [lr]
 800685c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006860:	b29b      	uxth	r3, r3
 8006862:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006866:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800686a:	b292      	uxth	r2, r2
 800686c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006870:	45e1      	cmp	r9, ip
 8006872:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006876:	f84e 2b04 	str.w	r2, [lr], #4
 800687a:	d2de      	bcs.n	800683a <quorem+0x42>
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	58eb      	ldr	r3, [r5, r3]
 8006880:	b92b      	cbnz	r3, 800688e <quorem+0x96>
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	3b04      	subs	r3, #4
 8006886:	429d      	cmp	r5, r3
 8006888:	461a      	mov	r2, r3
 800688a:	d32f      	bcc.n	80068ec <quorem+0xf4>
 800688c:	613c      	str	r4, [r7, #16]
 800688e:	4638      	mov	r0, r7
 8006890:	f001 f9c2 	bl	8007c18 <__mcmp>
 8006894:	2800      	cmp	r0, #0
 8006896:	db25      	blt.n	80068e4 <quorem+0xec>
 8006898:	4629      	mov	r1, r5
 800689a:	2000      	movs	r0, #0
 800689c:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a0:	f8d1 c000 	ldr.w	ip, [r1]
 80068a4:	fa1f fe82 	uxth.w	lr, r2
 80068a8:	fa1f f38c 	uxth.w	r3, ip
 80068ac:	eba3 030e 	sub.w	r3, r3, lr
 80068b0:	4403      	add	r3, r0
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068bc:	b29b      	uxth	r3, r3
 80068be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c2:	45c1      	cmp	r9, r8
 80068c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068c8:	f841 3b04 	str.w	r3, [r1], #4
 80068cc:	d2e6      	bcs.n	800689c <quorem+0xa4>
 80068ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068d6:	b922      	cbnz	r2, 80068e2 <quorem+0xea>
 80068d8:	3b04      	subs	r3, #4
 80068da:	429d      	cmp	r5, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	d30b      	bcc.n	80068f8 <quorem+0x100>
 80068e0:	613c      	str	r4, [r7, #16]
 80068e2:	3601      	adds	r6, #1
 80068e4:	4630      	mov	r0, r6
 80068e6:	b003      	add	sp, #12
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	3b04      	subs	r3, #4
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	d1cb      	bne.n	800688c <quorem+0x94>
 80068f4:	3c01      	subs	r4, #1
 80068f6:	e7c6      	b.n	8006886 <quorem+0x8e>
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	3b04      	subs	r3, #4
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	d1ef      	bne.n	80068e0 <quorem+0xe8>
 8006900:	3c01      	subs	r4, #1
 8006902:	e7ea      	b.n	80068da <quorem+0xe2>
 8006904:	2000      	movs	r0, #0
 8006906:	e7ee      	b.n	80068e6 <quorem+0xee>

08006908 <_dtoa_r>:
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	4614      	mov	r4, r2
 800690e:	461d      	mov	r5, r3
 8006910:	69c7      	ldr	r7, [r0, #28]
 8006912:	b097      	sub	sp, #92	@ 0x5c
 8006914:	4683      	mov	fp, r0
 8006916:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800691a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800691c:	b97f      	cbnz	r7, 800693e <_dtoa_r+0x36>
 800691e:	2010      	movs	r0, #16
 8006920:	f000 fe02 	bl	8007528 <malloc>
 8006924:	4602      	mov	r2, r0
 8006926:	f8cb 001c 	str.w	r0, [fp, #28]
 800692a:	b920      	cbnz	r0, 8006936 <_dtoa_r+0x2e>
 800692c:	21ef      	movs	r1, #239	@ 0xef
 800692e:	4ba8      	ldr	r3, [pc, #672]	@ (8006bd0 <_dtoa_r+0x2c8>)
 8006930:	48a8      	ldr	r0, [pc, #672]	@ (8006bd4 <_dtoa_r+0x2cc>)
 8006932:	f002 fc23 	bl	800917c <__assert_func>
 8006936:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800693a:	6007      	str	r7, [r0, #0]
 800693c:	60c7      	str	r7, [r0, #12]
 800693e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	b159      	cbz	r1, 800695e <_dtoa_r+0x56>
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	2301      	movs	r3, #1
 800694a:	4093      	lsls	r3, r2
 800694c:	604a      	str	r2, [r1, #4]
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	4658      	mov	r0, fp
 8006952:	f000 fedf 	bl	8007714 <_Bfree>
 8006956:	2200      	movs	r2, #0
 8006958:	f8db 301c 	ldr.w	r3, [fp, #28]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	1e2b      	subs	r3, r5, #0
 8006960:	bfaf      	iteee	ge
 8006962:	2300      	movge	r3, #0
 8006964:	2201      	movlt	r2, #1
 8006966:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800696a:	9303      	strlt	r3, [sp, #12]
 800696c:	bfa8      	it	ge
 800696e:	6033      	strge	r3, [r6, #0]
 8006970:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006974:	4b98      	ldr	r3, [pc, #608]	@ (8006bd8 <_dtoa_r+0x2d0>)
 8006976:	bfb8      	it	lt
 8006978:	6032      	strlt	r2, [r6, #0]
 800697a:	ea33 0308 	bics.w	r3, r3, r8
 800697e:	d112      	bne.n	80069a6 <_dtoa_r+0x9e>
 8006980:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006984:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800698c:	4323      	orrs	r3, r4
 800698e:	f000 8550 	beq.w	8007432 <_dtoa_r+0xb2a>
 8006992:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006994:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006bdc <_dtoa_r+0x2d4>
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8552 	beq.w	8007442 <_dtoa_r+0xb3a>
 800699e:	f10a 0303 	add.w	r3, sl, #3
 80069a2:	f000 bd4c 	b.w	800743e <_dtoa_r+0xb36>
 80069a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	f7f9 fff7 	bl	80009a8 <__aeabi_dcmpeq>
 80069ba:	4607      	mov	r7, r0
 80069bc:	b158      	cbz	r0, 80069d6 <_dtoa_r+0xce>
 80069be:	2301      	movs	r3, #1
 80069c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069c6:	b113      	cbz	r3, 80069ce <_dtoa_r+0xc6>
 80069c8:	4b85      	ldr	r3, [pc, #532]	@ (8006be0 <_dtoa_r+0x2d8>)
 80069ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006be4 <_dtoa_r+0x2dc>
 80069d2:	f000 bd36 	b.w	8007442 <_dtoa_r+0xb3a>
 80069d6:	ab14      	add	r3, sp, #80	@ 0x50
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	ab15      	add	r3, sp, #84	@ 0x54
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4658      	mov	r0, fp
 80069e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069e4:	f001 fa30 	bl	8007e48 <__d2b>
 80069e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069ec:	4681      	mov	r9, r0
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d077      	beq.n	8006ae2 <_dtoa_r+0x1da>
 80069f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a08:	9712      	str	r7, [sp, #72]	@ 0x48
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4b76      	ldr	r3, [pc, #472]	@ (8006be8 <_dtoa_r+0x2e0>)
 8006a10:	f7f9 fbaa 	bl	8000168 <__aeabi_dsub>
 8006a14:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb8 <_dtoa_r+0x2b0>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f7f9 fd5d 	bl	80004d8 <__aeabi_dmul>
 8006a1e:	a368      	add	r3, pc, #416	@ (adr r3, 8006bc0 <_dtoa_r+0x2b8>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fba2 	bl	800016c <__adddf3>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	f7f9 fce9 	bl	8000404 <__aeabi_i2d>
 8006a32:	a365      	add	r3, pc, #404	@ (adr r3, 8006bc8 <_dtoa_r+0x2c0>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fd4e 	bl	80004d8 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fb92 	bl	800016c <__adddf3>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	f7f9 fff4 	bl	8000a38 <__aeabi_d2iz>
 8006a50:	2200      	movs	r2, #0
 8006a52:	4607      	mov	r7, r0
 8006a54:	2300      	movs	r3, #0
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7f9 ffaf 	bl	80009bc <__aeabi_dcmplt>
 8006a5e:	b140      	cbz	r0, 8006a72 <_dtoa_r+0x16a>
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7f9 fccf 	bl	8000404 <__aeabi_i2d>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 8006a6e:	b900      	cbnz	r0, 8006a72 <_dtoa_r+0x16a>
 8006a70:	3f01      	subs	r7, #1
 8006a72:	2f16      	cmp	r7, #22
 8006a74:	d853      	bhi.n	8006b1e <_dtoa_r+0x216>
 8006a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8006bec <_dtoa_r+0x2e4>)
 8006a7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 ff9a 	bl	80009bc <__aeabi_dcmplt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d04a      	beq.n	8006b22 <_dtoa_r+0x21a>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	3f01      	subs	r7, #1
 8006a90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	1e5a      	subs	r2, r3, #1
 8006a98:	bf46      	itte	mi
 8006a9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a9e:	2300      	movmi	r3, #0
 8006aa0:	f04f 0800 	movpl.w	r8, #0
 8006aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa6:	bf48      	it	mi
 8006aa8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	db3b      	blt.n	8006b26 <_dtoa_r+0x21e>
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	970e      	str	r7, [sp, #56]	@ 0x38
 8006ab2:	443b      	add	r3, r7
 8006ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d866      	bhi.n	8006b8e <_dtoa_r+0x286>
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	bfc4      	itt	gt
 8006ac4:	3b04      	subgt	r3, #4
 8006ac6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ac8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aca:	bfc8      	it	gt
 8006acc:	2400      	movgt	r4, #0
 8006ace:	f1a3 0302 	sub.w	r3, r3, #2
 8006ad2:	bfd8      	it	le
 8006ad4:	2401      	movle	r4, #1
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d864      	bhi.n	8006ba4 <_dtoa_r+0x29c>
 8006ada:	e8df f003 	tbb	[pc, r3]
 8006ade:	382b      	.short	0x382b
 8006ae0:	5636      	.short	0x5636
 8006ae2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ae6:	441e      	add	r6, r3
 8006ae8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	bfc1      	itttt	gt
 8006af0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006af4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006af8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006afc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b00:	bfd6      	itet	le
 8006b02:	f1c3 0320 	rsble	r3, r3, #32
 8006b06:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b0a:	fa04 f003 	lslle.w	r0, r4, r3
 8006b0e:	f7f9 fc69 	bl	80003e4 <__aeabi_ui2d>
 8006b12:	2201      	movs	r2, #1
 8006b14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b18:	3e01      	subs	r6, #1
 8006b1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b1c:	e775      	b.n	8006a0a <_dtoa_r+0x102>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e7b6      	b.n	8006a90 <_dtoa_r+0x188>
 8006b22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b24:	e7b5      	b.n	8006a92 <_dtoa_r+0x18a>
 8006b26:	427b      	negs	r3, r7
 8006b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	eba8 0807 	sub.w	r8, r8, r7
 8006b30:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b32:	e7c2      	b.n	8006aba <_dtoa_r+0x1b2>
 8006b34:	2300      	movs	r3, #0
 8006b36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	dc35      	bgt.n	8006baa <_dtoa_r+0x2a2>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	461a      	mov	r2, r3
 8006b42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b46:	9221      	str	r2, [sp, #132]	@ 0x84
 8006b48:	e00b      	b.n	8006b62 <_dtoa_r+0x25a>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e7f3      	b.n	8006b36 <_dtoa_r+0x22e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	9308      	str	r3, [sp, #32]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	bfb8      	it	lt
 8006b60:	2301      	movlt	r3, #1
 8006b62:	2100      	movs	r1, #0
 8006b64:	2204      	movs	r2, #4
 8006b66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b6a:	f102 0514 	add.w	r5, r2, #20
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	d91f      	bls.n	8006bb2 <_dtoa_r+0x2aa>
 8006b72:	6041      	str	r1, [r0, #4]
 8006b74:	4658      	mov	r0, fp
 8006b76:	f000 fd8d 	bl	8007694 <_Balloc>
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d139      	bne.n	8006bf4 <_dtoa_r+0x2ec>
 8006b80:	4602      	mov	r2, r0
 8006b82:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b86:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf0 <_dtoa_r+0x2e8>)
 8006b88:	e6d2      	b.n	8006930 <_dtoa_r+0x28>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e7e0      	b.n	8006b50 <_dtoa_r+0x248>
 8006b8e:	2401      	movs	r4, #1
 8006b90:	2300      	movs	r3, #0
 8006b92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b94:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ba0:	2312      	movs	r3, #18
 8006ba2:	e7d0      	b.n	8006b46 <_dtoa_r+0x23e>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba8:	e7f5      	b.n	8006b96 <_dtoa_r+0x28e>
 8006baa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006bb0:	e7d7      	b.n	8006b62 <_dtoa_r+0x25a>
 8006bb2:	3101      	adds	r1, #1
 8006bb4:	0052      	lsls	r2, r2, #1
 8006bb6:	e7d8      	b.n	8006b6a <_dtoa_r+0x262>
 8006bb8:	636f4361 	.word	0x636f4361
 8006bbc:	3fd287a7 	.word	0x3fd287a7
 8006bc0:	8b60c8b3 	.word	0x8b60c8b3
 8006bc4:	3fc68a28 	.word	0x3fc68a28
 8006bc8:	509f79fb 	.word	0x509f79fb
 8006bcc:	3fd34413 	.word	0x3fd34413
 8006bd0:	0800a5d4 	.word	0x0800a5d4
 8006bd4:	0800a5eb 	.word	0x0800a5eb
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	0800a5d0 	.word	0x0800a5d0
 8006be0:	0800a59f 	.word	0x0800a59f
 8006be4:	0800a59e 	.word	0x0800a59e
 8006be8:	3ff80000 	.word	0x3ff80000
 8006bec:	0800a6e8 	.word	0x0800a6e8
 8006bf0:	0800a643 	.word	0x0800a643
 8006bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	9b07      	ldr	r3, [sp, #28]
 8006bfc:	2b0e      	cmp	r3, #14
 8006bfe:	f200 80a4 	bhi.w	8006d4a <_dtoa_r+0x442>
 8006c02:	2c00      	cmp	r4, #0
 8006c04:	f000 80a1 	beq.w	8006d4a <_dtoa_r+0x442>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	dd33      	ble.n	8006c74 <_dtoa_r+0x36c>
 8006c0c:	4b86      	ldr	r3, [pc, #536]	@ (8006e28 <_dtoa_r+0x520>)
 8006c0e:	f007 020f 	and.w	r2, r7, #15
 8006c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c16:	05f8      	lsls	r0, r7, #23
 8006c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c24:	d516      	bpl.n	8006c54 <_dtoa_r+0x34c>
 8006c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c2a:	4b80      	ldr	r3, [pc, #512]	@ (8006e2c <_dtoa_r+0x524>)
 8006c2c:	2603      	movs	r6, #3
 8006c2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c32:	f7f9 fd7b 	bl	800072c <__aeabi_ddiv>
 8006c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c3a:	f004 040f 	and.w	r4, r4, #15
 8006c3e:	4d7b      	ldr	r5, [pc, #492]	@ (8006e2c <_dtoa_r+0x524>)
 8006c40:	b954      	cbnz	r4, 8006c58 <_dtoa_r+0x350>
 8006c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c4a:	f7f9 fd6f 	bl	800072c <__aeabi_ddiv>
 8006c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c52:	e028      	b.n	8006ca6 <_dtoa_r+0x39e>
 8006c54:	2602      	movs	r6, #2
 8006c56:	e7f2      	b.n	8006c3e <_dtoa_r+0x336>
 8006c58:	07e1      	lsls	r1, r4, #31
 8006c5a:	d508      	bpl.n	8006c6e <_dtoa_r+0x366>
 8006c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c64:	f7f9 fc38 	bl	80004d8 <__aeabi_dmul>
 8006c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	1064      	asrs	r4, r4, #1
 8006c70:	3508      	adds	r5, #8
 8006c72:	e7e5      	b.n	8006c40 <_dtoa_r+0x338>
 8006c74:	f000 80d2 	beq.w	8006e1c <_dtoa_r+0x514>
 8006c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c7c:	427c      	negs	r4, r7
 8006c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e28 <_dtoa_r+0x520>)
 8006c80:	f004 020f 	and.w	r2, r4, #15
 8006c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fc24 	bl	80004d8 <__aeabi_dmul>
 8006c90:	2602      	movs	r6, #2
 8006c92:	2300      	movs	r3, #0
 8006c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c98:	4d64      	ldr	r5, [pc, #400]	@ (8006e2c <_dtoa_r+0x524>)
 8006c9a:	1124      	asrs	r4, r4, #4
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	f040 80b2 	bne.w	8006e06 <_dtoa_r+0x4fe>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1d3      	bne.n	8006c4e <_dtoa_r+0x346>
 8006ca6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006caa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80b7 	beq.w	8006e20 <_dtoa_r+0x518>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8006e30 <_dtoa_r+0x528>)
 8006cba:	f7f9 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f000 80ae 	beq.w	8006e20 <_dtoa_r+0x518>
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 80aa 	beq.w	8006e20 <_dtoa_r+0x518>
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dd37      	ble.n	8006d42 <_dtoa_r+0x43a>
 8006cd2:	1e7b      	subs	r3, r7, #1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4b55      	ldr	r3, [pc, #340]	@ (8006e34 <_dtoa_r+0x52c>)
 8006cde:	f7f9 fbfb 	bl	80004d8 <__aeabi_dmul>
 8006ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce6:	9c08      	ldr	r4, [sp, #32]
 8006ce8:	3601      	adds	r6, #1
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7f9 fb8a 	bl	8000404 <__aeabi_i2d>
 8006cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cf4:	f7f9 fbf0 	bl	80004d8 <__aeabi_dmul>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006e38 <_dtoa_r+0x530>)
 8006cfc:	f7f9 fa36 	bl	800016c <__adddf3>
 8006d00:	4605      	mov	r5, r0
 8006d02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d06:	2c00      	cmp	r4, #0
 8006d08:	f040 809a 	bne.w	8006e40 <_dtoa_r+0x538>
 8006d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	4b4a      	ldr	r3, [pc, #296]	@ (8006e3c <_dtoa_r+0x534>)
 8006d14:	f7f9 fa28 	bl	8000168 <__aeabi_dsub>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d20:	462a      	mov	r2, r5
 8006d22:	4633      	mov	r3, r6
 8006d24:	f7f9 fe68 	bl	80009f8 <__aeabi_dcmpgt>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f040 828e 	bne.w	800724a <_dtoa_r+0x942>
 8006d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d32:	462a      	mov	r2, r5
 8006d34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d38:	f7f9 fe40 	bl	80009bc <__aeabi_dcmplt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f040 8127 	bne.w	8006f90 <_dtoa_r+0x688>
 8006d42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f2c0 8163 	blt.w	8007018 <_dtoa_r+0x710>
 8006d52:	2f0e      	cmp	r7, #14
 8006d54:	f300 8160 	bgt.w	8007018 <_dtoa_r+0x710>
 8006d58:	4b33      	ldr	r3, [pc, #204]	@ (8006e28 <_dtoa_r+0x520>)
 8006d5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da03      	bge.n	8006d74 <_dtoa_r+0x46c>
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f340 8100 	ble.w	8006f74 <_dtoa_r+0x66c>
 8006d74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d78:	4656      	mov	r6, sl
 8006d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fcd3 	bl	800072c <__aeabi_ddiv>
 8006d86:	f7f9 fe57 	bl	8000a38 <__aeabi_d2iz>
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	f7f9 fb3a 	bl	8000404 <__aeabi_i2d>
 8006d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d94:	f7f9 fba0 	bl	80004d8 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 f9e2 	bl	8000168 <__aeabi_dsub>
 8006da4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006da8:	9d07      	ldr	r5, [sp, #28]
 8006daa:	f806 4b01 	strb.w	r4, [r6], #1
 8006dae:	eba6 040a 	sub.w	r4, r6, sl
 8006db2:	42a5      	cmp	r5, r4
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	f040 8116 	bne.w	8006fe8 <_dtoa_r+0x6e0>
 8006dbc:	f7f9 f9d6 	bl	800016c <__adddf3>
 8006dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	f7f9 fe16 	bl	80009f8 <__aeabi_dcmpgt>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	f040 80f8 	bne.w	8006fc2 <_dtoa_r+0x6ba>
 8006dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fde5 	bl	80009a8 <__aeabi_dcmpeq>
 8006dde:	b118      	cbz	r0, 8006de8 <_dtoa_r+0x4e0>
 8006de0:	f018 0f01 	tst.w	r8, #1
 8006de4:	f040 80ed 	bne.w	8006fc2 <_dtoa_r+0x6ba>
 8006de8:	4649      	mov	r1, r9
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fc92 	bl	8007714 <_Bfree>
 8006df0:	2300      	movs	r3, #0
 8006df2:	7033      	strb	r3, [r6, #0]
 8006df4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006df6:	3701      	adds	r7, #1
 8006df8:	601f      	str	r7, [r3, #0]
 8006dfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8320 	beq.w	8007442 <_dtoa_r+0xb3a>
 8006e02:	601e      	str	r6, [r3, #0]
 8006e04:	e31d      	b.n	8007442 <_dtoa_r+0xb3a>
 8006e06:	07e2      	lsls	r2, r4, #31
 8006e08:	d505      	bpl.n	8006e16 <_dtoa_r+0x50e>
 8006e0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e0e:	f7f9 fb63 	bl	80004d8 <__aeabi_dmul>
 8006e12:	2301      	movs	r3, #1
 8006e14:	3601      	adds	r6, #1
 8006e16:	1064      	asrs	r4, r4, #1
 8006e18:	3508      	adds	r5, #8
 8006e1a:	e73f      	b.n	8006c9c <_dtoa_r+0x394>
 8006e1c:	2602      	movs	r6, #2
 8006e1e:	e742      	b.n	8006ca6 <_dtoa_r+0x39e>
 8006e20:	9c07      	ldr	r4, [sp, #28]
 8006e22:	9704      	str	r7, [sp, #16]
 8006e24:	e761      	b.n	8006cea <_dtoa_r+0x3e2>
 8006e26:	bf00      	nop
 8006e28:	0800a6e8 	.word	0x0800a6e8
 8006e2c:	0800a6c0 	.word	0x0800a6c0
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	40240000 	.word	0x40240000
 8006e38:	401c0000 	.word	0x401c0000
 8006e3c:	40140000 	.word	0x40140000
 8006e40:	4b70      	ldr	r3, [pc, #448]	@ (8007004 <_dtoa_r+0x6fc>)
 8006e42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e4c:	4454      	add	r4, sl
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	d045      	beq.n	8006ede <_dtoa_r+0x5d6>
 8006e52:	2000      	movs	r0, #0
 8006e54:	496c      	ldr	r1, [pc, #432]	@ (8007008 <_dtoa_r+0x700>)
 8006e56:	f7f9 fc69 	bl	800072c <__aeabi_ddiv>
 8006e5a:	4633      	mov	r3, r6
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f7f9 f983 	bl	8000168 <__aeabi_dsub>
 8006e62:	4656      	mov	r6, sl
 8006e64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6c:	f7f9 fde4 	bl	8000a38 <__aeabi_d2iz>
 8006e70:	4605      	mov	r5, r0
 8006e72:	f7f9 fac7 	bl	8000404 <__aeabi_i2d>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7e:	f7f9 f973 	bl	8000168 <__aeabi_dsub>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	3530      	adds	r5, #48	@ 0x30
 8006e88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e90:	f806 5b01 	strb.w	r5, [r6], #1
 8006e94:	f7f9 fd92 	bl	80009bc <__aeabi_dcmplt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d163      	bne.n	8006f64 <_dtoa_r+0x65c>
 8006e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	495a      	ldr	r1, [pc, #360]	@ (800700c <_dtoa_r+0x704>)
 8006ea4:	f7f9 f960 	bl	8000168 <__aeabi_dsub>
 8006ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eac:	f7f9 fd86 	bl	80009bc <__aeabi_dcmplt>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f040 8087 	bne.w	8006fc4 <_dtoa_r+0x6bc>
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	f43f af43 	beq.w	8006d42 <_dtoa_r+0x43a>
 8006ebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b53      	ldr	r3, [pc, #332]	@ (8007010 <_dtoa_r+0x708>)
 8006ec4:	f7f9 fb08 	bl	80004d8 <__aeabi_dmul>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8007010 <_dtoa_r+0x708>)
 8006ed4:	f7f9 fb00 	bl	80004d8 <__aeabi_dmul>
 8006ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006edc:	e7c4      	b.n	8006e68 <_dtoa_r+0x560>
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f7f9 faf9 	bl	80004d8 <__aeabi_dmul>
 8006ee6:	4656      	mov	r6, sl
 8006ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006eec:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef2:	f7f9 fda1 	bl	8000a38 <__aeabi_d2iz>
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	f7f9 fa84 	bl	8000404 <__aeabi_i2d>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f04:	f7f9 f930 	bl	8000168 <__aeabi_dsub>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	3530      	adds	r5, #48	@ 0x30
 8006f0e:	f806 5b01 	strb.w	r5, [r6], #1
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	d124      	bne.n	8006f68 <_dtoa_r+0x660>
 8006f1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f22:	4b39      	ldr	r3, [pc, #228]	@ (8007008 <_dtoa_r+0x700>)
 8006f24:	f7f9 f922 	bl	800016c <__adddf3>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f30:	f7f9 fd62 	bl	80009f8 <__aeabi_dcmpgt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d145      	bne.n	8006fc4 <_dtoa_r+0x6bc>
 8006f38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4932      	ldr	r1, [pc, #200]	@ (8007008 <_dtoa_r+0x700>)
 8006f40:	f7f9 f912 	bl	8000168 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4c:	f7f9 fd36 	bl	80009bc <__aeabi_dcmplt>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f aef6 	beq.w	8006d42 <_dtoa_r+0x43a>
 8006f56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f58:	1e73      	subs	r3, r6, #1
 8006f5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f60:	2b30      	cmp	r3, #48	@ 0x30
 8006f62:	d0f8      	beq.n	8006f56 <_dtoa_r+0x64e>
 8006f64:	9f04      	ldr	r7, [sp, #16]
 8006f66:	e73f      	b.n	8006de8 <_dtoa_r+0x4e0>
 8006f68:	4b29      	ldr	r3, [pc, #164]	@ (8007010 <_dtoa_r+0x708>)
 8006f6a:	f7f9 fab5 	bl	80004d8 <__aeabi_dmul>
 8006f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f72:	e7bc      	b.n	8006eee <_dtoa_r+0x5e6>
 8006f74:	d10c      	bne.n	8006f90 <_dtoa_r+0x688>
 8006f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b25      	ldr	r3, [pc, #148]	@ (8007014 <_dtoa_r+0x70c>)
 8006f7e:	f7f9 faab 	bl	80004d8 <__aeabi_dmul>
 8006f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f86:	f7f9 fd2d 	bl	80009e4 <__aeabi_dcmpge>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f000 815b 	beq.w	8007246 <_dtoa_r+0x93e>
 8006f90:	2400      	movs	r4, #0
 8006f92:	4625      	mov	r5, r4
 8006f94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f96:	4656      	mov	r6, sl
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	2700      	movs	r7, #0
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	f000 fbb7 	bl	8007714 <_Bfree>
 8006fa6:	2d00      	cmp	r5, #0
 8006fa8:	d0dc      	beq.n	8006f64 <_dtoa_r+0x65c>
 8006faa:	b12f      	cbz	r7, 8006fb8 <_dtoa_r+0x6b0>
 8006fac:	42af      	cmp	r7, r5
 8006fae:	d003      	beq.n	8006fb8 <_dtoa_r+0x6b0>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 fbae 	bl	8007714 <_Bfree>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f000 fbaa 	bl	8007714 <_Bfree>
 8006fc0:	e7d0      	b.n	8006f64 <_dtoa_r+0x65c>
 8006fc2:	9704      	str	r7, [sp, #16]
 8006fc4:	4633      	mov	r3, r6
 8006fc6:	461e      	mov	r6, r3
 8006fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fcc:	2a39      	cmp	r2, #57	@ 0x39
 8006fce:	d107      	bne.n	8006fe0 <_dtoa_r+0x6d8>
 8006fd0:	459a      	cmp	sl, r3
 8006fd2:	d1f8      	bne.n	8006fc6 <_dtoa_r+0x6be>
 8006fd4:	9a04      	ldr	r2, [sp, #16]
 8006fd6:	3201      	adds	r2, #1
 8006fd8:	9204      	str	r2, [sp, #16]
 8006fda:	2230      	movs	r2, #48	@ 0x30
 8006fdc:	f88a 2000 	strb.w	r2, [sl]
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	3201      	adds	r2, #1
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	e7bd      	b.n	8006f64 <_dtoa_r+0x65c>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <_dtoa_r+0x708>)
 8006fec:	f7f9 fa74 	bl	80004d8 <__aeabi_dmul>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	f7f9 fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f43f aebc 	beq.w	8006d7a <_dtoa_r+0x472>
 8007002:	e6f1      	b.n	8006de8 <_dtoa_r+0x4e0>
 8007004:	0800a6e8 	.word	0x0800a6e8
 8007008:	3fe00000 	.word	0x3fe00000
 800700c:	3ff00000 	.word	0x3ff00000
 8007010:	40240000 	.word	0x40240000
 8007014:	40140000 	.word	0x40140000
 8007018:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800701a:	2a00      	cmp	r2, #0
 800701c:	f000 80db 	beq.w	80071d6 <_dtoa_r+0x8ce>
 8007020:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007022:	2a01      	cmp	r2, #1
 8007024:	f300 80bf 	bgt.w	80071a6 <_dtoa_r+0x89e>
 8007028:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800702a:	2a00      	cmp	r2, #0
 800702c:	f000 80b7 	beq.w	800719e <_dtoa_r+0x896>
 8007030:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007034:	4646      	mov	r6, r8
 8007036:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800703a:	2101      	movs	r1, #1
 800703c:	441a      	add	r2, r3
 800703e:	4658      	mov	r0, fp
 8007040:	4498      	add	r8, r3
 8007042:	9209      	str	r2, [sp, #36]	@ 0x24
 8007044:	f000 fc64 	bl	8007910 <__i2b>
 8007048:	4605      	mov	r5, r0
 800704a:	b15e      	cbz	r6, 8007064 <_dtoa_r+0x75c>
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	dd08      	ble.n	8007064 <_dtoa_r+0x75c>
 8007052:	42b3      	cmp	r3, r6
 8007054:	bfa8      	it	ge
 8007056:	4633      	movge	r3, r6
 8007058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800705a:	eba8 0803 	sub.w	r8, r8, r3
 800705e:	1af6      	subs	r6, r6, r3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	9309      	str	r3, [sp, #36]	@ 0x24
 8007064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007066:	b1f3      	cbz	r3, 80070a6 <_dtoa_r+0x79e>
 8007068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80b7 	beq.w	80071de <_dtoa_r+0x8d6>
 8007070:	b18c      	cbz	r4, 8007096 <_dtoa_r+0x78e>
 8007072:	4629      	mov	r1, r5
 8007074:	4622      	mov	r2, r4
 8007076:	4658      	mov	r0, fp
 8007078:	f000 fd08 	bl	8007a8c <__pow5mult>
 800707c:	464a      	mov	r2, r9
 800707e:	4601      	mov	r1, r0
 8007080:	4605      	mov	r5, r0
 8007082:	4658      	mov	r0, fp
 8007084:	f000 fc5a 	bl	800793c <__multiply>
 8007088:	4649      	mov	r1, r9
 800708a:	9004      	str	r0, [sp, #16]
 800708c:	4658      	mov	r0, fp
 800708e:	f000 fb41 	bl	8007714 <_Bfree>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	4699      	mov	r9, r3
 8007096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007098:	1b1a      	subs	r2, r3, r4
 800709a:	d004      	beq.n	80070a6 <_dtoa_r+0x79e>
 800709c:	4649      	mov	r1, r9
 800709e:	4658      	mov	r0, fp
 80070a0:	f000 fcf4 	bl	8007a8c <__pow5mult>
 80070a4:	4681      	mov	r9, r0
 80070a6:	2101      	movs	r1, #1
 80070a8:	4658      	mov	r0, fp
 80070aa:	f000 fc31 	bl	8007910 <__i2b>
 80070ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b0:	4604      	mov	r4, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 81c9 	beq.w	800744a <_dtoa_r+0xb42>
 80070b8:	461a      	mov	r2, r3
 80070ba:	4601      	mov	r1, r0
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fce5 	bl	8007a8c <__pow5mult>
 80070c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070c4:	4604      	mov	r4, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f300 808f 	bgt.w	80071ea <_dtoa_r+0x8e2>
 80070cc:	9b02      	ldr	r3, [sp, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 8087 	bne.w	80071e2 <_dtoa_r+0x8da>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 8083 	bne.w	80071e6 <_dtoa_r+0x8de>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e6:	0d1b      	lsrs	r3, r3, #20
 80070e8:	051b      	lsls	r3, r3, #20
 80070ea:	b12b      	cbz	r3, 80070f8 <_dtoa_r+0x7f0>
 80070ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ee:	f108 0801 	add.w	r8, r8, #1
 80070f2:	3301      	adds	r3, #1
 80070f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f6:	2301      	movs	r3, #1
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 81aa 	beq.w	8007456 <_dtoa_r+0xb4e>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f000 fbb5 	bl	8007878 <__hi0bits>
 800710e:	f1c0 0020 	rsb	r0, r0, #32
 8007112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007114:	4418      	add	r0, r3
 8007116:	f010 001f 	ands.w	r0, r0, #31
 800711a:	d071      	beq.n	8007200 <_dtoa_r+0x8f8>
 800711c:	f1c0 0320 	rsb	r3, r0, #32
 8007120:	2b04      	cmp	r3, #4
 8007122:	dd65      	ble.n	80071f0 <_dtoa_r+0x8e8>
 8007124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007126:	f1c0 001c 	rsb	r0, r0, #28
 800712a:	4403      	add	r3, r0
 800712c:	4480      	add	r8, r0
 800712e:	4406      	add	r6, r0
 8007130:	9309      	str	r3, [sp, #36]	@ 0x24
 8007132:	f1b8 0f00 	cmp.w	r8, #0
 8007136:	dd05      	ble.n	8007144 <_dtoa_r+0x83c>
 8007138:	4649      	mov	r1, r9
 800713a:	4642      	mov	r2, r8
 800713c:	4658      	mov	r0, fp
 800713e:	f000 fcff 	bl	8007b40 <__lshift>
 8007142:	4681      	mov	r9, r0
 8007144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	dd05      	ble.n	8007156 <_dtoa_r+0x84e>
 800714a:	4621      	mov	r1, r4
 800714c:	461a      	mov	r2, r3
 800714e:	4658      	mov	r0, fp
 8007150:	f000 fcf6 	bl	8007b40 <__lshift>
 8007154:	4604      	mov	r4, r0
 8007156:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d053      	beq.n	8007204 <_dtoa_r+0x8fc>
 800715c:	4621      	mov	r1, r4
 800715e:	4648      	mov	r0, r9
 8007160:	f000 fd5a 	bl	8007c18 <__mcmp>
 8007164:	2800      	cmp	r0, #0
 8007166:	da4d      	bge.n	8007204 <_dtoa_r+0x8fc>
 8007168:	1e7b      	subs	r3, r7, #1
 800716a:	4649      	mov	r1, r9
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	220a      	movs	r2, #10
 8007170:	2300      	movs	r3, #0
 8007172:	4658      	mov	r0, fp
 8007174:	f000 faf0 	bl	8007758 <__multadd>
 8007178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800717a:	4681      	mov	r9, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 816c 	beq.w	800745a <_dtoa_r+0xb52>
 8007182:	2300      	movs	r3, #0
 8007184:	4629      	mov	r1, r5
 8007186:	220a      	movs	r2, #10
 8007188:	4658      	mov	r0, fp
 800718a:	f000 fae5 	bl	8007758 <__multadd>
 800718e:	9b08      	ldr	r3, [sp, #32]
 8007190:	4605      	mov	r5, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	dc61      	bgt.n	800725a <_dtoa_r+0x952>
 8007196:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007198:	2b02      	cmp	r3, #2
 800719a:	dc3b      	bgt.n	8007214 <_dtoa_r+0x90c>
 800719c:	e05d      	b.n	800725a <_dtoa_r+0x952>
 800719e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071a4:	e746      	b.n	8007034 <_dtoa_r+0x72c>
 80071a6:	9b07      	ldr	r3, [sp, #28]
 80071a8:	1e5c      	subs	r4, r3, #1
 80071aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	bfbf      	itttt	lt
 80071b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80071b4:	1ae3      	sublt	r3, r4, r3
 80071b6:	18d2      	addlt	r2, r2, r3
 80071b8:	bfa8      	it	ge
 80071ba:	1b1c      	subge	r4, r3, r4
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	bfbe      	ittt	lt
 80071c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80071c4:	2400      	movlt	r4, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bfb5      	itete	lt
 80071ca:	eba8 0603 	sublt.w	r6, r8, r3
 80071ce:	4646      	movge	r6, r8
 80071d0:	2300      	movlt	r3, #0
 80071d2:	9b07      	ldrge	r3, [sp, #28]
 80071d4:	e730      	b.n	8007038 <_dtoa_r+0x730>
 80071d6:	4646      	mov	r6, r8
 80071d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071dc:	e735      	b.n	800704a <_dtoa_r+0x742>
 80071de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071e0:	e75c      	b.n	800709c <_dtoa_r+0x794>
 80071e2:	2300      	movs	r3, #0
 80071e4:	e788      	b.n	80070f8 <_dtoa_r+0x7f0>
 80071e6:	9b02      	ldr	r3, [sp, #8]
 80071e8:	e786      	b.n	80070f8 <_dtoa_r+0x7f0>
 80071ea:	2300      	movs	r3, #0
 80071ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80071ee:	e788      	b.n	8007102 <_dtoa_r+0x7fa>
 80071f0:	d09f      	beq.n	8007132 <_dtoa_r+0x82a>
 80071f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f4:	331c      	adds	r3, #28
 80071f6:	441a      	add	r2, r3
 80071f8:	4498      	add	r8, r3
 80071fa:	441e      	add	r6, r3
 80071fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071fe:	e798      	b.n	8007132 <_dtoa_r+0x82a>
 8007200:	4603      	mov	r3, r0
 8007202:	e7f6      	b.n	80071f2 <_dtoa_r+0x8ea>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	9704      	str	r7, [sp, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	dc20      	bgt.n	800724e <_dtoa_r+0x946>
 800720c:	9308      	str	r3, [sp, #32]
 800720e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007210:	2b02      	cmp	r3, #2
 8007212:	dd1e      	ble.n	8007252 <_dtoa_r+0x94a>
 8007214:	9b08      	ldr	r3, [sp, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f47f aebc 	bne.w	8006f94 <_dtoa_r+0x68c>
 800721c:	4621      	mov	r1, r4
 800721e:	2205      	movs	r2, #5
 8007220:	4658      	mov	r0, fp
 8007222:	f000 fa99 	bl	8007758 <__multadd>
 8007226:	4601      	mov	r1, r0
 8007228:	4604      	mov	r4, r0
 800722a:	4648      	mov	r0, r9
 800722c:	f000 fcf4 	bl	8007c18 <__mcmp>
 8007230:	2800      	cmp	r0, #0
 8007232:	f77f aeaf 	ble.w	8006f94 <_dtoa_r+0x68c>
 8007236:	2331      	movs	r3, #49	@ 0x31
 8007238:	4656      	mov	r6, sl
 800723a:	f806 3b01 	strb.w	r3, [r6], #1
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	3301      	adds	r3, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	e6aa      	b.n	8006f9c <_dtoa_r+0x694>
 8007246:	9c07      	ldr	r4, [sp, #28]
 8007248:	9704      	str	r7, [sp, #16]
 800724a:	4625      	mov	r5, r4
 800724c:	e7f3      	b.n	8007236 <_dtoa_r+0x92e>
 800724e:	9b07      	ldr	r3, [sp, #28]
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8104 	beq.w	8007462 <_dtoa_r+0xb5a>
 800725a:	2e00      	cmp	r6, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x962>
 800725e:	4629      	mov	r1, r5
 8007260:	4632      	mov	r2, r6
 8007262:	4658      	mov	r0, fp
 8007264:	f000 fc6c 	bl	8007b40 <__lshift>
 8007268:	4605      	mov	r5, r0
 800726a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726c:	2b00      	cmp	r3, #0
 800726e:	d05a      	beq.n	8007326 <_dtoa_r+0xa1e>
 8007270:	4658      	mov	r0, fp
 8007272:	6869      	ldr	r1, [r5, #4]
 8007274:	f000 fa0e 	bl	8007694 <_Balloc>
 8007278:	4606      	mov	r6, r0
 800727a:	b928      	cbnz	r0, 8007288 <_dtoa_r+0x980>
 800727c:	4602      	mov	r2, r0
 800727e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007282:	4b83      	ldr	r3, [pc, #524]	@ (8007490 <_dtoa_r+0xb88>)
 8007284:	f7ff bb54 	b.w	8006930 <_dtoa_r+0x28>
 8007288:	692a      	ldr	r2, [r5, #16]
 800728a:	f105 010c 	add.w	r1, r5, #12
 800728e:	3202      	adds	r2, #2
 8007290:	0092      	lsls	r2, r2, #2
 8007292:	300c      	adds	r0, #12
 8007294:	f001 ff5e 	bl	8009154 <memcpy>
 8007298:	2201      	movs	r2, #1
 800729a:	4631      	mov	r1, r6
 800729c:	4658      	mov	r0, fp
 800729e:	f000 fc4f 	bl	8007b40 <__lshift>
 80072a2:	462f      	mov	r7, r5
 80072a4:	4605      	mov	r5, r0
 80072a6:	f10a 0301 	add.w	r3, sl, #1
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	9b08      	ldr	r3, [sp, #32]
 80072ae:	4453      	add	r3, sl
 80072b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	4621      	mov	r1, r4
 80072be:	3b01      	subs	r3, #1
 80072c0:	4648      	mov	r0, r9
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	f7ff fa98 	bl	80067f8 <quorem>
 80072c8:	4639      	mov	r1, r7
 80072ca:	9008      	str	r0, [sp, #32]
 80072cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072d0:	4648      	mov	r0, r9
 80072d2:	f000 fca1 	bl	8007c18 <__mcmp>
 80072d6:	462a      	mov	r2, r5
 80072d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80072da:	4621      	mov	r1, r4
 80072dc:	4658      	mov	r0, fp
 80072de:	f000 fcb7 	bl	8007c50 <__mdiff>
 80072e2:	68c2      	ldr	r2, [r0, #12]
 80072e4:	4606      	mov	r6, r0
 80072e6:	bb02      	cbnz	r2, 800732a <_dtoa_r+0xa22>
 80072e8:	4601      	mov	r1, r0
 80072ea:	4648      	mov	r0, r9
 80072ec:	f000 fc94 	bl	8007c18 <__mcmp>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4631      	mov	r1, r6
 80072f4:	4658      	mov	r0, fp
 80072f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072f8:	f000 fa0c 	bl	8007714 <_Bfree>
 80072fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007300:	9e07      	ldr	r6, [sp, #28]
 8007302:	ea43 0102 	orr.w	r1, r3, r2
 8007306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007308:	4319      	orrs	r1, r3
 800730a:	d110      	bne.n	800732e <_dtoa_r+0xa26>
 800730c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007310:	d029      	beq.n	8007366 <_dtoa_r+0xa5e>
 8007312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd02      	ble.n	800731e <_dtoa_r+0xa16>
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800731e:	9b02      	ldr	r3, [sp, #8]
 8007320:	f883 8000 	strb.w	r8, [r3]
 8007324:	e63b      	b.n	8006f9e <_dtoa_r+0x696>
 8007326:	4628      	mov	r0, r5
 8007328:	e7bb      	b.n	80072a2 <_dtoa_r+0x99a>
 800732a:	2201      	movs	r2, #1
 800732c:	e7e1      	b.n	80072f2 <_dtoa_r+0x9ea>
 800732e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	db04      	blt.n	800733e <_dtoa_r+0xa36>
 8007334:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007336:	430b      	orrs	r3, r1
 8007338:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800733a:	430b      	orrs	r3, r1
 800733c:	d120      	bne.n	8007380 <_dtoa_r+0xa78>
 800733e:	2a00      	cmp	r2, #0
 8007340:	dded      	ble.n	800731e <_dtoa_r+0xa16>
 8007342:	4649      	mov	r1, r9
 8007344:	2201      	movs	r2, #1
 8007346:	4658      	mov	r0, fp
 8007348:	f000 fbfa 	bl	8007b40 <__lshift>
 800734c:	4621      	mov	r1, r4
 800734e:	4681      	mov	r9, r0
 8007350:	f000 fc62 	bl	8007c18 <__mcmp>
 8007354:	2800      	cmp	r0, #0
 8007356:	dc03      	bgt.n	8007360 <_dtoa_r+0xa58>
 8007358:	d1e1      	bne.n	800731e <_dtoa_r+0xa16>
 800735a:	f018 0f01 	tst.w	r8, #1
 800735e:	d0de      	beq.n	800731e <_dtoa_r+0xa16>
 8007360:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007364:	d1d8      	bne.n	8007318 <_dtoa_r+0xa10>
 8007366:	2339      	movs	r3, #57	@ 0x39
 8007368:	9a02      	ldr	r2, [sp, #8]
 800736a:	7013      	strb	r3, [r2, #0]
 800736c:	4633      	mov	r3, r6
 800736e:	461e      	mov	r6, r3
 8007370:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007374:	3b01      	subs	r3, #1
 8007376:	2a39      	cmp	r2, #57	@ 0x39
 8007378:	d052      	beq.n	8007420 <_dtoa_r+0xb18>
 800737a:	3201      	adds	r2, #1
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e60e      	b.n	8006f9e <_dtoa_r+0x696>
 8007380:	2a00      	cmp	r2, #0
 8007382:	dd07      	ble.n	8007394 <_dtoa_r+0xa8c>
 8007384:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007388:	d0ed      	beq.n	8007366 <_dtoa_r+0xa5e>
 800738a:	9a02      	ldr	r2, [sp, #8]
 800738c:	f108 0301 	add.w	r3, r8, #1
 8007390:	7013      	strb	r3, [r2, #0]
 8007392:	e604      	b.n	8006f9e <_dtoa_r+0x696>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	9a07      	ldr	r2, [sp, #28]
 8007398:	f803 8c01 	strb.w	r8, [r3, #-1]
 800739c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800739e:	4293      	cmp	r3, r2
 80073a0:	d028      	beq.n	80073f4 <_dtoa_r+0xaec>
 80073a2:	4649      	mov	r1, r9
 80073a4:	2300      	movs	r3, #0
 80073a6:	220a      	movs	r2, #10
 80073a8:	4658      	mov	r0, fp
 80073aa:	f000 f9d5 	bl	8007758 <__multadd>
 80073ae:	42af      	cmp	r7, r5
 80073b0:	4681      	mov	r9, r0
 80073b2:	f04f 0300 	mov.w	r3, #0
 80073b6:	f04f 020a 	mov.w	r2, #10
 80073ba:	4639      	mov	r1, r7
 80073bc:	4658      	mov	r0, fp
 80073be:	d107      	bne.n	80073d0 <_dtoa_r+0xac8>
 80073c0:	f000 f9ca 	bl	8007758 <__multadd>
 80073c4:	4607      	mov	r7, r0
 80073c6:	4605      	mov	r5, r0
 80073c8:	9b07      	ldr	r3, [sp, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	9307      	str	r3, [sp, #28]
 80073ce:	e774      	b.n	80072ba <_dtoa_r+0x9b2>
 80073d0:	f000 f9c2 	bl	8007758 <__multadd>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4607      	mov	r7, r0
 80073d8:	2300      	movs	r3, #0
 80073da:	220a      	movs	r2, #10
 80073dc:	4658      	mov	r0, fp
 80073de:	f000 f9bb 	bl	8007758 <__multadd>
 80073e2:	4605      	mov	r5, r0
 80073e4:	e7f0      	b.n	80073c8 <_dtoa_r+0xac0>
 80073e6:	9b08      	ldr	r3, [sp, #32]
 80073e8:	2700      	movs	r7, #0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfcc      	ite	gt
 80073ee:	461e      	movgt	r6, r3
 80073f0:	2601      	movle	r6, #1
 80073f2:	4456      	add	r6, sl
 80073f4:	4649      	mov	r1, r9
 80073f6:	2201      	movs	r2, #1
 80073f8:	4658      	mov	r0, fp
 80073fa:	f000 fba1 	bl	8007b40 <__lshift>
 80073fe:	4621      	mov	r1, r4
 8007400:	4681      	mov	r9, r0
 8007402:	f000 fc09 	bl	8007c18 <__mcmp>
 8007406:	2800      	cmp	r0, #0
 8007408:	dcb0      	bgt.n	800736c <_dtoa_r+0xa64>
 800740a:	d102      	bne.n	8007412 <_dtoa_r+0xb0a>
 800740c:	f018 0f01 	tst.w	r8, #1
 8007410:	d1ac      	bne.n	800736c <_dtoa_r+0xa64>
 8007412:	4633      	mov	r3, r6
 8007414:	461e      	mov	r6, r3
 8007416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800741a:	2a30      	cmp	r2, #48	@ 0x30
 800741c:	d0fa      	beq.n	8007414 <_dtoa_r+0xb0c>
 800741e:	e5be      	b.n	8006f9e <_dtoa_r+0x696>
 8007420:	459a      	cmp	sl, r3
 8007422:	d1a4      	bne.n	800736e <_dtoa_r+0xa66>
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	3301      	adds	r3, #1
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	2331      	movs	r3, #49	@ 0x31
 800742c:	f88a 3000 	strb.w	r3, [sl]
 8007430:	e5b5      	b.n	8006f9e <_dtoa_r+0x696>
 8007432:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007434:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007494 <_dtoa_r+0xb8c>
 8007438:	b11b      	cbz	r3, 8007442 <_dtoa_r+0xb3a>
 800743a:	f10a 0308 	add.w	r3, sl, #8
 800743e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	4650      	mov	r0, sl
 8007444:	b017      	add	sp, #92	@ 0x5c
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800744c:	2b01      	cmp	r3, #1
 800744e:	f77f ae3d 	ble.w	80070cc <_dtoa_r+0x7c4>
 8007452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007454:	930a      	str	r3, [sp, #40]	@ 0x28
 8007456:	2001      	movs	r0, #1
 8007458:	e65b      	b.n	8007112 <_dtoa_r+0x80a>
 800745a:	9b08      	ldr	r3, [sp, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f77f aed6 	ble.w	800720e <_dtoa_r+0x906>
 8007462:	4656      	mov	r6, sl
 8007464:	4621      	mov	r1, r4
 8007466:	4648      	mov	r0, r9
 8007468:	f7ff f9c6 	bl	80067f8 <quorem>
 800746c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	f806 8b01 	strb.w	r8, [r6], #1
 8007476:	eba6 020a 	sub.w	r2, r6, sl
 800747a:	4293      	cmp	r3, r2
 800747c:	ddb3      	ble.n	80073e6 <_dtoa_r+0xade>
 800747e:	4649      	mov	r1, r9
 8007480:	2300      	movs	r3, #0
 8007482:	220a      	movs	r2, #10
 8007484:	4658      	mov	r0, fp
 8007486:	f000 f967 	bl	8007758 <__multadd>
 800748a:	4681      	mov	r9, r0
 800748c:	e7ea      	b.n	8007464 <_dtoa_r+0xb5c>
 800748e:	bf00      	nop
 8007490:	0800a643 	.word	0x0800a643
 8007494:	0800a5c7 	.word	0x0800a5c7

08007498 <_free_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4605      	mov	r5, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	d040      	beq.n	8007522 <_free_r+0x8a>
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f0c      	subs	r4, r1, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfb8      	it	lt
 80074aa:	18e4      	addlt	r4, r4, r3
 80074ac:	f000 f8e6 	bl	800767c <__malloc_lock>
 80074b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007524 <_free_r+0x8c>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	b933      	cbnz	r3, 80074c4 <_free_r+0x2c>
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	4628      	mov	r0, r5
 80074bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c0:	f000 b8e2 	b.w	8007688 <__malloc_unlock>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x42>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428b      	cmp	r3, r1
 80074ce:	bf01      	itttt	eq
 80074d0:	6819      	ldreq	r1, [r3, #0]
 80074d2:	685b      	ldreq	r3, [r3, #4]
 80074d4:	1809      	addeq	r1, r1, r0
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	e7ed      	b.n	80074b6 <_free_r+0x1e>
 80074da:	461a      	mov	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b10b      	cbz	r3, 80074e4 <_free_r+0x4c>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d9fa      	bls.n	80074da <_free_r+0x42>
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	1850      	adds	r0, r2, r1
 80074e8:	42a0      	cmp	r0, r4
 80074ea:	d10b      	bne.n	8007504 <_free_r+0x6c>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	4401      	add	r1, r0
 80074f0:	1850      	adds	r0, r2, r1
 80074f2:	4283      	cmp	r3, r0
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	d1e0      	bne.n	80074ba <_free_r+0x22>
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4408      	add	r0, r1
 80074fe:	6010      	str	r0, [r2, #0]
 8007500:	6053      	str	r3, [r2, #4]
 8007502:	e7da      	b.n	80074ba <_free_r+0x22>
 8007504:	d902      	bls.n	800750c <_free_r+0x74>
 8007506:	230c      	movs	r3, #12
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	e7d6      	b.n	80074ba <_free_r+0x22>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	1821      	adds	r1, r4, r0
 8007510:	428b      	cmp	r3, r1
 8007512:	bf01      	itttt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	1809      	addeq	r1, r1, r0
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	6063      	str	r3, [r4, #4]
 800751e:	6054      	str	r4, [r2, #4]
 8007520:	e7cb      	b.n	80074ba <_free_r+0x22>
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000604 	.word	0x20000604

08007528 <malloc>:
 8007528:	4b02      	ldr	r3, [pc, #8]	@ (8007534 <malloc+0xc>)
 800752a:	4601      	mov	r1, r0
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	f000 b825 	b.w	800757c <_malloc_r>
 8007532:	bf00      	nop
 8007534:	200000a8 	.word	0x200000a8

08007538 <sbrk_aligned>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	4e0f      	ldr	r6, [pc, #60]	@ (8007578 <sbrk_aligned+0x40>)
 800753c:	460c      	mov	r4, r1
 800753e:	6831      	ldr	r1, [r6, #0]
 8007540:	4605      	mov	r5, r0
 8007542:	b911      	cbnz	r1, 800754a <sbrk_aligned+0x12>
 8007544:	f001 fdf6 	bl	8009134 <_sbrk_r>
 8007548:	6030      	str	r0, [r6, #0]
 800754a:	4621      	mov	r1, r4
 800754c:	4628      	mov	r0, r5
 800754e:	f001 fdf1 	bl	8009134 <_sbrk_r>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	d103      	bne.n	800755e <sbrk_aligned+0x26>
 8007556:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800755a:	4620      	mov	r0, r4
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	1cc4      	adds	r4, r0, #3
 8007560:	f024 0403 	bic.w	r4, r4, #3
 8007564:	42a0      	cmp	r0, r4
 8007566:	d0f8      	beq.n	800755a <sbrk_aligned+0x22>
 8007568:	1a21      	subs	r1, r4, r0
 800756a:	4628      	mov	r0, r5
 800756c:	f001 fde2 	bl	8009134 <_sbrk_r>
 8007570:	3001      	adds	r0, #1
 8007572:	d1f2      	bne.n	800755a <sbrk_aligned+0x22>
 8007574:	e7ef      	b.n	8007556 <sbrk_aligned+0x1e>
 8007576:	bf00      	nop
 8007578:	20000600 	.word	0x20000600

0800757c <_malloc_r>:
 800757c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007580:	1ccd      	adds	r5, r1, #3
 8007582:	f025 0503 	bic.w	r5, r5, #3
 8007586:	3508      	adds	r5, #8
 8007588:	2d0c      	cmp	r5, #12
 800758a:	bf38      	it	cc
 800758c:	250c      	movcc	r5, #12
 800758e:	2d00      	cmp	r5, #0
 8007590:	4606      	mov	r6, r0
 8007592:	db01      	blt.n	8007598 <_malloc_r+0x1c>
 8007594:	42a9      	cmp	r1, r5
 8007596:	d904      	bls.n	80075a2 <_malloc_r+0x26>
 8007598:	230c      	movs	r3, #12
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	2000      	movs	r0, #0
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007678 <_malloc_r+0xfc>
 80075a6:	f000 f869 	bl	800767c <__malloc_lock>
 80075aa:	f8d8 3000 	ldr.w	r3, [r8]
 80075ae:	461c      	mov	r4, r3
 80075b0:	bb44      	cbnz	r4, 8007604 <_malloc_r+0x88>
 80075b2:	4629      	mov	r1, r5
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff ffbf 	bl	8007538 <sbrk_aligned>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	4604      	mov	r4, r0
 80075be:	d158      	bne.n	8007672 <_malloc_r+0xf6>
 80075c0:	f8d8 4000 	ldr.w	r4, [r8]
 80075c4:	4627      	mov	r7, r4
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	d143      	bne.n	8007652 <_malloc_r+0xd6>
 80075ca:	2c00      	cmp	r4, #0
 80075cc:	d04b      	beq.n	8007666 <_malloc_r+0xea>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	4639      	mov	r1, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	eb04 0903 	add.w	r9, r4, r3
 80075d8:	f001 fdac 	bl	8009134 <_sbrk_r>
 80075dc:	4581      	cmp	r9, r0
 80075de:	d142      	bne.n	8007666 <_malloc_r+0xea>
 80075e0:	6821      	ldr	r1, [r4, #0]
 80075e2:	4630      	mov	r0, r6
 80075e4:	1a6d      	subs	r5, r5, r1
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7ff ffa6 	bl	8007538 <sbrk_aligned>
 80075ec:	3001      	adds	r0, #1
 80075ee:	d03a      	beq.n	8007666 <_malloc_r+0xea>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	442b      	add	r3, r5
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	f8d8 3000 	ldr.w	r3, [r8]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	bb62      	cbnz	r2, 8007658 <_malloc_r+0xdc>
 80075fe:	f8c8 7000 	str.w	r7, [r8]
 8007602:	e00f      	b.n	8007624 <_malloc_r+0xa8>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	1b52      	subs	r2, r2, r5
 8007608:	d420      	bmi.n	800764c <_malloc_r+0xd0>
 800760a:	2a0b      	cmp	r2, #11
 800760c:	d917      	bls.n	800763e <_malloc_r+0xc2>
 800760e:	1961      	adds	r1, r4, r5
 8007610:	42a3      	cmp	r3, r4
 8007612:	6025      	str	r5, [r4, #0]
 8007614:	bf18      	it	ne
 8007616:	6059      	strne	r1, [r3, #4]
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	bf08      	it	eq
 800761c:	f8c8 1000 	streq.w	r1, [r8]
 8007620:	5162      	str	r2, [r4, r5]
 8007622:	604b      	str	r3, [r1, #4]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f82f 	bl	8007688 <__malloc_unlock>
 800762a:	f104 000b 	add.w	r0, r4, #11
 800762e:	1d23      	adds	r3, r4, #4
 8007630:	f020 0007 	bic.w	r0, r0, #7
 8007634:	1ac2      	subs	r2, r0, r3
 8007636:	bf1c      	itt	ne
 8007638:	1a1b      	subne	r3, r3, r0
 800763a:	50a3      	strne	r3, [r4, r2]
 800763c:	e7af      	b.n	800759e <_malloc_r+0x22>
 800763e:	6862      	ldr	r2, [r4, #4]
 8007640:	42a3      	cmp	r3, r4
 8007642:	bf0c      	ite	eq
 8007644:	f8c8 2000 	streq.w	r2, [r8]
 8007648:	605a      	strne	r2, [r3, #4]
 800764a:	e7eb      	b.n	8007624 <_malloc_r+0xa8>
 800764c:	4623      	mov	r3, r4
 800764e:	6864      	ldr	r4, [r4, #4]
 8007650:	e7ae      	b.n	80075b0 <_malloc_r+0x34>
 8007652:	463c      	mov	r4, r7
 8007654:	687f      	ldr	r7, [r7, #4]
 8007656:	e7b6      	b.n	80075c6 <_malloc_r+0x4a>
 8007658:	461a      	mov	r2, r3
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	42a3      	cmp	r3, r4
 800765e:	d1fb      	bne.n	8007658 <_malloc_r+0xdc>
 8007660:	2300      	movs	r3, #0
 8007662:	6053      	str	r3, [r2, #4]
 8007664:	e7de      	b.n	8007624 <_malloc_r+0xa8>
 8007666:	230c      	movs	r3, #12
 8007668:	4630      	mov	r0, r6
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f000 f80c 	bl	8007688 <__malloc_unlock>
 8007670:	e794      	b.n	800759c <_malloc_r+0x20>
 8007672:	6005      	str	r5, [r0, #0]
 8007674:	e7d6      	b.n	8007624 <_malloc_r+0xa8>
 8007676:	bf00      	nop
 8007678:	20000604 	.word	0x20000604

0800767c <__malloc_lock>:
 800767c:	4801      	ldr	r0, [pc, #4]	@ (8007684 <__malloc_lock+0x8>)
 800767e:	f7ff b8a6 	b.w	80067ce <__retarget_lock_acquire_recursive>
 8007682:	bf00      	nop
 8007684:	200005fc 	.word	0x200005fc

08007688 <__malloc_unlock>:
 8007688:	4801      	ldr	r0, [pc, #4]	@ (8007690 <__malloc_unlock+0x8>)
 800768a:	f7ff b8a1 	b.w	80067d0 <__retarget_lock_release_recursive>
 800768e:	bf00      	nop
 8007690:	200005fc 	.word	0x200005fc

08007694 <_Balloc>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	69c6      	ldr	r6, [r0, #28]
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	b976      	cbnz	r6, 80076bc <_Balloc+0x28>
 800769e:	2010      	movs	r0, #16
 80076a0:	f7ff ff42 	bl	8007528 <malloc>
 80076a4:	4602      	mov	r2, r0
 80076a6:	61e0      	str	r0, [r4, #28]
 80076a8:	b920      	cbnz	r0, 80076b4 <_Balloc+0x20>
 80076aa:	216b      	movs	r1, #107	@ 0x6b
 80076ac:	4b17      	ldr	r3, [pc, #92]	@ (800770c <_Balloc+0x78>)
 80076ae:	4818      	ldr	r0, [pc, #96]	@ (8007710 <_Balloc+0x7c>)
 80076b0:	f001 fd64 	bl	800917c <__assert_func>
 80076b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076b8:	6006      	str	r6, [r0, #0]
 80076ba:	60c6      	str	r6, [r0, #12]
 80076bc:	69e6      	ldr	r6, [r4, #28]
 80076be:	68f3      	ldr	r3, [r6, #12]
 80076c0:	b183      	cbz	r3, 80076e4 <_Balloc+0x50>
 80076c2:	69e3      	ldr	r3, [r4, #28]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076ca:	b9b8      	cbnz	r0, 80076fc <_Balloc+0x68>
 80076cc:	2101      	movs	r1, #1
 80076ce:	fa01 f605 	lsl.w	r6, r1, r5
 80076d2:	1d72      	adds	r2, r6, #5
 80076d4:	4620      	mov	r0, r4
 80076d6:	0092      	lsls	r2, r2, #2
 80076d8:	f001 fd6e 	bl	80091b8 <_calloc_r>
 80076dc:	b160      	cbz	r0, 80076f8 <_Balloc+0x64>
 80076de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076e2:	e00e      	b.n	8007702 <_Balloc+0x6e>
 80076e4:	2221      	movs	r2, #33	@ 0x21
 80076e6:	2104      	movs	r1, #4
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 fd65 	bl	80091b8 <_calloc_r>
 80076ee:	69e3      	ldr	r3, [r4, #28]
 80076f0:	60f0      	str	r0, [r6, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e4      	bne.n	80076c2 <_Balloc+0x2e>
 80076f8:	2000      	movs	r0, #0
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	6802      	ldr	r2, [r0, #0]
 80076fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007702:	2300      	movs	r3, #0
 8007704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007708:	e7f7      	b.n	80076fa <_Balloc+0x66>
 800770a:	bf00      	nop
 800770c:	0800a5d4 	.word	0x0800a5d4
 8007710:	0800a654 	.word	0x0800a654

08007714 <_Bfree>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	69c6      	ldr	r6, [r0, #28]
 8007718:	4605      	mov	r5, r0
 800771a:	460c      	mov	r4, r1
 800771c:	b976      	cbnz	r6, 800773c <_Bfree+0x28>
 800771e:	2010      	movs	r0, #16
 8007720:	f7ff ff02 	bl	8007528 <malloc>
 8007724:	4602      	mov	r2, r0
 8007726:	61e8      	str	r0, [r5, #28]
 8007728:	b920      	cbnz	r0, 8007734 <_Bfree+0x20>
 800772a:	218f      	movs	r1, #143	@ 0x8f
 800772c:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <_Bfree+0x3c>)
 800772e:	4809      	ldr	r0, [pc, #36]	@ (8007754 <_Bfree+0x40>)
 8007730:	f001 fd24 	bl	800917c <__assert_func>
 8007734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007738:	6006      	str	r6, [r0, #0]
 800773a:	60c6      	str	r6, [r0, #12]
 800773c:	b13c      	cbz	r4, 800774e <_Bfree+0x3a>
 800773e:	69eb      	ldr	r3, [r5, #28]
 8007740:	6862      	ldr	r2, [r4, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007748:	6021      	str	r1, [r4, #0]
 800774a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	0800a5d4 	.word	0x0800a5d4
 8007754:	0800a654 	.word	0x0800a654

08007758 <__multadd>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4607      	mov	r7, r0
 800775e:	460c      	mov	r4, r1
 8007760:	461e      	mov	r6, r3
 8007762:	2000      	movs	r0, #0
 8007764:	690d      	ldr	r5, [r1, #16]
 8007766:	f101 0c14 	add.w	ip, r1, #20
 800776a:	f8dc 3000 	ldr.w	r3, [ip]
 800776e:	3001      	adds	r0, #1
 8007770:	b299      	uxth	r1, r3
 8007772:	fb02 6101 	mla	r1, r2, r1, r6
 8007776:	0c1e      	lsrs	r6, r3, #16
 8007778:	0c0b      	lsrs	r3, r1, #16
 800777a:	fb02 3306 	mla	r3, r2, r6, r3
 800777e:	b289      	uxth	r1, r1
 8007780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007784:	4285      	cmp	r5, r0
 8007786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800778a:	f84c 1b04 	str.w	r1, [ip], #4
 800778e:	dcec      	bgt.n	800776a <__multadd+0x12>
 8007790:	b30e      	cbz	r6, 80077d6 <__multadd+0x7e>
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	42ab      	cmp	r3, r5
 8007796:	dc19      	bgt.n	80077cc <__multadd+0x74>
 8007798:	6861      	ldr	r1, [r4, #4]
 800779a:	4638      	mov	r0, r7
 800779c:	3101      	adds	r1, #1
 800779e:	f7ff ff79 	bl	8007694 <_Balloc>
 80077a2:	4680      	mov	r8, r0
 80077a4:	b928      	cbnz	r0, 80077b2 <__multadd+0x5a>
 80077a6:	4602      	mov	r2, r0
 80077a8:	21ba      	movs	r1, #186	@ 0xba
 80077aa:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <__multadd+0x84>)
 80077ac:	480c      	ldr	r0, [pc, #48]	@ (80077e0 <__multadd+0x88>)
 80077ae:	f001 fce5 	bl	800917c <__assert_func>
 80077b2:	6922      	ldr	r2, [r4, #16]
 80077b4:	f104 010c 	add.w	r1, r4, #12
 80077b8:	3202      	adds	r2, #2
 80077ba:	0092      	lsls	r2, r2, #2
 80077bc:	300c      	adds	r0, #12
 80077be:	f001 fcc9 	bl	8009154 <memcpy>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4638      	mov	r0, r7
 80077c6:	f7ff ffa5 	bl	8007714 <_Bfree>
 80077ca:	4644      	mov	r4, r8
 80077cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077d0:	3501      	adds	r5, #1
 80077d2:	615e      	str	r6, [r3, #20]
 80077d4:	6125      	str	r5, [r4, #16]
 80077d6:	4620      	mov	r0, r4
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077dc:	0800a643 	.word	0x0800a643
 80077e0:	0800a654 	.word	0x0800a654

080077e4 <__s2b>:
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e8:	4615      	mov	r5, r2
 80077ea:	2209      	movs	r2, #9
 80077ec:	461f      	mov	r7, r3
 80077ee:	3308      	adds	r3, #8
 80077f0:	460c      	mov	r4, r1
 80077f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077f6:	4606      	mov	r6, r0
 80077f8:	2201      	movs	r2, #1
 80077fa:	2100      	movs	r1, #0
 80077fc:	429a      	cmp	r2, r3
 80077fe:	db09      	blt.n	8007814 <__s2b+0x30>
 8007800:	4630      	mov	r0, r6
 8007802:	f7ff ff47 	bl	8007694 <_Balloc>
 8007806:	b940      	cbnz	r0, 800781a <__s2b+0x36>
 8007808:	4602      	mov	r2, r0
 800780a:	21d3      	movs	r1, #211	@ 0xd3
 800780c:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <__s2b+0x8c>)
 800780e:	4819      	ldr	r0, [pc, #100]	@ (8007874 <__s2b+0x90>)
 8007810:	f001 fcb4 	bl	800917c <__assert_func>
 8007814:	0052      	lsls	r2, r2, #1
 8007816:	3101      	adds	r1, #1
 8007818:	e7f0      	b.n	80077fc <__s2b+0x18>
 800781a:	9b08      	ldr	r3, [sp, #32]
 800781c:	2d09      	cmp	r5, #9
 800781e:	6143      	str	r3, [r0, #20]
 8007820:	f04f 0301 	mov.w	r3, #1
 8007824:	6103      	str	r3, [r0, #16]
 8007826:	dd16      	ble.n	8007856 <__s2b+0x72>
 8007828:	f104 0909 	add.w	r9, r4, #9
 800782c:	46c8      	mov	r8, r9
 800782e:	442c      	add	r4, r5
 8007830:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007834:	4601      	mov	r1, r0
 8007836:	220a      	movs	r2, #10
 8007838:	4630      	mov	r0, r6
 800783a:	3b30      	subs	r3, #48	@ 0x30
 800783c:	f7ff ff8c 	bl	8007758 <__multadd>
 8007840:	45a0      	cmp	r8, r4
 8007842:	d1f5      	bne.n	8007830 <__s2b+0x4c>
 8007844:	f1a5 0408 	sub.w	r4, r5, #8
 8007848:	444c      	add	r4, r9
 800784a:	1b2d      	subs	r5, r5, r4
 800784c:	1963      	adds	r3, r4, r5
 800784e:	42bb      	cmp	r3, r7
 8007850:	db04      	blt.n	800785c <__s2b+0x78>
 8007852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007856:	2509      	movs	r5, #9
 8007858:	340a      	adds	r4, #10
 800785a:	e7f6      	b.n	800784a <__s2b+0x66>
 800785c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007860:	4601      	mov	r1, r0
 8007862:	220a      	movs	r2, #10
 8007864:	4630      	mov	r0, r6
 8007866:	3b30      	subs	r3, #48	@ 0x30
 8007868:	f7ff ff76 	bl	8007758 <__multadd>
 800786c:	e7ee      	b.n	800784c <__s2b+0x68>
 800786e:	bf00      	nop
 8007870:	0800a643 	.word	0x0800a643
 8007874:	0800a654 	.word	0x0800a654

08007878 <__hi0bits>:
 8007878:	4603      	mov	r3, r0
 800787a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800787e:	bf3a      	itte	cc
 8007880:	0403      	lslcc	r3, r0, #16
 8007882:	2010      	movcc	r0, #16
 8007884:	2000      	movcs	r0, #0
 8007886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800788a:	bf3c      	itt	cc
 800788c:	021b      	lslcc	r3, r3, #8
 800788e:	3008      	addcc	r0, #8
 8007890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007894:	bf3c      	itt	cc
 8007896:	011b      	lslcc	r3, r3, #4
 8007898:	3004      	addcc	r0, #4
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789e:	bf3c      	itt	cc
 80078a0:	009b      	lslcc	r3, r3, #2
 80078a2:	3002      	addcc	r0, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db05      	blt.n	80078b4 <__hi0bits+0x3c>
 80078a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80078ac:	f100 0001 	add.w	r0, r0, #1
 80078b0:	bf08      	it	eq
 80078b2:	2020      	moveq	r0, #32
 80078b4:	4770      	bx	lr

080078b6 <__lo0bits>:
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	4602      	mov	r2, r0
 80078ba:	f013 0007 	ands.w	r0, r3, #7
 80078be:	d00b      	beq.n	80078d8 <__lo0bits+0x22>
 80078c0:	07d9      	lsls	r1, r3, #31
 80078c2:	d421      	bmi.n	8007908 <__lo0bits+0x52>
 80078c4:	0798      	lsls	r0, r3, #30
 80078c6:	bf49      	itett	mi
 80078c8:	085b      	lsrmi	r3, r3, #1
 80078ca:	089b      	lsrpl	r3, r3, #2
 80078cc:	2001      	movmi	r0, #1
 80078ce:	6013      	strmi	r3, [r2, #0]
 80078d0:	bf5c      	itt	pl
 80078d2:	2002      	movpl	r0, #2
 80078d4:	6013      	strpl	r3, [r2, #0]
 80078d6:	4770      	bx	lr
 80078d8:	b299      	uxth	r1, r3
 80078da:	b909      	cbnz	r1, 80078e0 <__lo0bits+0x2a>
 80078dc:	2010      	movs	r0, #16
 80078de:	0c1b      	lsrs	r3, r3, #16
 80078e0:	b2d9      	uxtb	r1, r3
 80078e2:	b909      	cbnz	r1, 80078e8 <__lo0bits+0x32>
 80078e4:	3008      	adds	r0, #8
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	0719      	lsls	r1, r3, #28
 80078ea:	bf04      	itt	eq
 80078ec:	091b      	lsreq	r3, r3, #4
 80078ee:	3004      	addeq	r0, #4
 80078f0:	0799      	lsls	r1, r3, #30
 80078f2:	bf04      	itt	eq
 80078f4:	089b      	lsreq	r3, r3, #2
 80078f6:	3002      	addeq	r0, #2
 80078f8:	07d9      	lsls	r1, r3, #31
 80078fa:	d403      	bmi.n	8007904 <__lo0bits+0x4e>
 80078fc:	085b      	lsrs	r3, r3, #1
 80078fe:	f100 0001 	add.w	r0, r0, #1
 8007902:	d003      	beq.n	800790c <__lo0bits+0x56>
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4770      	bx	lr
 8007908:	2000      	movs	r0, #0
 800790a:	4770      	bx	lr
 800790c:	2020      	movs	r0, #32
 800790e:	4770      	bx	lr

08007910 <__i2b>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	2101      	movs	r1, #1
 8007916:	f7ff febd 	bl	8007694 <_Balloc>
 800791a:	4602      	mov	r2, r0
 800791c:	b928      	cbnz	r0, 800792a <__i2b+0x1a>
 800791e:	f240 1145 	movw	r1, #325	@ 0x145
 8007922:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <__i2b+0x24>)
 8007924:	4804      	ldr	r0, [pc, #16]	@ (8007938 <__i2b+0x28>)
 8007926:	f001 fc29 	bl	800917c <__assert_func>
 800792a:	2301      	movs	r3, #1
 800792c:	6144      	str	r4, [r0, #20]
 800792e:	6103      	str	r3, [r0, #16]
 8007930:	bd10      	pop	{r4, pc}
 8007932:	bf00      	nop
 8007934:	0800a643 	.word	0x0800a643
 8007938:	0800a654 	.word	0x0800a654

0800793c <__multiply>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	4614      	mov	r4, r2
 8007942:	690a      	ldr	r2, [r1, #16]
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	460f      	mov	r7, r1
 8007948:	429a      	cmp	r2, r3
 800794a:	bfa2      	ittt	ge
 800794c:	4623      	movge	r3, r4
 800794e:	460c      	movge	r4, r1
 8007950:	461f      	movge	r7, r3
 8007952:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007956:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	6861      	ldr	r1, [r4, #4]
 800795e:	eb0a 0609 	add.w	r6, sl, r9
 8007962:	42b3      	cmp	r3, r6
 8007964:	b085      	sub	sp, #20
 8007966:	bfb8      	it	lt
 8007968:	3101      	addlt	r1, #1
 800796a:	f7ff fe93 	bl	8007694 <_Balloc>
 800796e:	b930      	cbnz	r0, 800797e <__multiply+0x42>
 8007970:	4602      	mov	r2, r0
 8007972:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007976:	4b43      	ldr	r3, [pc, #268]	@ (8007a84 <__multiply+0x148>)
 8007978:	4843      	ldr	r0, [pc, #268]	@ (8007a88 <__multiply+0x14c>)
 800797a:	f001 fbff 	bl	800917c <__assert_func>
 800797e:	f100 0514 	add.w	r5, r0, #20
 8007982:	462b      	mov	r3, r5
 8007984:	2200      	movs	r2, #0
 8007986:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800798a:	4543      	cmp	r3, r8
 800798c:	d321      	bcc.n	80079d2 <__multiply+0x96>
 800798e:	f107 0114 	add.w	r1, r7, #20
 8007992:	f104 0214 	add.w	r2, r4, #20
 8007996:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800799a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	1b13      	subs	r3, r2, r4
 80079a2:	3b15      	subs	r3, #21
 80079a4:	f023 0303 	bic.w	r3, r3, #3
 80079a8:	3304      	adds	r3, #4
 80079aa:	f104 0715 	add.w	r7, r4, #21
 80079ae:	42ba      	cmp	r2, r7
 80079b0:	bf38      	it	cc
 80079b2:	2304      	movcc	r3, #4
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	428b      	cmp	r3, r1
 80079bc:	d80c      	bhi.n	80079d8 <__multiply+0x9c>
 80079be:	2e00      	cmp	r6, #0
 80079c0:	dd03      	ble.n	80079ca <__multiply+0x8e>
 80079c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d05a      	beq.n	8007a80 <__multiply+0x144>
 80079ca:	6106      	str	r6, [r0, #16]
 80079cc:	b005      	add	sp, #20
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d2:	f843 2b04 	str.w	r2, [r3], #4
 80079d6:	e7d8      	b.n	800798a <__multiply+0x4e>
 80079d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80079dc:	f1ba 0f00 	cmp.w	sl, #0
 80079e0:	d023      	beq.n	8007a2a <__multiply+0xee>
 80079e2:	46a9      	mov	r9, r5
 80079e4:	f04f 0c00 	mov.w	ip, #0
 80079e8:	f104 0e14 	add.w	lr, r4, #20
 80079ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079f0:	f8d9 3000 	ldr.w	r3, [r9]
 80079f4:	fa1f fb87 	uxth.w	fp, r7
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	fb0a 330b 	mla	r3, sl, fp, r3
 80079fe:	4463      	add	r3, ip
 8007a00:	f8d9 c000 	ldr.w	ip, [r9]
 8007a04:	0c3f      	lsrs	r7, r7, #16
 8007a06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a0a:	fb0a c707 	mla	r7, sl, r7, ip
 8007a0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a18:	4572      	cmp	r2, lr
 8007a1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a1e:	f849 3b04 	str.w	r3, [r9], #4
 8007a22:	d8e3      	bhi.n	80079ec <__multiply+0xb0>
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	f845 c003 	str.w	ip, [r5, r3]
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	3104      	adds	r1, #4
 8007a2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	d021      	beq.n	8007a7c <__multiply+0x140>
 8007a38:	46ae      	mov	lr, r5
 8007a3a:	f04f 0a00 	mov.w	sl, #0
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	f104 0c14 	add.w	ip, r4, #20
 8007a44:	f8bc b000 	ldrh.w	fp, [ip]
 8007a48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	fb09 770b 	mla	r7, r9, fp, r7
 8007a52:	4457      	add	r7, sl
 8007a54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a58:	f84e 3b04 	str.w	r3, [lr], #4
 8007a5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a64:	f8be 3000 	ldrh.w	r3, [lr]
 8007a68:	4562      	cmp	r2, ip
 8007a6a:	fb09 330a 	mla	r3, r9, sl, r3
 8007a6e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a76:	d8e5      	bhi.n	8007a44 <__multiply+0x108>
 8007a78:	9f01      	ldr	r7, [sp, #4]
 8007a7a:	51eb      	str	r3, [r5, r7]
 8007a7c:	3504      	adds	r5, #4
 8007a7e:	e79a      	b.n	80079b6 <__multiply+0x7a>
 8007a80:	3e01      	subs	r6, #1
 8007a82:	e79c      	b.n	80079be <__multiply+0x82>
 8007a84:	0800a643 	.word	0x0800a643
 8007a88:	0800a654 	.word	0x0800a654

08007a8c <__pow5mult>:
 8007a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	4615      	mov	r5, r2
 8007a92:	f012 0203 	ands.w	r2, r2, #3
 8007a96:	4607      	mov	r7, r0
 8007a98:	460e      	mov	r6, r1
 8007a9a:	d007      	beq.n	8007aac <__pow5mult+0x20>
 8007a9c:	4c25      	ldr	r4, [pc, #148]	@ (8007b34 <__pow5mult+0xa8>)
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aa6:	f7ff fe57 	bl	8007758 <__multadd>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	10ad      	asrs	r5, r5, #2
 8007aae:	d03d      	beq.n	8007b2c <__pow5mult+0xa0>
 8007ab0:	69fc      	ldr	r4, [r7, #28]
 8007ab2:	b97c      	cbnz	r4, 8007ad4 <__pow5mult+0x48>
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f7ff fd37 	bl	8007528 <malloc>
 8007aba:	4602      	mov	r2, r0
 8007abc:	61f8      	str	r0, [r7, #28]
 8007abe:	b928      	cbnz	r0, 8007acc <__pow5mult+0x40>
 8007ac0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b38 <__pow5mult+0xac>)
 8007ac6:	481d      	ldr	r0, [pc, #116]	@ (8007b3c <__pow5mult+0xb0>)
 8007ac8:	f001 fb58 	bl	800917c <__assert_func>
 8007acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ad0:	6004      	str	r4, [r0, #0]
 8007ad2:	60c4      	str	r4, [r0, #12]
 8007ad4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007adc:	b94c      	cbnz	r4, 8007af2 <__pow5mult+0x66>
 8007ade:	f240 2171 	movw	r1, #625	@ 0x271
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7ff ff14 	bl	8007910 <__i2b>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	f8c8 0008 	str.w	r0, [r8, #8]
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	f04f 0900 	mov.w	r9, #0
 8007af6:	07eb      	lsls	r3, r5, #31
 8007af8:	d50a      	bpl.n	8007b10 <__pow5mult+0x84>
 8007afa:	4631      	mov	r1, r6
 8007afc:	4622      	mov	r2, r4
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7ff ff1c 	bl	800793c <__multiply>
 8007b04:	4680      	mov	r8, r0
 8007b06:	4631      	mov	r1, r6
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7ff fe03 	bl	8007714 <_Bfree>
 8007b0e:	4646      	mov	r6, r8
 8007b10:	106d      	asrs	r5, r5, #1
 8007b12:	d00b      	beq.n	8007b2c <__pow5mult+0xa0>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	b938      	cbnz	r0, 8007b28 <__pow5mult+0x9c>
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff ff0d 	bl	800793c <__multiply>
 8007b22:	6020      	str	r0, [r4, #0]
 8007b24:	f8c0 9000 	str.w	r9, [r0]
 8007b28:	4604      	mov	r4, r0
 8007b2a:	e7e4      	b.n	8007af6 <__pow5mult+0x6a>
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b32:	bf00      	nop
 8007b34:	0800a6b0 	.word	0x0800a6b0
 8007b38:	0800a5d4 	.word	0x0800a5d4
 8007b3c:	0800a654 	.word	0x0800a654

08007b40 <__lshift>:
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	460c      	mov	r4, r1
 8007b46:	4607      	mov	r7, r0
 8007b48:	4691      	mov	r9, r2
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	6849      	ldr	r1, [r1, #4]
 8007b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b58:	f108 0601 	add.w	r6, r8, #1
 8007b5c:	42b3      	cmp	r3, r6
 8007b5e:	db0b      	blt.n	8007b78 <__lshift+0x38>
 8007b60:	4638      	mov	r0, r7
 8007b62:	f7ff fd97 	bl	8007694 <_Balloc>
 8007b66:	4605      	mov	r5, r0
 8007b68:	b948      	cbnz	r0, 8007b7e <__lshift+0x3e>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b70:	4b27      	ldr	r3, [pc, #156]	@ (8007c10 <__lshift+0xd0>)
 8007b72:	4828      	ldr	r0, [pc, #160]	@ (8007c14 <__lshift+0xd4>)
 8007b74:	f001 fb02 	bl	800917c <__assert_func>
 8007b78:	3101      	adds	r1, #1
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	e7ee      	b.n	8007b5c <__lshift+0x1c>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f100 0114 	add.w	r1, r0, #20
 8007b84:	f100 0210 	add.w	r2, r0, #16
 8007b88:	4618      	mov	r0, r3
 8007b8a:	4553      	cmp	r3, sl
 8007b8c:	db33      	blt.n	8007bf6 <__lshift+0xb6>
 8007b8e:	6920      	ldr	r0, [r4, #16]
 8007b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b94:	f104 0314 	add.w	r3, r4, #20
 8007b98:	f019 091f 	ands.w	r9, r9, #31
 8007b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ba4:	d02b      	beq.n	8007bfe <__lshift+0xbe>
 8007ba6:	468a      	mov	sl, r1
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f1c9 0e20 	rsb	lr, r9, #32
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	fa00 f009 	lsl.w	r0, r0, r9
 8007bb4:	4310      	orrs	r0, r2
 8007bb6:	f84a 0b04 	str.w	r0, [sl], #4
 8007bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bbe:	459c      	cmp	ip, r3
 8007bc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bc4:	d8f3      	bhi.n	8007bae <__lshift+0x6e>
 8007bc6:	ebac 0304 	sub.w	r3, ip, r4
 8007bca:	3b15      	subs	r3, #21
 8007bcc:	f023 0303 	bic.w	r3, r3, #3
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	f104 0015 	add.w	r0, r4, #21
 8007bd6:	4584      	cmp	ip, r0
 8007bd8:	bf38      	it	cc
 8007bda:	2304      	movcc	r3, #4
 8007bdc:	50ca      	str	r2, [r1, r3]
 8007bde:	b10a      	cbz	r2, 8007be4 <__lshift+0xa4>
 8007be0:	f108 0602 	add.w	r6, r8, #2
 8007be4:	3e01      	subs	r6, #1
 8007be6:	4638      	mov	r0, r7
 8007be8:	4621      	mov	r1, r4
 8007bea:	612e      	str	r6, [r5, #16]
 8007bec:	f7ff fd92 	bl	8007714 <_Bfree>
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	e7c5      	b.n	8007b8a <__lshift+0x4a>
 8007bfe:	3904      	subs	r1, #4
 8007c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c04:	459c      	cmp	ip, r3
 8007c06:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c0a:	d8f9      	bhi.n	8007c00 <__lshift+0xc0>
 8007c0c:	e7ea      	b.n	8007be4 <__lshift+0xa4>
 8007c0e:	bf00      	nop
 8007c10:	0800a643 	.word	0x0800a643
 8007c14:	0800a654 	.word	0x0800a654

08007c18 <__mcmp>:
 8007c18:	4603      	mov	r3, r0
 8007c1a:	690a      	ldr	r2, [r1, #16]
 8007c1c:	6900      	ldr	r0, [r0, #16]
 8007c1e:	b530      	push	{r4, r5, lr}
 8007c20:	1a80      	subs	r0, r0, r2
 8007c22:	d10e      	bne.n	8007c42 <__mcmp+0x2a>
 8007c24:	3314      	adds	r3, #20
 8007c26:	3114      	adds	r1, #20
 8007c28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c38:	4295      	cmp	r5, r2
 8007c3a:	d003      	beq.n	8007c44 <__mcmp+0x2c>
 8007c3c:	d205      	bcs.n	8007c4a <__mcmp+0x32>
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c42:	bd30      	pop	{r4, r5, pc}
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d3f3      	bcc.n	8007c30 <__mcmp+0x18>
 8007c48:	e7fb      	b.n	8007c42 <__mcmp+0x2a>
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	e7f9      	b.n	8007c42 <__mcmp+0x2a>
	...

08007c50 <__mdiff>:
 8007c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	4689      	mov	r9, r1
 8007c56:	4606      	mov	r6, r0
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	f7ff ffdb 	bl	8007c18 <__mcmp>
 8007c62:	1e05      	subs	r5, r0, #0
 8007c64:	d112      	bne.n	8007c8c <__mdiff+0x3c>
 8007c66:	4629      	mov	r1, r5
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f7ff fd13 	bl	8007694 <_Balloc>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <__mdiff+0x2e>
 8007c72:	f240 2137 	movw	r1, #567	@ 0x237
 8007c76:	4b3e      	ldr	r3, [pc, #248]	@ (8007d70 <__mdiff+0x120>)
 8007c78:	483e      	ldr	r0, [pc, #248]	@ (8007d74 <__mdiff+0x124>)
 8007c7a:	f001 fa7f 	bl	800917c <__assert_func>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c84:	4610      	mov	r0, r2
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8c:	bfbc      	itt	lt
 8007c8e:	464b      	movlt	r3, r9
 8007c90:	46a1      	movlt	r9, r4
 8007c92:	4630      	mov	r0, r6
 8007c94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c98:	bfba      	itte	lt
 8007c9a:	461c      	movlt	r4, r3
 8007c9c:	2501      	movlt	r5, #1
 8007c9e:	2500      	movge	r5, #0
 8007ca0:	f7ff fcf8 	bl	8007694 <_Balloc>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	b918      	cbnz	r0, 8007cb0 <__mdiff+0x60>
 8007ca8:	f240 2145 	movw	r1, #581	@ 0x245
 8007cac:	4b30      	ldr	r3, [pc, #192]	@ (8007d70 <__mdiff+0x120>)
 8007cae:	e7e3      	b.n	8007c78 <__mdiff+0x28>
 8007cb0:	f100 0b14 	add.w	fp, r0, #20
 8007cb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007cb8:	f109 0310 	add.w	r3, r9, #16
 8007cbc:	60c5      	str	r5, [r0, #12]
 8007cbe:	f04f 0c00 	mov.w	ip, #0
 8007cc2:	f109 0514 	add.w	r5, r9, #20
 8007cc6:	46d9      	mov	r9, fp
 8007cc8:	6926      	ldr	r6, [r4, #16]
 8007cca:	f104 0e14 	add.w	lr, r4, #20
 8007cce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007cd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007cde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ce2:	b281      	uxth	r1, r0
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	fa1f f38a 	uxth.w	r3, sl
 8007cea:	1a5b      	subs	r3, r3, r1
 8007cec:	0c00      	lsrs	r0, r0, #16
 8007cee:	4463      	add	r3, ip
 8007cf0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cf4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cfe:	4576      	cmp	r6, lr
 8007d00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d04:	f849 3b04 	str.w	r3, [r9], #4
 8007d08:	d8e6      	bhi.n	8007cd8 <__mdiff+0x88>
 8007d0a:	1b33      	subs	r3, r6, r4
 8007d0c:	3b15      	subs	r3, #21
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	3415      	adds	r4, #21
 8007d14:	3304      	adds	r3, #4
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	bf38      	it	cc
 8007d1a:	2304      	movcc	r3, #4
 8007d1c:	441d      	add	r5, r3
 8007d1e:	445b      	add	r3, fp
 8007d20:	461e      	mov	r6, r3
 8007d22:	462c      	mov	r4, r5
 8007d24:	4544      	cmp	r4, r8
 8007d26:	d30e      	bcc.n	8007d46 <__mdiff+0xf6>
 8007d28:	f108 0103 	add.w	r1, r8, #3
 8007d2c:	1b49      	subs	r1, r1, r5
 8007d2e:	f021 0103 	bic.w	r1, r1, #3
 8007d32:	3d03      	subs	r5, #3
 8007d34:	45a8      	cmp	r8, r5
 8007d36:	bf38      	it	cc
 8007d38:	2100      	movcc	r1, #0
 8007d3a:	440b      	add	r3, r1
 8007d3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d40:	b199      	cbz	r1, 8007d6a <__mdiff+0x11a>
 8007d42:	6117      	str	r7, [r2, #16]
 8007d44:	e79e      	b.n	8007c84 <__mdiff+0x34>
 8007d46:	46e6      	mov	lr, ip
 8007d48:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d4c:	fa1f fc81 	uxth.w	ip, r1
 8007d50:	44f4      	add	ip, lr
 8007d52:	0c08      	lsrs	r0, r1, #16
 8007d54:	4471      	add	r1, lr
 8007d56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d5a:	b289      	uxth	r1, r1
 8007d5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d64:	f846 1b04 	str.w	r1, [r6], #4
 8007d68:	e7dc      	b.n	8007d24 <__mdiff+0xd4>
 8007d6a:	3f01      	subs	r7, #1
 8007d6c:	e7e6      	b.n	8007d3c <__mdiff+0xec>
 8007d6e:	bf00      	nop
 8007d70:	0800a643 	.word	0x0800a643
 8007d74:	0800a654 	.word	0x0800a654

08007d78 <__ulp>:
 8007d78:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <__ulp+0x3c>)
 8007d7a:	400b      	ands	r3, r1
 8007d7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc08      	bgt.n	8007d96 <__ulp+0x1e>
 8007d84:	425b      	negs	r3, r3
 8007d86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d8e:	da04      	bge.n	8007d9a <__ulp+0x22>
 8007d90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d94:	4113      	asrs	r3, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	e008      	b.n	8007dac <__ulp+0x34>
 8007d9a:	f1a2 0314 	sub.w	r3, r2, #20
 8007d9e:	2b1e      	cmp	r3, #30
 8007da0:	bfd6      	itet	le
 8007da2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007da6:	2201      	movgt	r2, #1
 8007da8:	40da      	lsrle	r2, r3
 8007daa:	2300      	movs	r3, #0
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	7ff00000 	.word	0x7ff00000

08007db8 <__b2d>:
 8007db8:	6902      	ldr	r2, [r0, #16]
 8007dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbc:	f100 0614 	add.w	r6, r0, #20
 8007dc0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007dc4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007dc8:	4f1e      	ldr	r7, [pc, #120]	@ (8007e44 <__b2d+0x8c>)
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff fd54 	bl	8007878 <__hi0bits>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f1c0 0020 	rsb	r0, r0, #32
 8007dd6:	2b0a      	cmp	r3, #10
 8007dd8:	f1a2 0504 	sub.w	r5, r2, #4
 8007ddc:	6008      	str	r0, [r1, #0]
 8007dde:	dc12      	bgt.n	8007e06 <__b2d+0x4e>
 8007de0:	42ae      	cmp	r6, r5
 8007de2:	bf2c      	ite	cs
 8007de4:	2200      	movcs	r2, #0
 8007de6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007dea:	f1c3 0c0b 	rsb	ip, r3, #11
 8007dee:	3315      	adds	r3, #21
 8007df0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007df4:	fa04 f303 	lsl.w	r3, r4, r3
 8007df8:	fa22 f20c 	lsr.w	r2, r2, ip
 8007dfc:	ea4e 0107 	orr.w	r1, lr, r7
 8007e00:	431a      	orrs	r2, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e06:	42ae      	cmp	r6, r5
 8007e08:	bf36      	itet	cc
 8007e0a:	f1a2 0508 	subcc.w	r5, r2, #8
 8007e0e:	2200      	movcs	r2, #0
 8007e10:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007e14:	3b0b      	subs	r3, #11
 8007e16:	d012      	beq.n	8007e3e <__b2d+0x86>
 8007e18:	f1c3 0720 	rsb	r7, r3, #32
 8007e1c:	fa22 f107 	lsr.w	r1, r2, r7
 8007e20:	409c      	lsls	r4, r3
 8007e22:	430c      	orrs	r4, r1
 8007e24:	42b5      	cmp	r5, r6
 8007e26:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007e2a:	bf94      	ite	ls
 8007e2c:	2400      	movls	r4, #0
 8007e2e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007e32:	409a      	lsls	r2, r3
 8007e34:	40fc      	lsrs	r4, r7
 8007e36:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007e3a:	4322      	orrs	r2, r4
 8007e3c:	e7e1      	b.n	8007e02 <__b2d+0x4a>
 8007e3e:	ea44 0107 	orr.w	r1, r4, r7
 8007e42:	e7de      	b.n	8007e02 <__b2d+0x4a>
 8007e44:	3ff00000 	.word	0x3ff00000

08007e48 <__d2b>:
 8007e48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4690      	mov	r8, r2
 8007e50:	4699      	mov	r9, r3
 8007e52:	9e08      	ldr	r6, [sp, #32]
 8007e54:	f7ff fc1e 	bl	8007694 <_Balloc>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b930      	cbnz	r0, 8007e6a <__d2b+0x22>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e62:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <__d2b+0xa8>)
 8007e64:	4823      	ldr	r0, [pc, #140]	@ (8007ef4 <__d2b+0xac>)
 8007e66:	f001 f989 	bl	800917c <__assert_func>
 8007e6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e72:	b10d      	cbz	r5, 8007e78 <__d2b+0x30>
 8007e74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	f1b8 0300 	subs.w	r3, r8, #0
 8007e7e:	d024      	beq.n	8007eca <__d2b+0x82>
 8007e80:	4668      	mov	r0, sp
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	f7ff fd17 	bl	80078b6 <__lo0bits>
 8007e88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e8c:	b1d8      	cbz	r0, 8007ec6 <__d2b+0x7e>
 8007e8e:	f1c0 0320 	rsb	r3, r0, #32
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	430b      	orrs	r3, r1
 8007e98:	40c2      	lsrs	r2, r0
 8007e9a:	6163      	str	r3, [r4, #20]
 8007e9c:	9201      	str	r2, [sp, #4]
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2201      	moveq	r2, #1
 8007ea6:	2202      	movne	r2, #2
 8007ea8:	61a3      	str	r3, [r4, #24]
 8007eaa:	6122      	str	r2, [r4, #16]
 8007eac:	b1ad      	cbz	r5, 8007eda <__d2b+0x92>
 8007eae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007eb2:	4405      	add	r5, r0
 8007eb4:	6035      	str	r5, [r6, #0]
 8007eb6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebc:	6018      	str	r0, [r3, #0]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	b002      	add	sp, #8
 8007ec2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007ec6:	6161      	str	r1, [r4, #20]
 8007ec8:	e7e9      	b.n	8007e9e <__d2b+0x56>
 8007eca:	a801      	add	r0, sp, #4
 8007ecc:	f7ff fcf3 	bl	80078b6 <__lo0bits>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	6163      	str	r3, [r4, #20]
 8007ed6:	3020      	adds	r0, #32
 8007ed8:	e7e7      	b.n	8007eaa <__d2b+0x62>
 8007eda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ede:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ee2:	6030      	str	r0, [r6, #0]
 8007ee4:	6918      	ldr	r0, [r3, #16]
 8007ee6:	f7ff fcc7 	bl	8007878 <__hi0bits>
 8007eea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eee:	e7e4      	b.n	8007eba <__d2b+0x72>
 8007ef0:	0800a643 	.word	0x0800a643
 8007ef4:	0800a654 	.word	0x0800a654

08007ef8 <__ratio>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	b085      	sub	sp, #20
 8007efe:	e9cd 1000 	strd	r1, r0, [sp]
 8007f02:	a902      	add	r1, sp, #8
 8007f04:	f7ff ff58 	bl	8007db8 <__b2d>
 8007f08:	468b      	mov	fp, r1
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	9800      	ldr	r0, [sp, #0]
 8007f10:	a903      	add	r1, sp, #12
 8007f12:	f7ff ff51 	bl	8007db8 <__b2d>
 8007f16:	460d      	mov	r5, r1
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	4689      	mov	r9, r1
 8007f1c:	6919      	ldr	r1, [r3, #16]
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	4604      	mov	r4, r0
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	4630      	mov	r0, r6
 8007f26:	1ac9      	subs	r1, r1, r3
 8007f28:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfcd      	iteet	gt
 8007f36:	463a      	movgt	r2, r7
 8007f38:	462a      	movle	r2, r5
 8007f3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f3e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007f42:	bfd8      	it	le
 8007f44:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f48:	464b      	mov	r3, r9
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	f7f8 fbed 	bl	800072c <__aeabi_ddiv>
 8007f52:	b005      	add	sp, #20
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f58 <__copybits>:
 8007f58:	3901      	subs	r1, #1
 8007f5a:	b570      	push	{r4, r5, r6, lr}
 8007f5c:	1149      	asrs	r1, r1, #5
 8007f5e:	6914      	ldr	r4, [r2, #16]
 8007f60:	3101      	adds	r1, #1
 8007f62:	f102 0314 	add.w	r3, r2, #20
 8007f66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f6e:	1f05      	subs	r5, r0, #4
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	d30c      	bcc.n	8007f8e <__copybits+0x36>
 8007f74:	1aa3      	subs	r3, r4, r2
 8007f76:	3b11      	subs	r3, #17
 8007f78:	f023 0303 	bic.w	r3, r3, #3
 8007f7c:	3211      	adds	r2, #17
 8007f7e:	42a2      	cmp	r2, r4
 8007f80:	bf88      	it	hi
 8007f82:	2300      	movhi	r3, #0
 8007f84:	4418      	add	r0, r3
 8007f86:	2300      	movs	r3, #0
 8007f88:	4288      	cmp	r0, r1
 8007f8a:	d305      	bcc.n	8007f98 <__copybits+0x40>
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f92:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f96:	e7eb      	b.n	8007f70 <__copybits+0x18>
 8007f98:	f840 3b04 	str.w	r3, [r0], #4
 8007f9c:	e7f4      	b.n	8007f88 <__copybits+0x30>

08007f9e <__any_on>:
 8007f9e:	f100 0214 	add.w	r2, r0, #20
 8007fa2:	6900      	ldr	r0, [r0, #16]
 8007fa4:	114b      	asrs	r3, r1, #5
 8007fa6:	4298      	cmp	r0, r3
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	db11      	blt.n	8007fd0 <__any_on+0x32>
 8007fac:	dd0a      	ble.n	8007fc4 <__any_on+0x26>
 8007fae:	f011 011f 	ands.w	r1, r1, #31
 8007fb2:	d007      	beq.n	8007fc4 <__any_on+0x26>
 8007fb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fb8:	fa24 f001 	lsr.w	r0, r4, r1
 8007fbc:	fa00 f101 	lsl.w	r1, r0, r1
 8007fc0:	428c      	cmp	r4, r1
 8007fc2:	d10b      	bne.n	8007fdc <__any_on+0x3e>
 8007fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d803      	bhi.n	8007fd4 <__any_on+0x36>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	bd10      	pop	{r4, pc}
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	e7f7      	b.n	8007fc4 <__any_on+0x26>
 8007fd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d0f5      	beq.n	8007fc8 <__any_on+0x2a>
 8007fdc:	2001      	movs	r0, #1
 8007fde:	e7f6      	b.n	8007fce <__any_on+0x30>

08007fe0 <sulp>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	4690      	mov	r8, r2
 8007fe8:	f7ff fec6 	bl	8007d78 <__ulp>
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	d011      	beq.n	800801a <sulp+0x3a>
 8007ff6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007ffa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd0b      	ble.n	800801a <sulp+0x3a>
 8008002:	2400      	movs	r4, #0
 8008004:	051b      	lsls	r3, r3, #20
 8008006:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800800a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 fa61 	bl	80004d8 <__aeabi_dmul>
 8008016:	4604      	mov	r4, r0
 8008018:	460d      	mov	r5, r1
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008022:	0000      	movs	r0, r0
 8008024:	0000      	movs	r0, r0
	...

08008028 <_strtod_l>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	b09f      	sub	sp, #124	@ 0x7c
 800802e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008030:	2200      	movs	r2, #0
 8008032:	460c      	mov	r4, r1
 8008034:	921a      	str	r2, [sp, #104]	@ 0x68
 8008036:	f04f 0a00 	mov.w	sl, #0
 800803a:	f04f 0b00 	mov.w	fp, #0
 800803e:	460a      	mov	r2, r1
 8008040:	9005      	str	r0, [sp, #20]
 8008042:	9219      	str	r2, [sp, #100]	@ 0x64
 8008044:	7811      	ldrb	r1, [r2, #0]
 8008046:	292b      	cmp	r1, #43	@ 0x2b
 8008048:	d048      	beq.n	80080dc <_strtod_l+0xb4>
 800804a:	d836      	bhi.n	80080ba <_strtod_l+0x92>
 800804c:	290d      	cmp	r1, #13
 800804e:	d830      	bhi.n	80080b2 <_strtod_l+0x8a>
 8008050:	2908      	cmp	r1, #8
 8008052:	d830      	bhi.n	80080b6 <_strtod_l+0x8e>
 8008054:	2900      	cmp	r1, #0
 8008056:	d039      	beq.n	80080cc <_strtod_l+0xa4>
 8008058:	2200      	movs	r2, #0
 800805a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800805c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800805e:	782a      	ldrb	r2, [r5, #0]
 8008060:	2a30      	cmp	r2, #48	@ 0x30
 8008062:	f040 80b1 	bne.w	80081c8 <_strtod_l+0x1a0>
 8008066:	786a      	ldrb	r2, [r5, #1]
 8008068:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800806c:	2a58      	cmp	r2, #88	@ 0x58
 800806e:	d16c      	bne.n	800814a <_strtod_l+0x122>
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008074:	4a8e      	ldr	r2, [pc, #568]	@ (80082b0 <_strtod_l+0x288>)
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	ab1a      	add	r3, sp, #104	@ 0x68
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008080:	a919      	add	r1, sp, #100	@ 0x64
 8008082:	f001 f915 	bl	80092b0 <__gethex>
 8008086:	f010 060f 	ands.w	r6, r0, #15
 800808a:	4604      	mov	r4, r0
 800808c:	d005      	beq.n	800809a <_strtod_l+0x72>
 800808e:	2e06      	cmp	r6, #6
 8008090:	d126      	bne.n	80080e0 <_strtod_l+0xb8>
 8008092:	2300      	movs	r3, #0
 8008094:	3501      	adds	r5, #1
 8008096:	9519      	str	r5, [sp, #100]	@ 0x64
 8008098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800809a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8584 	bne.w	8008baa <_strtod_l+0xb82>
 80080a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080a4:	b1bb      	cbz	r3, 80080d6 <_strtod_l+0xae>
 80080a6:	4650      	mov	r0, sl
 80080a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80080ac:	b01f      	add	sp, #124	@ 0x7c
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	2920      	cmp	r1, #32
 80080b4:	d1d0      	bne.n	8008058 <_strtod_l+0x30>
 80080b6:	3201      	adds	r2, #1
 80080b8:	e7c3      	b.n	8008042 <_strtod_l+0x1a>
 80080ba:	292d      	cmp	r1, #45	@ 0x2d
 80080bc:	d1cc      	bne.n	8008058 <_strtod_l+0x30>
 80080be:	2101      	movs	r1, #1
 80080c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080c2:	1c51      	adds	r1, r2, #1
 80080c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80080c6:	7852      	ldrb	r2, [r2, #1]
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	d1c7      	bne.n	800805c <_strtod_l+0x34>
 80080cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f040 8568 	bne.w	8008ba6 <_strtod_l+0xb7e>
 80080d6:	4650      	mov	r0, sl
 80080d8:	4659      	mov	r1, fp
 80080da:	e7e7      	b.n	80080ac <_strtod_l+0x84>
 80080dc:	2100      	movs	r1, #0
 80080de:	e7ef      	b.n	80080c0 <_strtod_l+0x98>
 80080e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080e2:	b13a      	cbz	r2, 80080f4 <_strtod_l+0xcc>
 80080e4:	2135      	movs	r1, #53	@ 0x35
 80080e6:	a81c      	add	r0, sp, #112	@ 0x70
 80080e8:	f7ff ff36 	bl	8007f58 <__copybits>
 80080ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080ee:	9805      	ldr	r0, [sp, #20]
 80080f0:	f7ff fb10 	bl	8007714 <_Bfree>
 80080f4:	3e01      	subs	r6, #1
 80080f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080f8:	2e04      	cmp	r6, #4
 80080fa:	d806      	bhi.n	800810a <_strtod_l+0xe2>
 80080fc:	e8df f006 	tbb	[pc, r6]
 8008100:	201d0314 	.word	0x201d0314
 8008104:	14          	.byte	0x14
 8008105:	00          	.byte	0x00
 8008106:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800810a:	05e1      	lsls	r1, r4, #23
 800810c:	bf48      	it	mi
 800810e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008112:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008116:	0d1b      	lsrs	r3, r3, #20
 8008118:	051b      	lsls	r3, r3, #20
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1bd      	bne.n	800809a <_strtod_l+0x72>
 800811e:	f7fe fb2b 	bl	8006778 <__errno>
 8008122:	2322      	movs	r3, #34	@ 0x22
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	e7b8      	b.n	800809a <_strtod_l+0x72>
 8008128:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800812c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008130:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008134:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008138:	e7e7      	b.n	800810a <_strtod_l+0xe2>
 800813a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80082b4 <_strtod_l+0x28c>
 800813e:	e7e4      	b.n	800810a <_strtod_l+0xe2>
 8008140:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008144:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008148:	e7df      	b.n	800810a <_strtod_l+0xe2>
 800814a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b30      	cmp	r3, #48	@ 0x30
 8008154:	d0f9      	beq.n	800814a <_strtod_l+0x122>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d09f      	beq.n	800809a <_strtod_l+0x72>
 800815a:	2301      	movs	r3, #1
 800815c:	9309      	str	r3, [sp, #36]	@ 0x24
 800815e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008160:	220a      	movs	r2, #10
 8008162:	930c      	str	r3, [sp, #48]	@ 0x30
 8008164:	2300      	movs	r3, #0
 8008166:	461f      	mov	r7, r3
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	930a      	str	r3, [sp, #40]	@ 0x28
 800816c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800816e:	7805      	ldrb	r5, [r0, #0]
 8008170:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008174:	b2d9      	uxtb	r1, r3
 8008176:	2909      	cmp	r1, #9
 8008178:	d928      	bls.n	80081cc <_strtod_l+0x1a4>
 800817a:	2201      	movs	r2, #1
 800817c:	494e      	ldr	r1, [pc, #312]	@ (80082b8 <_strtod_l+0x290>)
 800817e:	f000 ffc7 	bl	8009110 <strncmp>
 8008182:	2800      	cmp	r0, #0
 8008184:	d032      	beq.n	80081ec <_strtod_l+0x1c4>
 8008186:	2000      	movs	r0, #0
 8008188:	462a      	mov	r2, r5
 800818a:	4681      	mov	r9, r0
 800818c:	463d      	mov	r5, r7
 800818e:	4603      	mov	r3, r0
 8008190:	2a65      	cmp	r2, #101	@ 0x65
 8008192:	d001      	beq.n	8008198 <_strtod_l+0x170>
 8008194:	2a45      	cmp	r2, #69	@ 0x45
 8008196:	d114      	bne.n	80081c2 <_strtod_l+0x19a>
 8008198:	b91d      	cbnz	r5, 80081a2 <_strtod_l+0x17a>
 800819a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819c:	4302      	orrs	r2, r0
 800819e:	d095      	beq.n	80080cc <_strtod_l+0xa4>
 80081a0:	2500      	movs	r5, #0
 80081a2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80081a4:	1c62      	adds	r2, r4, #1
 80081a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80081a8:	7862      	ldrb	r2, [r4, #1]
 80081aa:	2a2b      	cmp	r2, #43	@ 0x2b
 80081ac:	d077      	beq.n	800829e <_strtod_l+0x276>
 80081ae:	2a2d      	cmp	r2, #45	@ 0x2d
 80081b0:	d07b      	beq.n	80082aa <_strtod_l+0x282>
 80081b2:	f04f 0c00 	mov.w	ip, #0
 80081b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80081ba:	2909      	cmp	r1, #9
 80081bc:	f240 8082 	bls.w	80082c4 <_strtod_l+0x29c>
 80081c0:	9419      	str	r4, [sp, #100]	@ 0x64
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	e0a2      	b.n	800830e <_strtod_l+0x2e6>
 80081c8:	2300      	movs	r3, #0
 80081ca:	e7c7      	b.n	800815c <_strtod_l+0x134>
 80081cc:	2f08      	cmp	r7, #8
 80081ce:	bfd5      	itete	le
 80081d0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80081d2:	9908      	ldrgt	r1, [sp, #32]
 80081d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80081d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80081dc:	f100 0001 	add.w	r0, r0, #1
 80081e0:	bfd4      	ite	le
 80081e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80081e4:	9308      	strgt	r3, [sp, #32]
 80081e6:	3701      	adds	r7, #1
 80081e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80081ea:	e7bf      	b.n	800816c <_strtod_l+0x144>
 80081ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80081f2:	785a      	ldrb	r2, [r3, #1]
 80081f4:	b37f      	cbz	r7, 8008256 <_strtod_l+0x22e>
 80081f6:	4681      	mov	r9, r0
 80081f8:	463d      	mov	r5, r7
 80081fa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80081fe:	2b09      	cmp	r3, #9
 8008200:	d912      	bls.n	8008228 <_strtod_l+0x200>
 8008202:	2301      	movs	r3, #1
 8008204:	e7c4      	b.n	8008190 <_strtod_l+0x168>
 8008206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008208:	3001      	adds	r0, #1
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	9219      	str	r2, [sp, #100]	@ 0x64
 800820e:	785a      	ldrb	r2, [r3, #1]
 8008210:	2a30      	cmp	r2, #48	@ 0x30
 8008212:	d0f8      	beq.n	8008206 <_strtod_l+0x1de>
 8008214:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008218:	2b08      	cmp	r3, #8
 800821a:	f200 84cb 	bhi.w	8008bb4 <_strtod_l+0xb8c>
 800821e:	4681      	mov	r9, r0
 8008220:	2000      	movs	r0, #0
 8008222:	4605      	mov	r5, r0
 8008224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008226:	930c      	str	r3, [sp, #48]	@ 0x30
 8008228:	3a30      	subs	r2, #48	@ 0x30
 800822a:	f100 0301 	add.w	r3, r0, #1
 800822e:	d02a      	beq.n	8008286 <_strtod_l+0x25e>
 8008230:	4499      	add	r9, r3
 8008232:	210a      	movs	r1, #10
 8008234:	462b      	mov	r3, r5
 8008236:	eb00 0c05 	add.w	ip, r0, r5
 800823a:	4563      	cmp	r3, ip
 800823c:	d10d      	bne.n	800825a <_strtod_l+0x232>
 800823e:	1c69      	adds	r1, r5, #1
 8008240:	4401      	add	r1, r0
 8008242:	4428      	add	r0, r5
 8008244:	2808      	cmp	r0, #8
 8008246:	dc16      	bgt.n	8008276 <_strtod_l+0x24e>
 8008248:	230a      	movs	r3, #10
 800824a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800824c:	fb03 2300 	mla	r3, r3, r0, r2
 8008250:	930a      	str	r3, [sp, #40]	@ 0x28
 8008252:	2300      	movs	r3, #0
 8008254:	e018      	b.n	8008288 <_strtod_l+0x260>
 8008256:	4638      	mov	r0, r7
 8008258:	e7da      	b.n	8008210 <_strtod_l+0x1e8>
 800825a:	2b08      	cmp	r3, #8
 800825c:	f103 0301 	add.w	r3, r3, #1
 8008260:	dc03      	bgt.n	800826a <_strtod_l+0x242>
 8008262:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008264:	434e      	muls	r6, r1
 8008266:	960a      	str	r6, [sp, #40]	@ 0x28
 8008268:	e7e7      	b.n	800823a <_strtod_l+0x212>
 800826a:	2b10      	cmp	r3, #16
 800826c:	bfde      	ittt	le
 800826e:	9e08      	ldrle	r6, [sp, #32]
 8008270:	434e      	mulle	r6, r1
 8008272:	9608      	strle	r6, [sp, #32]
 8008274:	e7e1      	b.n	800823a <_strtod_l+0x212>
 8008276:	280f      	cmp	r0, #15
 8008278:	dceb      	bgt.n	8008252 <_strtod_l+0x22a>
 800827a:	230a      	movs	r3, #10
 800827c:	9808      	ldr	r0, [sp, #32]
 800827e:	fb03 2300 	mla	r3, r3, r0, r2
 8008282:	9308      	str	r3, [sp, #32]
 8008284:	e7e5      	b.n	8008252 <_strtod_l+0x22a>
 8008286:	4629      	mov	r1, r5
 8008288:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800828a:	460d      	mov	r5, r1
 800828c:	1c50      	adds	r0, r2, #1
 800828e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008290:	7852      	ldrb	r2, [r2, #1]
 8008292:	4618      	mov	r0, r3
 8008294:	e7b1      	b.n	80081fa <_strtod_l+0x1d2>
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	2301      	movs	r3, #1
 800829c:	e77d      	b.n	800819a <_strtod_l+0x172>
 800829e:	f04f 0c00 	mov.w	ip, #0
 80082a2:	1ca2      	adds	r2, r4, #2
 80082a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80082a6:	78a2      	ldrb	r2, [r4, #2]
 80082a8:	e785      	b.n	80081b6 <_strtod_l+0x18e>
 80082aa:	f04f 0c01 	mov.w	ip, #1
 80082ae:	e7f8      	b.n	80082a2 <_strtod_l+0x27a>
 80082b0:	0800a7c8 	.word	0x0800a7c8
 80082b4:	7ff00000 	.word	0x7ff00000
 80082b8:	0800a7b0 	.word	0x0800a7b0
 80082bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082be:	1c51      	adds	r1, r2, #1
 80082c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80082c2:	7852      	ldrb	r2, [r2, #1]
 80082c4:	2a30      	cmp	r2, #48	@ 0x30
 80082c6:	d0f9      	beq.n	80082bc <_strtod_l+0x294>
 80082c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80082cc:	2908      	cmp	r1, #8
 80082ce:	f63f af78 	bhi.w	80081c2 <_strtod_l+0x19a>
 80082d2:	f04f 080a 	mov.w	r8, #10
 80082d6:	3a30      	subs	r2, #48	@ 0x30
 80082d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80082da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082e0:	1c56      	adds	r6, r2, #1
 80082e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80082e4:	7852      	ldrb	r2, [r2, #1]
 80082e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082ea:	f1be 0f09 	cmp.w	lr, #9
 80082ee:	d939      	bls.n	8008364 <_strtod_l+0x33c>
 80082f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082f6:	1a76      	subs	r6, r6, r1
 80082f8:	2e08      	cmp	r6, #8
 80082fa:	dc03      	bgt.n	8008304 <_strtod_l+0x2dc>
 80082fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082fe:	4588      	cmp	r8, r1
 8008300:	bfa8      	it	ge
 8008302:	4688      	movge	r8, r1
 8008304:	f1bc 0f00 	cmp.w	ip, #0
 8008308:	d001      	beq.n	800830e <_strtod_l+0x2e6>
 800830a:	f1c8 0800 	rsb	r8, r8, #0
 800830e:	2d00      	cmp	r5, #0
 8008310:	d14e      	bne.n	80083b0 <_strtod_l+0x388>
 8008312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008314:	4308      	orrs	r0, r1
 8008316:	f47f aec0 	bne.w	800809a <_strtod_l+0x72>
 800831a:	2b00      	cmp	r3, #0
 800831c:	f47f aed6 	bne.w	80080cc <_strtod_l+0xa4>
 8008320:	2a69      	cmp	r2, #105	@ 0x69
 8008322:	d028      	beq.n	8008376 <_strtod_l+0x34e>
 8008324:	dc25      	bgt.n	8008372 <_strtod_l+0x34a>
 8008326:	2a49      	cmp	r2, #73	@ 0x49
 8008328:	d025      	beq.n	8008376 <_strtod_l+0x34e>
 800832a:	2a4e      	cmp	r2, #78	@ 0x4e
 800832c:	f47f aece 	bne.w	80080cc <_strtod_l+0xa4>
 8008330:	499a      	ldr	r1, [pc, #616]	@ (800859c <_strtod_l+0x574>)
 8008332:	a819      	add	r0, sp, #100	@ 0x64
 8008334:	f001 f9de 	bl	80096f4 <__match>
 8008338:	2800      	cmp	r0, #0
 800833a:	f43f aec7 	beq.w	80080cc <_strtod_l+0xa4>
 800833e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b28      	cmp	r3, #40	@ 0x28
 8008344:	d12e      	bne.n	80083a4 <_strtod_l+0x37c>
 8008346:	4996      	ldr	r1, [pc, #600]	@ (80085a0 <_strtod_l+0x578>)
 8008348:	aa1c      	add	r2, sp, #112	@ 0x70
 800834a:	a819      	add	r0, sp, #100	@ 0x64
 800834c:	f001 f9e6 	bl	800971c <__hexnan>
 8008350:	2805      	cmp	r0, #5
 8008352:	d127      	bne.n	80083a4 <_strtod_l+0x37c>
 8008354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008356:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800835a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800835e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008362:	e69a      	b.n	800809a <_strtod_l+0x72>
 8008364:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008366:	fb08 2101 	mla	r1, r8, r1, r2
 800836a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800836e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008370:	e7b5      	b.n	80082de <_strtod_l+0x2b6>
 8008372:	2a6e      	cmp	r2, #110	@ 0x6e
 8008374:	e7da      	b.n	800832c <_strtod_l+0x304>
 8008376:	498b      	ldr	r1, [pc, #556]	@ (80085a4 <_strtod_l+0x57c>)
 8008378:	a819      	add	r0, sp, #100	@ 0x64
 800837a:	f001 f9bb 	bl	80096f4 <__match>
 800837e:	2800      	cmp	r0, #0
 8008380:	f43f aea4 	beq.w	80080cc <_strtod_l+0xa4>
 8008384:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008386:	4988      	ldr	r1, [pc, #544]	@ (80085a8 <_strtod_l+0x580>)
 8008388:	3b01      	subs	r3, #1
 800838a:	a819      	add	r0, sp, #100	@ 0x64
 800838c:	9319      	str	r3, [sp, #100]	@ 0x64
 800838e:	f001 f9b1 	bl	80096f4 <__match>
 8008392:	b910      	cbnz	r0, 800839a <_strtod_l+0x372>
 8008394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008396:	3301      	adds	r3, #1
 8008398:	9319      	str	r3, [sp, #100]	@ 0x64
 800839a:	f04f 0a00 	mov.w	sl, #0
 800839e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80085ac <_strtod_l+0x584>
 80083a2:	e67a      	b.n	800809a <_strtod_l+0x72>
 80083a4:	4882      	ldr	r0, [pc, #520]	@ (80085b0 <_strtod_l+0x588>)
 80083a6:	f000 fee3 	bl	8009170 <nan>
 80083aa:	4682      	mov	sl, r0
 80083ac:	468b      	mov	fp, r1
 80083ae:	e674      	b.n	800809a <_strtod_l+0x72>
 80083b0:	eba8 0309 	sub.w	r3, r8, r9
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	bf08      	it	eq
 80083b8:	462f      	moveq	r7, r5
 80083ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083bc:	2d10      	cmp	r5, #16
 80083be:	462c      	mov	r4, r5
 80083c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c2:	bfa8      	it	ge
 80083c4:	2410      	movge	r4, #16
 80083c6:	f7f8 f80d 	bl	80003e4 <__aeabi_ui2d>
 80083ca:	2d09      	cmp	r5, #9
 80083cc:	4682      	mov	sl, r0
 80083ce:	468b      	mov	fp, r1
 80083d0:	dc11      	bgt.n	80083f6 <_strtod_l+0x3ce>
 80083d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f43f ae60 	beq.w	800809a <_strtod_l+0x72>
 80083da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083dc:	dd76      	ble.n	80084cc <_strtod_l+0x4a4>
 80083de:	2b16      	cmp	r3, #22
 80083e0:	dc5d      	bgt.n	800849e <_strtod_l+0x476>
 80083e2:	4974      	ldr	r1, [pc, #464]	@ (80085b4 <_strtod_l+0x58c>)
 80083e4:	4652      	mov	r2, sl
 80083e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083ea:	465b      	mov	r3, fp
 80083ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f0:	f7f8 f872 	bl	80004d8 <__aeabi_dmul>
 80083f4:	e7d9      	b.n	80083aa <_strtod_l+0x382>
 80083f6:	4b6f      	ldr	r3, [pc, #444]	@ (80085b4 <_strtod_l+0x58c>)
 80083f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008400:	f7f8 f86a 	bl	80004d8 <__aeabi_dmul>
 8008404:	4682      	mov	sl, r0
 8008406:	9808      	ldr	r0, [sp, #32]
 8008408:	468b      	mov	fp, r1
 800840a:	f7f7 ffeb 	bl	80003e4 <__aeabi_ui2d>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4650      	mov	r0, sl
 8008414:	4659      	mov	r1, fp
 8008416:	f7f7 fea9 	bl	800016c <__adddf3>
 800841a:	2d0f      	cmp	r5, #15
 800841c:	4682      	mov	sl, r0
 800841e:	468b      	mov	fp, r1
 8008420:	ddd7      	ble.n	80083d2 <_strtod_l+0x3aa>
 8008422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008424:	1b2c      	subs	r4, r5, r4
 8008426:	441c      	add	r4, r3
 8008428:	2c00      	cmp	r4, #0
 800842a:	f340 8096 	ble.w	800855a <_strtod_l+0x532>
 800842e:	f014 030f 	ands.w	r3, r4, #15
 8008432:	d00a      	beq.n	800844a <_strtod_l+0x422>
 8008434:	495f      	ldr	r1, [pc, #380]	@ (80085b4 <_strtod_l+0x58c>)
 8008436:	4652      	mov	r2, sl
 8008438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800843c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008440:	465b      	mov	r3, fp
 8008442:	f7f8 f849 	bl	80004d8 <__aeabi_dmul>
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	f034 040f 	bics.w	r4, r4, #15
 800844e:	d073      	beq.n	8008538 <_strtod_l+0x510>
 8008450:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008454:	dd48      	ble.n	80084e8 <_strtod_l+0x4c0>
 8008456:	2400      	movs	r4, #0
 8008458:	46a0      	mov	r8, r4
 800845a:	46a1      	mov	r9, r4
 800845c:	940a      	str	r4, [sp, #40]	@ 0x28
 800845e:	2322      	movs	r3, #34	@ 0x22
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	9a05      	ldr	r2, [sp, #20]
 8008466:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80085ac <_strtod_l+0x584>
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	f43f ae13 	beq.w	800809a <_strtod_l+0x72>
 8008474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008476:	9805      	ldr	r0, [sp, #20]
 8008478:	f7ff f94c 	bl	8007714 <_Bfree>
 800847c:	4649      	mov	r1, r9
 800847e:	9805      	ldr	r0, [sp, #20]
 8008480:	f7ff f948 	bl	8007714 <_Bfree>
 8008484:	4641      	mov	r1, r8
 8008486:	9805      	ldr	r0, [sp, #20]
 8008488:	f7ff f944 	bl	8007714 <_Bfree>
 800848c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800848e:	9805      	ldr	r0, [sp, #20]
 8008490:	f7ff f940 	bl	8007714 <_Bfree>
 8008494:	4621      	mov	r1, r4
 8008496:	9805      	ldr	r0, [sp, #20]
 8008498:	f7ff f93c 	bl	8007714 <_Bfree>
 800849c:	e5fd      	b.n	800809a <_strtod_l+0x72>
 800849e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80084a4:	4293      	cmp	r3, r2
 80084a6:	dbbc      	blt.n	8008422 <_strtod_l+0x3fa>
 80084a8:	4c42      	ldr	r4, [pc, #264]	@ (80085b4 <_strtod_l+0x58c>)
 80084aa:	f1c5 050f 	rsb	r5, r5, #15
 80084ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084b2:	4652      	mov	r2, sl
 80084b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b8:	465b      	mov	r3, fp
 80084ba:	f7f8 f80d 	bl	80004d8 <__aeabi_dmul>
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	1b5d      	subs	r5, r3, r5
 80084c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084ca:	e791      	b.n	80083f0 <_strtod_l+0x3c8>
 80084cc:	3316      	adds	r3, #22
 80084ce:	dba8      	blt.n	8008422 <_strtod_l+0x3fa>
 80084d0:	4b38      	ldr	r3, [pc, #224]	@ (80085b4 <_strtod_l+0x58c>)
 80084d2:	eba9 0808 	sub.w	r8, r9, r8
 80084d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084da:	4650      	mov	r0, sl
 80084dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084e0:	4659      	mov	r1, fp
 80084e2:	f7f8 f923 	bl	800072c <__aeabi_ddiv>
 80084e6:	e760      	b.n	80083aa <_strtod_l+0x382>
 80084e8:	4b33      	ldr	r3, [pc, #204]	@ (80085b8 <_strtod_l+0x590>)
 80084ea:	4650      	mov	r0, sl
 80084ec:	9308      	str	r3, [sp, #32]
 80084ee:	2300      	movs	r3, #0
 80084f0:	4659      	mov	r1, fp
 80084f2:	461e      	mov	r6, r3
 80084f4:	1124      	asrs	r4, r4, #4
 80084f6:	2c01      	cmp	r4, #1
 80084f8:	dc21      	bgt.n	800853e <_strtod_l+0x516>
 80084fa:	b10b      	cbz	r3, 8008500 <_strtod_l+0x4d8>
 80084fc:	4682      	mov	sl, r0
 80084fe:	468b      	mov	fp, r1
 8008500:	492d      	ldr	r1, [pc, #180]	@ (80085b8 <_strtod_l+0x590>)
 8008502:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008506:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800850a:	4652      	mov	r2, sl
 800850c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008510:	465b      	mov	r3, fp
 8008512:	f7f7 ffe1 	bl	80004d8 <__aeabi_dmul>
 8008516:	4b25      	ldr	r3, [pc, #148]	@ (80085ac <_strtod_l+0x584>)
 8008518:	460a      	mov	r2, r1
 800851a:	400b      	ands	r3, r1
 800851c:	4927      	ldr	r1, [pc, #156]	@ (80085bc <_strtod_l+0x594>)
 800851e:	4682      	mov	sl, r0
 8008520:	428b      	cmp	r3, r1
 8008522:	d898      	bhi.n	8008456 <_strtod_l+0x42e>
 8008524:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008528:	428b      	cmp	r3, r1
 800852a:	bf86      	itte	hi
 800852c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008530:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80085c0 <_strtod_l+0x598>
 8008534:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008538:	2300      	movs	r3, #0
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	e07a      	b.n	8008634 <_strtod_l+0x60c>
 800853e:	07e2      	lsls	r2, r4, #31
 8008540:	d505      	bpl.n	800854e <_strtod_l+0x526>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f7 ffc6 	bl	80004d8 <__aeabi_dmul>
 800854c:	2301      	movs	r3, #1
 800854e:	9a08      	ldr	r2, [sp, #32]
 8008550:	3601      	adds	r6, #1
 8008552:	3208      	adds	r2, #8
 8008554:	1064      	asrs	r4, r4, #1
 8008556:	9208      	str	r2, [sp, #32]
 8008558:	e7cd      	b.n	80084f6 <_strtod_l+0x4ce>
 800855a:	d0ed      	beq.n	8008538 <_strtod_l+0x510>
 800855c:	4264      	negs	r4, r4
 800855e:	f014 020f 	ands.w	r2, r4, #15
 8008562:	d00a      	beq.n	800857a <_strtod_l+0x552>
 8008564:	4b13      	ldr	r3, [pc, #76]	@ (80085b4 <_strtod_l+0x58c>)
 8008566:	4650      	mov	r0, sl
 8008568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800856c:	4659      	mov	r1, fp
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 f8db 	bl	800072c <__aeabi_ddiv>
 8008576:	4682      	mov	sl, r0
 8008578:	468b      	mov	fp, r1
 800857a:	1124      	asrs	r4, r4, #4
 800857c:	d0dc      	beq.n	8008538 <_strtod_l+0x510>
 800857e:	2c1f      	cmp	r4, #31
 8008580:	dd20      	ble.n	80085c4 <_strtod_l+0x59c>
 8008582:	2400      	movs	r4, #0
 8008584:	46a0      	mov	r8, r4
 8008586:	46a1      	mov	r9, r4
 8008588:	940a      	str	r4, [sp, #40]	@ 0x28
 800858a:	2322      	movs	r3, #34	@ 0x22
 800858c:	9a05      	ldr	r2, [sp, #20]
 800858e:	f04f 0a00 	mov.w	sl, #0
 8008592:	f04f 0b00 	mov.w	fp, #0
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e768      	b.n	800846c <_strtod_l+0x444>
 800859a:	bf00      	nop
 800859c:	0800a59b 	.word	0x0800a59b
 80085a0:	0800a7b4 	.word	0x0800a7b4
 80085a4:	0800a593 	.word	0x0800a593
 80085a8:	0800a5ca 	.word	0x0800a5ca
 80085ac:	7ff00000 	.word	0x7ff00000
 80085b0:	0800a95d 	.word	0x0800a95d
 80085b4:	0800a6e8 	.word	0x0800a6e8
 80085b8:	0800a6c0 	.word	0x0800a6c0
 80085bc:	7ca00000 	.word	0x7ca00000
 80085c0:	7fefffff 	.word	0x7fefffff
 80085c4:	f014 0310 	ands.w	r3, r4, #16
 80085c8:	bf18      	it	ne
 80085ca:	236a      	movne	r3, #106	@ 0x6a
 80085cc:	4650      	mov	r0, sl
 80085ce:	9308      	str	r3, [sp, #32]
 80085d0:	4659      	mov	r1, fp
 80085d2:	2300      	movs	r3, #0
 80085d4:	4ea9      	ldr	r6, [pc, #676]	@ (800887c <_strtod_l+0x854>)
 80085d6:	07e2      	lsls	r2, r4, #31
 80085d8:	d504      	bpl.n	80085e4 <_strtod_l+0x5bc>
 80085da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085de:	f7f7 ff7b 	bl	80004d8 <__aeabi_dmul>
 80085e2:	2301      	movs	r3, #1
 80085e4:	1064      	asrs	r4, r4, #1
 80085e6:	f106 0608 	add.w	r6, r6, #8
 80085ea:	d1f4      	bne.n	80085d6 <_strtod_l+0x5ae>
 80085ec:	b10b      	cbz	r3, 80085f2 <_strtod_l+0x5ca>
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	9b08      	ldr	r3, [sp, #32]
 80085f4:	b1b3      	cbz	r3, 8008624 <_strtod_l+0x5fc>
 80085f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80085fe:	2b00      	cmp	r3, #0
 8008600:	4659      	mov	r1, fp
 8008602:	dd0f      	ble.n	8008624 <_strtod_l+0x5fc>
 8008604:	2b1f      	cmp	r3, #31
 8008606:	dd57      	ble.n	80086b8 <_strtod_l+0x690>
 8008608:	2b34      	cmp	r3, #52	@ 0x34
 800860a:	bfd8      	it	le
 800860c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008610:	f04f 0a00 	mov.w	sl, #0
 8008614:	bfcf      	iteee	gt
 8008616:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800861a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800861e:	4093      	lslle	r3, r2
 8008620:	ea03 0b01 	andle.w	fp, r3, r1
 8008624:	2200      	movs	r2, #0
 8008626:	2300      	movs	r3, #0
 8008628:	4650      	mov	r0, sl
 800862a:	4659      	mov	r1, fp
 800862c:	f7f8 f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8008630:	2800      	cmp	r0, #0
 8008632:	d1a6      	bne.n	8008582 <_strtod_l+0x55a>
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	463a      	mov	r2, r7
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800863c:	462b      	mov	r3, r5
 800863e:	9805      	ldr	r0, [sp, #20]
 8008640:	f7ff f8d0 	bl	80077e4 <__s2b>
 8008644:	900a      	str	r0, [sp, #40]	@ 0x28
 8008646:	2800      	cmp	r0, #0
 8008648:	f43f af05 	beq.w	8008456 <_strtod_l+0x42e>
 800864c:	2400      	movs	r4, #0
 800864e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008650:	eba9 0308 	sub.w	r3, r9, r8
 8008654:	2a00      	cmp	r2, #0
 8008656:	bfa8      	it	ge
 8008658:	2300      	movge	r3, #0
 800865a:	46a0      	mov	r8, r4
 800865c:	9312      	str	r3, [sp, #72]	@ 0x48
 800865e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008662:	9316      	str	r3, [sp, #88]	@ 0x58
 8008664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	6859      	ldr	r1, [r3, #4]
 800866a:	f7ff f813 	bl	8007694 <_Balloc>
 800866e:	4681      	mov	r9, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f aef4 	beq.w	800845e <_strtod_l+0x436>
 8008676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008678:	300c      	adds	r0, #12
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	f103 010c 	add.w	r1, r3, #12
 8008680:	3202      	adds	r2, #2
 8008682:	0092      	lsls	r2, r2, #2
 8008684:	f000 fd66 	bl	8009154 <memcpy>
 8008688:	ab1c      	add	r3, sp, #112	@ 0x70
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	4652      	mov	r2, sl
 8008692:	465b      	mov	r3, fp
 8008694:	9805      	ldr	r0, [sp, #20]
 8008696:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800869a:	f7ff fbd5 	bl	8007e48 <__d2b>
 800869e:	901a      	str	r0, [sp, #104]	@ 0x68
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f43f aedc 	beq.w	800845e <_strtod_l+0x436>
 80086a6:	2101      	movs	r1, #1
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	f7ff f931 	bl	8007910 <__i2b>
 80086ae:	4680      	mov	r8, r0
 80086b0:	b948      	cbnz	r0, 80086c6 <_strtod_l+0x69e>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	e6d2      	b.n	800845e <_strtod_l+0x436>
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	ea03 0a0a 	and.w	sl, r3, sl
 80086c4:	e7ae      	b.n	8008624 <_strtod_l+0x5fc>
 80086c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80086c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	bfab      	itete	ge
 80086ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80086d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80086d2:	18ef      	addge	r7, r5, r3
 80086d4:	1b5e      	sublt	r6, r3, r5
 80086d6:	9b08      	ldr	r3, [sp, #32]
 80086d8:	bfa8      	it	ge
 80086da:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80086dc:	eba5 0503 	sub.w	r5, r5, r3
 80086e0:	4415      	add	r5, r2
 80086e2:	4b67      	ldr	r3, [pc, #412]	@ (8008880 <_strtod_l+0x858>)
 80086e4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80086e8:	bfb8      	it	lt
 80086ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80086ec:	429d      	cmp	r5, r3
 80086ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086f2:	da50      	bge.n	8008796 <_strtod_l+0x76e>
 80086f4:	1b5b      	subs	r3, r3, r5
 80086f6:	2b1f      	cmp	r3, #31
 80086f8:	f04f 0101 	mov.w	r1, #1
 80086fc:	eba2 0203 	sub.w	r2, r2, r3
 8008700:	dc3d      	bgt.n	800877e <_strtod_l+0x756>
 8008702:	fa01 f303 	lsl.w	r3, r1, r3
 8008706:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008708:	2300      	movs	r3, #0
 800870a:	9310      	str	r3, [sp, #64]	@ 0x40
 800870c:	18bd      	adds	r5, r7, r2
 800870e:	9b08      	ldr	r3, [sp, #32]
 8008710:	42af      	cmp	r7, r5
 8008712:	4416      	add	r6, r2
 8008714:	441e      	add	r6, r3
 8008716:	463b      	mov	r3, r7
 8008718:	bfa8      	it	ge
 800871a:	462b      	movge	r3, r5
 800871c:	42b3      	cmp	r3, r6
 800871e:	bfa8      	it	ge
 8008720:	4633      	movge	r3, r6
 8008722:	2b00      	cmp	r3, #0
 8008724:	bfc2      	ittt	gt
 8008726:	1aed      	subgt	r5, r5, r3
 8008728:	1af6      	subgt	r6, r6, r3
 800872a:	1aff      	subgt	r7, r7, r3
 800872c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800872e:	2b00      	cmp	r3, #0
 8008730:	dd16      	ble.n	8008760 <_strtod_l+0x738>
 8008732:	4641      	mov	r1, r8
 8008734:	461a      	mov	r2, r3
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	f7ff f9a8 	bl	8007a8c <__pow5mult>
 800873c:	4680      	mov	r8, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d0b7      	beq.n	80086b2 <_strtod_l+0x68a>
 8008742:	4601      	mov	r1, r0
 8008744:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008746:	9805      	ldr	r0, [sp, #20]
 8008748:	f7ff f8f8 	bl	800793c <__multiply>
 800874c:	900e      	str	r0, [sp, #56]	@ 0x38
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f ae85 	beq.w	800845e <_strtod_l+0x436>
 8008754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008756:	9805      	ldr	r0, [sp, #20]
 8008758:	f7fe ffdc 	bl	8007714 <_Bfree>
 800875c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008760:	2d00      	cmp	r5, #0
 8008762:	dc1d      	bgt.n	80087a0 <_strtod_l+0x778>
 8008764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd23      	ble.n	80087b2 <_strtod_l+0x78a>
 800876a:	4649      	mov	r1, r9
 800876c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800876e:	9805      	ldr	r0, [sp, #20]
 8008770:	f7ff f98c 	bl	8007a8c <__pow5mult>
 8008774:	4681      	mov	r9, r0
 8008776:	b9e0      	cbnz	r0, 80087b2 <_strtod_l+0x78a>
 8008778:	f04f 0900 	mov.w	r9, #0
 800877c:	e66f      	b.n	800845e <_strtod_l+0x436>
 800877e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008782:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008786:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800878a:	35e2      	adds	r5, #226	@ 0xe2
 800878c:	fa01 f305 	lsl.w	r3, r1, r5
 8008790:	9310      	str	r3, [sp, #64]	@ 0x40
 8008792:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008794:	e7ba      	b.n	800870c <_strtod_l+0x6e4>
 8008796:	2300      	movs	r3, #0
 8008798:	9310      	str	r3, [sp, #64]	@ 0x40
 800879a:	2301      	movs	r3, #1
 800879c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800879e:	e7b5      	b.n	800870c <_strtod_l+0x6e4>
 80087a0:	462a      	mov	r2, r5
 80087a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087a4:	9805      	ldr	r0, [sp, #20]
 80087a6:	f7ff f9cb 	bl	8007b40 <__lshift>
 80087aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1d9      	bne.n	8008764 <_strtod_l+0x73c>
 80087b0:	e655      	b.n	800845e <_strtod_l+0x436>
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	dd07      	ble.n	80087c6 <_strtod_l+0x79e>
 80087b6:	4649      	mov	r1, r9
 80087b8:	4632      	mov	r2, r6
 80087ba:	9805      	ldr	r0, [sp, #20]
 80087bc:	f7ff f9c0 	bl	8007b40 <__lshift>
 80087c0:	4681      	mov	r9, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d0d8      	beq.n	8008778 <_strtod_l+0x750>
 80087c6:	2f00      	cmp	r7, #0
 80087c8:	dd08      	ble.n	80087dc <_strtod_l+0x7b4>
 80087ca:	4641      	mov	r1, r8
 80087cc:	463a      	mov	r2, r7
 80087ce:	9805      	ldr	r0, [sp, #20]
 80087d0:	f7ff f9b6 	bl	8007b40 <__lshift>
 80087d4:	4680      	mov	r8, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f ae41 	beq.w	800845e <_strtod_l+0x436>
 80087dc:	464a      	mov	r2, r9
 80087de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087e0:	9805      	ldr	r0, [sp, #20]
 80087e2:	f7ff fa35 	bl	8007c50 <__mdiff>
 80087e6:	4604      	mov	r4, r0
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f43f ae38 	beq.w	800845e <_strtod_l+0x436>
 80087ee:	68c3      	ldr	r3, [r0, #12]
 80087f0:	4641      	mov	r1, r8
 80087f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087f4:	2300      	movs	r3, #0
 80087f6:	60c3      	str	r3, [r0, #12]
 80087f8:	f7ff fa0e 	bl	8007c18 <__mcmp>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	da45      	bge.n	800888c <_strtod_l+0x864>
 8008800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008802:	ea53 030a 	orrs.w	r3, r3, sl
 8008806:	d16b      	bne.n	80088e0 <_strtod_l+0x8b8>
 8008808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800880c:	2b00      	cmp	r3, #0
 800880e:	d167      	bne.n	80088e0 <_strtod_l+0x8b8>
 8008810:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008814:	0d1b      	lsrs	r3, r3, #20
 8008816:	051b      	lsls	r3, r3, #20
 8008818:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800881c:	d960      	bls.n	80088e0 <_strtod_l+0x8b8>
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	b913      	cbnz	r3, 8008828 <_strtod_l+0x800>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	2b01      	cmp	r3, #1
 8008826:	dd5b      	ble.n	80088e0 <_strtod_l+0x8b8>
 8008828:	4621      	mov	r1, r4
 800882a:	2201      	movs	r2, #1
 800882c:	9805      	ldr	r0, [sp, #20]
 800882e:	f7ff f987 	bl	8007b40 <__lshift>
 8008832:	4641      	mov	r1, r8
 8008834:	4604      	mov	r4, r0
 8008836:	f7ff f9ef 	bl	8007c18 <__mcmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	dd50      	ble.n	80088e0 <_strtod_l+0x8b8>
 800883e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008842:	9a08      	ldr	r2, [sp, #32]
 8008844:	0d1b      	lsrs	r3, r3, #20
 8008846:	051b      	lsls	r3, r3, #20
 8008848:	2a00      	cmp	r2, #0
 800884a:	d06a      	beq.n	8008922 <_strtod_l+0x8fa>
 800884c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008850:	d867      	bhi.n	8008922 <_strtod_l+0x8fa>
 8008852:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008856:	f67f ae98 	bls.w	800858a <_strtod_l+0x562>
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <_strtod_l+0x85c>)
 8008860:	2200      	movs	r2, #0
 8008862:	f7f7 fe39 	bl	80004d8 <__aeabi_dmul>
 8008866:	4b08      	ldr	r3, [pc, #32]	@ (8008888 <_strtod_l+0x860>)
 8008868:	4682      	mov	sl, r0
 800886a:	400b      	ands	r3, r1
 800886c:	468b      	mov	fp, r1
 800886e:	2b00      	cmp	r3, #0
 8008870:	f47f ae00 	bne.w	8008474 <_strtod_l+0x44c>
 8008874:	2322      	movs	r3, #34	@ 0x22
 8008876:	9a05      	ldr	r2, [sp, #20]
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e5fb      	b.n	8008474 <_strtod_l+0x44c>
 800887c:	0800a7e0 	.word	0x0800a7e0
 8008880:	fffffc02 	.word	0xfffffc02
 8008884:	39500000 	.word	0x39500000
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008890:	d165      	bne.n	800895e <_strtod_l+0x936>
 8008892:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008898:	b35a      	cbz	r2, 80088f2 <_strtod_l+0x8ca>
 800889a:	4a99      	ldr	r2, [pc, #612]	@ (8008b00 <_strtod_l+0xad8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d12b      	bne.n	80088f8 <_strtod_l+0x8d0>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	4651      	mov	r1, sl
 80088a4:	b303      	cbz	r3, 80088e8 <_strtod_l+0x8c0>
 80088a6:	465a      	mov	r2, fp
 80088a8:	4b96      	ldr	r3, [pc, #600]	@ (8008b04 <_strtod_l+0xadc>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088b4:	d81b      	bhi.n	80088ee <_strtod_l+0x8c6>
 80088b6:	0d1b      	lsrs	r3, r3, #20
 80088b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d119      	bne.n	80088f8 <_strtod_l+0x8d0>
 80088c4:	4b90      	ldr	r3, [pc, #576]	@ (8008b08 <_strtod_l+0xae0>)
 80088c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d102      	bne.n	80088d2 <_strtod_l+0x8aa>
 80088cc:	3101      	adds	r1, #1
 80088ce:	f43f adc6 	beq.w	800845e <_strtod_l+0x436>
 80088d2:	f04f 0a00 	mov.w	sl, #0
 80088d6:	4b8b      	ldr	r3, [pc, #556]	@ (8008b04 <_strtod_l+0xadc>)
 80088d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088da:	401a      	ands	r2, r3
 80088dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1b9      	bne.n	800885a <_strtod_l+0x832>
 80088e6:	e5c5      	b.n	8008474 <_strtod_l+0x44c>
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ec:	e7e8      	b.n	80088c0 <_strtod_l+0x898>
 80088ee:	4613      	mov	r3, r2
 80088f0:	e7e6      	b.n	80088c0 <_strtod_l+0x898>
 80088f2:	ea53 030a 	orrs.w	r3, r3, sl
 80088f6:	d0a2      	beq.n	800883e <_strtod_l+0x816>
 80088f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088fa:	b1db      	cbz	r3, 8008934 <_strtod_l+0x90c>
 80088fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088fe:	4213      	tst	r3, r2
 8008900:	d0ee      	beq.n	80088e0 <_strtod_l+0x8b8>
 8008902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008904:	4650      	mov	r0, sl
 8008906:	4659      	mov	r1, fp
 8008908:	9a08      	ldr	r2, [sp, #32]
 800890a:	b1bb      	cbz	r3, 800893c <_strtod_l+0x914>
 800890c:	f7ff fb68 	bl	8007fe0 <sulp>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008918:	f7f7 fc28 	bl	800016c <__adddf3>
 800891c:	4682      	mov	sl, r0
 800891e:	468b      	mov	fp, r1
 8008920:	e7de      	b.n	80088e0 <_strtod_l+0x8b8>
 8008922:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008926:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800892a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800892e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008932:	e7d5      	b.n	80088e0 <_strtod_l+0x8b8>
 8008934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008936:	ea13 0f0a 	tst.w	r3, sl
 800893a:	e7e1      	b.n	8008900 <_strtod_l+0x8d8>
 800893c:	f7ff fb50 	bl	8007fe0 <sulp>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008948:	f7f7 fc0e 	bl	8000168 <__aeabi_dsub>
 800894c:	2200      	movs	r2, #0
 800894e:	2300      	movs	r3, #0
 8008950:	4682      	mov	sl, r0
 8008952:	468b      	mov	fp, r1
 8008954:	f7f8 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8008958:	2800      	cmp	r0, #0
 800895a:	d0c1      	beq.n	80088e0 <_strtod_l+0x8b8>
 800895c:	e615      	b.n	800858a <_strtod_l+0x562>
 800895e:	4641      	mov	r1, r8
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff fac9 	bl	8007ef8 <__ratio>
 8008966:	2200      	movs	r2, #0
 8008968:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800896c:	4606      	mov	r6, r0
 800896e:	460f      	mov	r7, r1
 8008970:	f7f8 f82e 	bl	80009d0 <__aeabi_dcmple>
 8008974:	2800      	cmp	r0, #0
 8008976:	d06d      	beq.n	8008a54 <_strtod_l+0xa2c>
 8008978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d178      	bne.n	8008a70 <_strtod_l+0xa48>
 800897e:	f1ba 0f00 	cmp.w	sl, #0
 8008982:	d156      	bne.n	8008a32 <_strtod_l+0xa0a>
 8008984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898a:	2b00      	cmp	r3, #0
 800898c:	d158      	bne.n	8008a40 <_strtod_l+0xa18>
 800898e:	2200      	movs	r2, #0
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	4b5d      	ldr	r3, [pc, #372]	@ (8008b0c <_strtod_l+0xae4>)
 8008996:	f7f8 f811 	bl	80009bc <__aeabi_dcmplt>
 800899a:	2800      	cmp	r0, #0
 800899c:	d157      	bne.n	8008a4e <_strtod_l+0xa26>
 800899e:	4630      	mov	r0, r6
 80089a0:	4639      	mov	r1, r7
 80089a2:	2200      	movs	r2, #0
 80089a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008b10 <_strtod_l+0xae8>)
 80089a6:	f7f7 fd97 	bl	80004d8 <__aeabi_dmul>
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80089b2:	9606      	str	r6, [sp, #24]
 80089b4:	9307      	str	r3, [sp, #28]
 80089b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089ba:	4d52      	ldr	r5, [pc, #328]	@ (8008b04 <_strtod_l+0xadc>)
 80089bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c2:	401d      	ands	r5, r3
 80089c4:	4b53      	ldr	r3, [pc, #332]	@ (8008b14 <_strtod_l+0xaec>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	f040 80aa 	bne.w	8008b20 <_strtod_l+0xaf8>
 80089cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ce:	4650      	mov	r0, sl
 80089d0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80089d4:	4659      	mov	r1, fp
 80089d6:	f7ff f9cf 	bl	8007d78 <__ulp>
 80089da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089de:	f7f7 fd7b 	bl	80004d8 <__aeabi_dmul>
 80089e2:	4652      	mov	r2, sl
 80089e4:	465b      	mov	r3, fp
 80089e6:	f7f7 fbc1 	bl	800016c <__adddf3>
 80089ea:	460b      	mov	r3, r1
 80089ec:	4945      	ldr	r1, [pc, #276]	@ (8008b04 <_strtod_l+0xadc>)
 80089ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008b18 <_strtod_l+0xaf0>)
 80089f0:	4019      	ands	r1, r3
 80089f2:	4291      	cmp	r1, r2
 80089f4:	4682      	mov	sl, r0
 80089f6:	d942      	bls.n	8008a7e <_strtod_l+0xa56>
 80089f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089fa:	4b43      	ldr	r3, [pc, #268]	@ (8008b08 <_strtod_l+0xae0>)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d103      	bne.n	8008a08 <_strtod_l+0x9e0>
 8008a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a02:	3301      	adds	r3, #1
 8008a04:	f43f ad2b 	beq.w	800845e <_strtod_l+0x436>
 8008a08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a0c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008b08 <_strtod_l+0xae0>
 8008a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a12:	9805      	ldr	r0, [sp, #20]
 8008a14:	f7fe fe7e 	bl	8007714 <_Bfree>
 8008a18:	4649      	mov	r1, r9
 8008a1a:	9805      	ldr	r0, [sp, #20]
 8008a1c:	f7fe fe7a 	bl	8007714 <_Bfree>
 8008a20:	4641      	mov	r1, r8
 8008a22:	9805      	ldr	r0, [sp, #20]
 8008a24:	f7fe fe76 	bl	8007714 <_Bfree>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	9805      	ldr	r0, [sp, #20]
 8008a2c:	f7fe fe72 	bl	8007714 <_Bfree>
 8008a30:	e618      	b.n	8008664 <_strtod_l+0x63c>
 8008a32:	f1ba 0f01 	cmp.w	sl, #1
 8008a36:	d103      	bne.n	8008a40 <_strtod_l+0xa18>
 8008a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f43f ada5 	beq.w	800858a <_strtod_l+0x562>
 8008a40:	2200      	movs	r2, #0
 8008a42:	4b36      	ldr	r3, [pc, #216]	@ (8008b1c <_strtod_l+0xaf4>)
 8008a44:	2600      	movs	r6, #0
 8008a46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a4a:	4f30      	ldr	r7, [pc, #192]	@ (8008b0c <_strtod_l+0xae4>)
 8008a4c:	e7b3      	b.n	80089b6 <_strtod_l+0x98e>
 8008a4e:	2600      	movs	r6, #0
 8008a50:	4f2f      	ldr	r7, [pc, #188]	@ (8008b10 <_strtod_l+0xae8>)
 8008a52:	e7ac      	b.n	80089ae <_strtod_l+0x986>
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	4b2d      	ldr	r3, [pc, #180]	@ (8008b10 <_strtod_l+0xae8>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f7f7 fd3c 	bl	80004d8 <__aeabi_dmul>
 8008a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0a1      	beq.n	80089ae <_strtod_l+0x986>
 8008a6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a6e:	e7a2      	b.n	80089b6 <_strtod_l+0x98e>
 8008a70:	2200      	movs	r2, #0
 8008a72:	4b26      	ldr	r3, [pc, #152]	@ (8008b0c <_strtod_l+0xae4>)
 8008a74:	4616      	mov	r6, r2
 8008a76:	461f      	mov	r7, r3
 8008a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008a7c:	e79b      	b.n	80089b6 <_strtod_l+0x98e>
 8008a7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a82:	9b08      	ldr	r3, [sp, #32]
 8008a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1c1      	bne.n	8008a10 <_strtod_l+0x9e8>
 8008a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a90:	0d1b      	lsrs	r3, r3, #20
 8008a92:	051b      	lsls	r3, r3, #20
 8008a94:	429d      	cmp	r5, r3
 8008a96:	d1bb      	bne.n	8008a10 <_strtod_l+0x9e8>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f7f8 fb5e 	bl	800115c <__aeabi_d2lz>
 8008aa0:	f7f7 fcec 	bl	800047c <__aeabi_l2d>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fb5c 	bl	8000168 <__aeabi_dsub>
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ab8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008abe:	ea46 060a 	orr.w	r6, r6, sl
 8008ac2:	431e      	orrs	r6, r3
 8008ac4:	d069      	beq.n	8008b9a <_strtod_l+0xb72>
 8008ac6:	a30a      	add	r3, pc, #40	@ (adr r3, 8008af0 <_strtod_l+0xac8>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 ff76 	bl	80009bc <__aeabi_dcmplt>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f47f accf 	bne.w	8008474 <_strtod_l+0x44c>
 8008ad6:	a308      	add	r3, pc, #32	@ (adr r3, 8008af8 <_strtod_l+0xad0>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae0:	f7f7 ff8a 	bl	80009f8 <__aeabi_dcmpgt>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d093      	beq.n	8008a10 <_strtod_l+0x9e8>
 8008ae8:	e4c4      	b.n	8008474 <_strtod_l+0x44c>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	94a03595 	.word	0x94a03595
 8008af4:	3fdfffff 	.word	0x3fdfffff
 8008af8:	35afe535 	.word	0x35afe535
 8008afc:	3fe00000 	.word	0x3fe00000
 8008b00:	000fffff 	.word	0x000fffff
 8008b04:	7ff00000 	.word	0x7ff00000
 8008b08:	7fefffff 	.word	0x7fefffff
 8008b0c:	3ff00000 	.word	0x3ff00000
 8008b10:	3fe00000 	.word	0x3fe00000
 8008b14:	7fe00000 	.word	0x7fe00000
 8008b18:	7c9fffff 	.word	0x7c9fffff
 8008b1c:	bff00000 	.word	0xbff00000
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	b323      	cbz	r3, 8008b6e <_strtod_l+0xb46>
 8008b24:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b28:	d821      	bhi.n	8008b6e <_strtod_l+0xb46>
 8008b2a:	a327      	add	r3, pc, #156	@ (adr r3, 8008bc8 <_strtod_l+0xba0>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ff4c 	bl	80009d0 <__aeabi_dcmple>
 8008b38:	b1a0      	cbz	r0, 8008b64 <_strtod_l+0xb3c>
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7f7 ffa3 	bl	8000a88 <__aeabi_d2uiz>
 8008b42:	2801      	cmp	r0, #1
 8008b44:	bf38      	it	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	f7f7 fc4c 	bl	80003e4 <__aeabi_ui2d>
 8008b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460f      	mov	r7, r1
 8008b52:	b9fb      	cbnz	r3, 8008b94 <_strtod_l+0xb6c>
 8008b54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b58:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b5a:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b66:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b6a:	1b5b      	subs	r3, r3, r5
 8008b6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b72:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b76:	f7ff f8ff 	bl	8007d78 <__ulp>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4650      	mov	r0, sl
 8008b80:	4659      	mov	r1, fp
 8008b82:	f7f7 fca9 	bl	80004d8 <__aeabi_dmul>
 8008b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b8a:	f7f7 faef 	bl	800016c <__adddf3>
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	e776      	b.n	8008a82 <_strtod_l+0xa5a>
 8008b94:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b98:	e7e0      	b.n	8008b5c <_strtod_l+0xb34>
 8008b9a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008bd0 <_strtod_l+0xba8>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f7f7 ff0c 	bl	80009bc <__aeabi_dcmplt>
 8008ba4:	e79e      	b.n	8008ae4 <_strtod_l+0xabc>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008baa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	f7ff ba77 	b.w	80080a2 <_strtod_l+0x7a>
 8008bb4:	2a65      	cmp	r2, #101	@ 0x65
 8008bb6:	f43f ab6e 	beq.w	8008296 <_strtod_l+0x26e>
 8008bba:	2a45      	cmp	r2, #69	@ 0x45
 8008bbc:	f43f ab6b 	beq.w	8008296 <_strtod_l+0x26e>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f7ff bba6 	b.w	8008312 <_strtod_l+0x2ea>
 8008bc6:	bf00      	nop
 8008bc8:	ffc00000 	.word	0xffc00000
 8008bcc:	41dfffff 	.word	0x41dfffff
 8008bd0:	94a03595 	.word	0x94a03595
 8008bd4:	3fcfffff 	.word	0x3fcfffff

08008bd8 <_strtod_r>:
 8008bd8:	4b01      	ldr	r3, [pc, #4]	@ (8008be0 <_strtod_r+0x8>)
 8008bda:	f7ff ba25 	b.w	8008028 <_strtod_l>
 8008bde:	bf00      	nop
 8008be0:	200000f8 	.word	0x200000f8

08008be4 <_strtol_l.constprop.0>:
 8008be4:	2b24      	cmp	r3, #36	@ 0x24
 8008be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bea:	4686      	mov	lr, r0
 8008bec:	4690      	mov	r8, r2
 8008bee:	d801      	bhi.n	8008bf4 <_strtol_l.constprop.0+0x10>
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d106      	bne.n	8008c02 <_strtol_l.constprop.0+0x1e>
 8008bf4:	f7fd fdc0 	bl	8006778 <__errno>
 8008bf8:	2316      	movs	r3, #22
 8008bfa:	6003      	str	r3, [r0, #0]
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	460d      	mov	r5, r1
 8008c04:	4833      	ldr	r0, [pc, #204]	@ (8008cd4 <_strtol_l.constprop.0+0xf0>)
 8008c06:	462a      	mov	r2, r5
 8008c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c0c:	5d06      	ldrb	r6, [r0, r4]
 8008c0e:	f016 0608 	ands.w	r6, r6, #8
 8008c12:	d1f8      	bne.n	8008c06 <_strtol_l.constprop.0+0x22>
 8008c14:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c16:	d12d      	bne.n	8008c74 <_strtol_l.constprop.0+0x90>
 8008c18:	2601      	movs	r6, #1
 8008c1a:	782c      	ldrb	r4, [r5, #0]
 8008c1c:	1c95      	adds	r5, r2, #2
 8008c1e:	f033 0210 	bics.w	r2, r3, #16
 8008c22:	d109      	bne.n	8008c38 <_strtol_l.constprop.0+0x54>
 8008c24:	2c30      	cmp	r4, #48	@ 0x30
 8008c26:	d12a      	bne.n	8008c7e <_strtol_l.constprop.0+0x9a>
 8008c28:	782a      	ldrb	r2, [r5, #0]
 8008c2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c2e:	2a58      	cmp	r2, #88	@ 0x58
 8008c30:	d125      	bne.n	8008c7e <_strtol_l.constprop.0+0x9a>
 8008c32:	2310      	movs	r3, #16
 8008c34:	786c      	ldrb	r4, [r5, #1]
 8008c36:	3502      	adds	r5, #2
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c3e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008c42:	fbbc f9f3 	udiv	r9, ip, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c50:	2f09      	cmp	r7, #9
 8008c52:	d81b      	bhi.n	8008c8c <_strtol_l.constprop.0+0xa8>
 8008c54:	463c      	mov	r4, r7
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	dd27      	ble.n	8008caa <_strtol_l.constprop.0+0xc6>
 8008c5a:	1c57      	adds	r7, r2, #1
 8008c5c:	d007      	beq.n	8008c6e <_strtol_l.constprop.0+0x8a>
 8008c5e:	4581      	cmp	r9, r0
 8008c60:	d320      	bcc.n	8008ca4 <_strtol_l.constprop.0+0xc0>
 8008c62:	d101      	bne.n	8008c68 <_strtol_l.constprop.0+0x84>
 8008c64:	45a2      	cmp	sl, r4
 8008c66:	db1d      	blt.n	8008ca4 <_strtol_l.constprop.0+0xc0>
 8008c68:	2201      	movs	r2, #1
 8008c6a:	fb00 4003 	mla	r0, r0, r3, r4
 8008c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c72:	e7eb      	b.n	8008c4c <_strtol_l.constprop.0+0x68>
 8008c74:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c76:	bf04      	itt	eq
 8008c78:	782c      	ldrbeq	r4, [r5, #0]
 8008c7a:	1c95      	addeq	r5, r2, #2
 8008c7c:	e7cf      	b.n	8008c1e <_strtol_l.constprop.0+0x3a>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1da      	bne.n	8008c38 <_strtol_l.constprop.0+0x54>
 8008c82:	2c30      	cmp	r4, #48	@ 0x30
 8008c84:	bf0c      	ite	eq
 8008c86:	2308      	moveq	r3, #8
 8008c88:	230a      	movne	r3, #10
 8008c8a:	e7d5      	b.n	8008c38 <_strtol_l.constprop.0+0x54>
 8008c8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c90:	2f19      	cmp	r7, #25
 8008c92:	d801      	bhi.n	8008c98 <_strtol_l.constprop.0+0xb4>
 8008c94:	3c37      	subs	r4, #55	@ 0x37
 8008c96:	e7de      	b.n	8008c56 <_strtol_l.constprop.0+0x72>
 8008c98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c9c:	2f19      	cmp	r7, #25
 8008c9e:	d804      	bhi.n	8008caa <_strtol_l.constprop.0+0xc6>
 8008ca0:	3c57      	subs	r4, #87	@ 0x57
 8008ca2:	e7d8      	b.n	8008c56 <_strtol_l.constprop.0+0x72>
 8008ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ca8:	e7e1      	b.n	8008c6e <_strtol_l.constprop.0+0x8a>
 8008caa:	1c53      	adds	r3, r2, #1
 8008cac:	d108      	bne.n	8008cc0 <_strtol_l.constprop.0+0xdc>
 8008cae:	2322      	movs	r3, #34	@ 0x22
 8008cb0:	4660      	mov	r0, ip
 8008cb2:	f8ce 3000 	str.w	r3, [lr]
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	d0a0      	beq.n	8008bfe <_strtol_l.constprop.0+0x1a>
 8008cbc:	1e69      	subs	r1, r5, #1
 8008cbe:	e006      	b.n	8008cce <_strtol_l.constprop.0+0xea>
 8008cc0:	b106      	cbz	r6, 8008cc4 <_strtol_l.constprop.0+0xe0>
 8008cc2:	4240      	negs	r0, r0
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	d099      	beq.n	8008bfe <_strtol_l.constprop.0+0x1a>
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d1f6      	bne.n	8008cbc <_strtol_l.constprop.0+0xd8>
 8008cce:	f8c8 1000 	str.w	r1, [r8]
 8008cd2:	e794      	b.n	8008bfe <_strtol_l.constprop.0+0x1a>
 8008cd4:	0800a809 	.word	0x0800a809

08008cd8 <_strtol_r>:
 8008cd8:	f7ff bf84 	b.w	8008be4 <_strtol_l.constprop.0>

08008cdc <__ssputs_r>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	461f      	mov	r7, r3
 8008ce2:	688e      	ldr	r6, [r1, #8]
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	42be      	cmp	r6, r7
 8008ce8:	460c      	mov	r4, r1
 8008cea:	4690      	mov	r8, r2
 8008cec:	680b      	ldr	r3, [r1, #0]
 8008cee:	d82d      	bhi.n	8008d4c <__ssputs_r+0x70>
 8008cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cf8:	d026      	beq.n	8008d48 <__ssputs_r+0x6c>
 8008cfa:	6965      	ldr	r5, [r4, #20]
 8008cfc:	6909      	ldr	r1, [r1, #16]
 8008cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d02:	eba3 0901 	sub.w	r9, r3, r1
 8008d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d0a:	1c7b      	adds	r3, r7, #1
 8008d0c:	444b      	add	r3, r9
 8008d0e:	106d      	asrs	r5, r5, #1
 8008d10:	429d      	cmp	r5, r3
 8008d12:	bf38      	it	cc
 8008d14:	461d      	movcc	r5, r3
 8008d16:	0553      	lsls	r3, r2, #21
 8008d18:	d527      	bpl.n	8008d6a <__ssputs_r+0x8e>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7fe fc2e 	bl	800757c <_malloc_r>
 8008d20:	4606      	mov	r6, r0
 8008d22:	b360      	cbz	r0, 8008d7e <__ssputs_r+0xa2>
 8008d24:	464a      	mov	r2, r9
 8008d26:	6921      	ldr	r1, [r4, #16]
 8008d28:	f000 fa14 	bl	8009154 <memcpy>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	6126      	str	r6, [r4, #16]
 8008d3a:	444e      	add	r6, r9
 8008d3c:	6026      	str	r6, [r4, #0]
 8008d3e:	463e      	mov	r6, r7
 8008d40:	6165      	str	r5, [r4, #20]
 8008d42:	eba5 0509 	sub.w	r5, r5, r9
 8008d46:	60a5      	str	r5, [r4, #8]
 8008d48:	42be      	cmp	r6, r7
 8008d4a:	d900      	bls.n	8008d4e <__ssputs_r+0x72>
 8008d4c:	463e      	mov	r6, r7
 8008d4e:	4632      	mov	r2, r6
 8008d50:	4641      	mov	r1, r8
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	f000 f9c2 	bl	80090dc <memmove>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	1b9b      	subs	r3, r3, r6
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	4433      	add	r3, r6
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	f000 fd83 	bl	8009876 <_realloc_r>
 8008d70:	4606      	mov	r6, r0
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d1e0      	bne.n	8008d38 <__ssputs_r+0x5c>
 8008d76:	4650      	mov	r0, sl
 8008d78:	6921      	ldr	r1, [r4, #16]
 8008d7a:	f7fe fb8d 	bl	8007498 <_free_r>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	f8ca 3000 	str.w	r3, [sl]
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	e7e9      	b.n	8008d66 <__ssputs_r+0x8a>
	...

08008d94 <_svfiprintf_r>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	4698      	mov	r8, r3
 8008d9a:	898b      	ldrh	r3, [r1, #12]
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	061b      	lsls	r3, r3, #24
 8008da0:	460d      	mov	r5, r1
 8008da2:	4614      	mov	r4, r2
 8008da4:	b09d      	sub	sp, #116	@ 0x74
 8008da6:	d510      	bpl.n	8008dca <_svfiprintf_r+0x36>
 8008da8:	690b      	ldr	r3, [r1, #16]
 8008daa:	b973      	cbnz	r3, 8008dca <_svfiprintf_r+0x36>
 8008dac:	2140      	movs	r1, #64	@ 0x40
 8008dae:	f7fe fbe5 	bl	800757c <_malloc_r>
 8008db2:	6028      	str	r0, [r5, #0]
 8008db4:	6128      	str	r0, [r5, #16]
 8008db6:	b930      	cbnz	r0, 8008dc6 <_svfiprintf_r+0x32>
 8008db8:	230c      	movs	r3, #12
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dc0:	b01d      	add	sp, #116	@ 0x74
 8008dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc6:	2340      	movs	r3, #64	@ 0x40
 8008dc8:	616b      	str	r3, [r5, #20]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dce:	2320      	movs	r3, #32
 8008dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dd4:	2330      	movs	r3, #48	@ 0x30
 8008dd6:	f04f 0901 	mov.w	r9, #1
 8008dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008f78 <_svfiprintf_r+0x1e4>
 8008de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008de6:	4623      	mov	r3, r4
 8008de8:	469a      	mov	sl, r3
 8008dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dee:	b10a      	cbz	r2, 8008df4 <_svfiprintf_r+0x60>
 8008df0:	2a25      	cmp	r2, #37	@ 0x25
 8008df2:	d1f9      	bne.n	8008de8 <_svfiprintf_r+0x54>
 8008df4:	ebba 0b04 	subs.w	fp, sl, r4
 8008df8:	d00b      	beq.n	8008e12 <_svfiprintf_r+0x7e>
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4638      	mov	r0, r7
 8008e02:	f7ff ff6b 	bl	8008cdc <__ssputs_r>
 8008e06:	3001      	adds	r0, #1
 8008e08:	f000 80a7 	beq.w	8008f5a <_svfiprintf_r+0x1c6>
 8008e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e0e:	445a      	add	r2, fp
 8008e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e12:	f89a 3000 	ldrb.w	r3, [sl]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 809f 	beq.w	8008f5a <_svfiprintf_r+0x1c6>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e26:	f10a 0a01 	add.w	sl, sl, #1
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	9307      	str	r3, [sp, #28]
 8008e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e34:	4654      	mov	r4, sl
 8008e36:	2205      	movs	r2, #5
 8008e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3c:	484e      	ldr	r0, [pc, #312]	@ (8008f78 <_svfiprintf_r+0x1e4>)
 8008e3e:	f7fd fcc8 	bl	80067d2 <memchr>
 8008e42:	9a04      	ldr	r2, [sp, #16]
 8008e44:	b9d8      	cbnz	r0, 8008e7e <_svfiprintf_r+0xea>
 8008e46:	06d0      	lsls	r0, r2, #27
 8008e48:	bf44      	itt	mi
 8008e4a:	2320      	movmi	r3, #32
 8008e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e50:	0711      	lsls	r1, r2, #28
 8008e52:	bf44      	itt	mi
 8008e54:	232b      	movmi	r3, #43	@ 0x2b
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e60:	d015      	beq.n	8008e8e <_svfiprintf_r+0xfa>
 8008e62:	4654      	mov	r4, sl
 8008e64:	2000      	movs	r0, #0
 8008e66:	f04f 0c0a 	mov.w	ip, #10
 8008e6a:	9a07      	ldr	r2, [sp, #28]
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e72:	3b30      	subs	r3, #48	@ 0x30
 8008e74:	2b09      	cmp	r3, #9
 8008e76:	d94b      	bls.n	8008f10 <_svfiprintf_r+0x17c>
 8008e78:	b1b0      	cbz	r0, 8008ea8 <_svfiprintf_r+0x114>
 8008e7a:	9207      	str	r2, [sp, #28]
 8008e7c:	e014      	b.n	8008ea8 <_svfiprintf_r+0x114>
 8008e7e:	eba0 0308 	sub.w	r3, r0, r8
 8008e82:	fa09 f303 	lsl.w	r3, r9, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	46a2      	mov	sl, r4
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	e7d2      	b.n	8008e34 <_svfiprintf_r+0xa0>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	1d19      	adds	r1, r3, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	9103      	str	r1, [sp, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbb      	ittet	lt
 8008e9a:	425b      	neglt	r3, r3
 8008e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea0:	9307      	strge	r3, [sp, #28]
 8008ea2:	9307      	strlt	r3, [sp, #28]
 8008ea4:	bfb8      	it	lt
 8008ea6:	9204      	strlt	r2, [sp, #16]
 8008ea8:	7823      	ldrb	r3, [r4, #0]
 8008eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eac:	d10a      	bne.n	8008ec4 <_svfiprintf_r+0x130>
 8008eae:	7863      	ldrb	r3, [r4, #1]
 8008eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb2:	d132      	bne.n	8008f1a <_svfiprintf_r+0x186>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	3402      	adds	r4, #2
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9203      	str	r2, [sp, #12]
 8008ebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f7c <_svfiprintf_r+0x1e8>
 8008ec8:	2203      	movs	r2, #3
 8008eca:	4650      	mov	r0, sl
 8008ecc:	7821      	ldrb	r1, [r4, #0]
 8008ece:	f7fd fc80 	bl	80067d2 <memchr>
 8008ed2:	b138      	cbz	r0, 8008ee4 <_svfiprintf_r+0x150>
 8008ed4:	2240      	movs	r2, #64	@ 0x40
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	eba0 000a 	sub.w	r0, r0, sl
 8008edc:	4082      	lsls	r2, r0
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	3401      	adds	r4, #1
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	2206      	movs	r2, #6
 8008eea:	4825      	ldr	r0, [pc, #148]	@ (8008f80 <_svfiprintf_r+0x1ec>)
 8008eec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ef0:	f7fd fc6f 	bl	80067d2 <memchr>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d036      	beq.n	8008f66 <_svfiprintf_r+0x1d2>
 8008ef8:	4b22      	ldr	r3, [pc, #136]	@ (8008f84 <_svfiprintf_r+0x1f0>)
 8008efa:	bb1b      	cbnz	r3, 8008f44 <_svfiprintf_r+0x1b0>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	3307      	adds	r3, #7
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	3308      	adds	r3, #8
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0a:	4433      	add	r3, r6
 8008f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0e:	e76a      	b.n	8008de6 <_svfiprintf_r+0x52>
 8008f10:	460c      	mov	r4, r1
 8008f12:	2001      	movs	r0, #1
 8008f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f18:	e7a8      	b.n	8008e6c <_svfiprintf_r+0xd8>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 0c0a 	mov.w	ip, #10
 8008f20:	4619      	mov	r1, r3
 8008f22:	3401      	adds	r4, #1
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2c:	3a30      	subs	r2, #48	@ 0x30
 8008f2e:	2a09      	cmp	r2, #9
 8008f30:	d903      	bls.n	8008f3a <_svfiprintf_r+0x1a6>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c6      	beq.n	8008ec4 <_svfiprintf_r+0x130>
 8008f36:	9105      	str	r1, [sp, #20]
 8008f38:	e7c4      	b.n	8008ec4 <_svfiprintf_r+0x130>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f42:	e7f0      	b.n	8008f26 <_svfiprintf_r+0x192>
 8008f44:	ab03      	add	r3, sp, #12
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <_svfiprintf_r+0x1f4>)
 8008f4e:	a904      	add	r1, sp, #16
 8008f50:	f7fc fccc 	bl	80058ec <_printf_float>
 8008f54:	1c42      	adds	r2, r0, #1
 8008f56:	4606      	mov	r6, r0
 8008f58:	d1d6      	bne.n	8008f08 <_svfiprintf_r+0x174>
 8008f5a:	89ab      	ldrh	r3, [r5, #12]
 8008f5c:	065b      	lsls	r3, r3, #25
 8008f5e:	f53f af2d 	bmi.w	8008dbc <_svfiprintf_r+0x28>
 8008f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f64:	e72c      	b.n	8008dc0 <_svfiprintf_r+0x2c>
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <_svfiprintf_r+0x1f4>)
 8008f70:	a904      	add	r1, sp, #16
 8008f72:	f7fc ff59 	bl	8005e28 <_printf_i>
 8008f76:	e7ed      	b.n	8008f54 <_svfiprintf_r+0x1c0>
 8008f78:	0800a909 	.word	0x0800a909
 8008f7c:	0800a90f 	.word	0x0800a90f
 8008f80:	0800a913 	.word	0x0800a913
 8008f84:	080058ed 	.word	0x080058ed
 8008f88:	08008cdd 	.word	0x08008cdd

08008f8c <__sflush_r>:
 8008f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	0716      	lsls	r6, r2, #28
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	d454      	bmi.n	8009044 <__sflush_r+0xb8>
 8008f9a:	684b      	ldr	r3, [r1, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc02      	bgt.n	8008fa6 <__sflush_r+0x1a>
 8008fa0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dd48      	ble.n	8009038 <__sflush_r+0xac>
 8008fa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fa8:	2e00      	cmp	r6, #0
 8008faa:	d045      	beq.n	8009038 <__sflush_r+0xac>
 8008fac:	2300      	movs	r3, #0
 8008fae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fb2:	682f      	ldr	r7, [r5, #0]
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	d030      	beq.n	800901c <__sflush_r+0x90>
 8008fba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	0759      	lsls	r1, r3, #29
 8008fc0:	d505      	bpl.n	8008fce <__sflush_r+0x42>
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fc8:	b10b      	cbz	r3, 8008fce <__sflush_r+0x42>
 8008fca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fd4:	6a21      	ldr	r1, [r4, #32]
 8008fd6:	47b0      	blx	r6
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	d106      	bne.n	8008fec <__sflush_r+0x60>
 8008fde:	6829      	ldr	r1, [r5, #0]
 8008fe0:	291d      	cmp	r1, #29
 8008fe2:	d82b      	bhi.n	800903c <__sflush_r+0xb0>
 8008fe4:	4a28      	ldr	r2, [pc, #160]	@ (8009088 <__sflush_r+0xfc>)
 8008fe6:	410a      	asrs	r2, r1
 8008fe8:	07d6      	lsls	r6, r2, #31
 8008fea:	d427      	bmi.n	800903c <__sflush_r+0xb0>
 8008fec:	2200      	movs	r2, #0
 8008fee:	6062      	str	r2, [r4, #4]
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	04d9      	lsls	r1, r3, #19
 8008ff4:	6022      	str	r2, [r4, #0]
 8008ff6:	d504      	bpl.n	8009002 <__sflush_r+0x76>
 8008ff8:	1c42      	adds	r2, r0, #1
 8008ffa:	d101      	bne.n	8009000 <__sflush_r+0x74>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b903      	cbnz	r3, 8009002 <__sflush_r+0x76>
 8009000:	6560      	str	r0, [r4, #84]	@ 0x54
 8009002:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009004:	602f      	str	r7, [r5, #0]
 8009006:	b1b9      	cbz	r1, 8009038 <__sflush_r+0xac>
 8009008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800900c:	4299      	cmp	r1, r3
 800900e:	d002      	beq.n	8009016 <__sflush_r+0x8a>
 8009010:	4628      	mov	r0, r5
 8009012:	f7fe fa41 	bl	8007498 <_free_r>
 8009016:	2300      	movs	r3, #0
 8009018:	6363      	str	r3, [r4, #52]	@ 0x34
 800901a:	e00d      	b.n	8009038 <__sflush_r+0xac>
 800901c:	2301      	movs	r3, #1
 800901e:	4628      	mov	r0, r5
 8009020:	47b0      	blx	r6
 8009022:	4602      	mov	r2, r0
 8009024:	1c50      	adds	r0, r2, #1
 8009026:	d1c9      	bne.n	8008fbc <__sflush_r+0x30>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c6      	beq.n	8008fbc <__sflush_r+0x30>
 800902e:	2b1d      	cmp	r3, #29
 8009030:	d001      	beq.n	8009036 <__sflush_r+0xaa>
 8009032:	2b16      	cmp	r3, #22
 8009034:	d11d      	bne.n	8009072 <__sflush_r+0xe6>
 8009036:	602f      	str	r7, [r5, #0]
 8009038:	2000      	movs	r0, #0
 800903a:	e021      	b.n	8009080 <__sflush_r+0xf4>
 800903c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009040:	b21b      	sxth	r3, r3
 8009042:	e01a      	b.n	800907a <__sflush_r+0xee>
 8009044:	690f      	ldr	r7, [r1, #16]
 8009046:	2f00      	cmp	r7, #0
 8009048:	d0f6      	beq.n	8009038 <__sflush_r+0xac>
 800904a:	0793      	lsls	r3, r2, #30
 800904c:	bf18      	it	ne
 800904e:	2300      	movne	r3, #0
 8009050:	680e      	ldr	r6, [r1, #0]
 8009052:	bf08      	it	eq
 8009054:	694b      	ldreq	r3, [r1, #20]
 8009056:	1bf6      	subs	r6, r6, r7
 8009058:	600f      	str	r7, [r1, #0]
 800905a:	608b      	str	r3, [r1, #8]
 800905c:	2e00      	cmp	r6, #0
 800905e:	ddeb      	ble.n	8009038 <__sflush_r+0xac>
 8009060:	4633      	mov	r3, r6
 8009062:	463a      	mov	r2, r7
 8009064:	4628      	mov	r0, r5
 8009066:	6a21      	ldr	r1, [r4, #32]
 8009068:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800906c:	47e0      	blx	ip
 800906e:	2800      	cmp	r0, #0
 8009070:	dc07      	bgt.n	8009082 <__sflush_r+0xf6>
 8009072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009082:	4407      	add	r7, r0
 8009084:	1a36      	subs	r6, r6, r0
 8009086:	e7e9      	b.n	800905c <__sflush_r+0xd0>
 8009088:	dfbffffe 	.word	0xdfbffffe

0800908c <_fflush_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	b913      	cbnz	r3, 800909c <_fflush_r+0x10>
 8009096:	2500      	movs	r5, #0
 8009098:	4628      	mov	r0, r5
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	b118      	cbz	r0, 80090a6 <_fflush_r+0x1a>
 800909e:	6a03      	ldr	r3, [r0, #32]
 80090a0:	b90b      	cbnz	r3, 80090a6 <_fflush_r+0x1a>
 80090a2:	f7fd fa7d 	bl	80065a0 <__sinit>
 80090a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f3      	beq.n	8009096 <_fflush_r+0xa>
 80090ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090b0:	07d0      	lsls	r0, r2, #31
 80090b2:	d404      	bmi.n	80090be <_fflush_r+0x32>
 80090b4:	0599      	lsls	r1, r3, #22
 80090b6:	d402      	bmi.n	80090be <_fflush_r+0x32>
 80090b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090ba:	f7fd fb88 	bl	80067ce <__retarget_lock_acquire_recursive>
 80090be:	4628      	mov	r0, r5
 80090c0:	4621      	mov	r1, r4
 80090c2:	f7ff ff63 	bl	8008f8c <__sflush_r>
 80090c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090c8:	4605      	mov	r5, r0
 80090ca:	07da      	lsls	r2, r3, #31
 80090cc:	d4e4      	bmi.n	8009098 <_fflush_r+0xc>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	059b      	lsls	r3, r3, #22
 80090d2:	d4e1      	bmi.n	8009098 <_fflush_r+0xc>
 80090d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d6:	f7fd fb7b 	bl	80067d0 <__retarget_lock_release_recursive>
 80090da:	e7dd      	b.n	8009098 <_fflush_r+0xc>

080090dc <memmove>:
 80090dc:	4288      	cmp	r0, r1
 80090de:	b510      	push	{r4, lr}
 80090e0:	eb01 0402 	add.w	r4, r1, r2
 80090e4:	d902      	bls.n	80090ec <memmove+0x10>
 80090e6:	4284      	cmp	r4, r0
 80090e8:	4623      	mov	r3, r4
 80090ea:	d807      	bhi.n	80090fc <memmove+0x20>
 80090ec:	1e43      	subs	r3, r0, #1
 80090ee:	42a1      	cmp	r1, r4
 80090f0:	d008      	beq.n	8009104 <memmove+0x28>
 80090f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090fa:	e7f8      	b.n	80090ee <memmove+0x12>
 80090fc:	4601      	mov	r1, r0
 80090fe:	4402      	add	r2, r0
 8009100:	428a      	cmp	r2, r1
 8009102:	d100      	bne.n	8009106 <memmove+0x2a>
 8009104:	bd10      	pop	{r4, pc}
 8009106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800910a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800910e:	e7f7      	b.n	8009100 <memmove+0x24>

08009110 <strncmp>:
 8009110:	b510      	push	{r4, lr}
 8009112:	b16a      	cbz	r2, 8009130 <strncmp+0x20>
 8009114:	3901      	subs	r1, #1
 8009116:	1884      	adds	r4, r0, r2
 8009118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800911c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009120:	429a      	cmp	r2, r3
 8009122:	d103      	bne.n	800912c <strncmp+0x1c>
 8009124:	42a0      	cmp	r0, r4
 8009126:	d001      	beq.n	800912c <strncmp+0x1c>
 8009128:	2a00      	cmp	r2, #0
 800912a:	d1f5      	bne.n	8009118 <strncmp+0x8>
 800912c:	1ad0      	subs	r0, r2, r3
 800912e:	bd10      	pop	{r4, pc}
 8009130:	4610      	mov	r0, r2
 8009132:	e7fc      	b.n	800912e <strncmp+0x1e>

08009134 <_sbrk_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	2300      	movs	r3, #0
 8009138:	4d05      	ldr	r5, [pc, #20]	@ (8009150 <_sbrk_r+0x1c>)
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f9 f822 	bl	8002188 <_sbrk>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_sbrk_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_sbrk_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	200005f8 	.word	0x200005f8

08009154 <memcpy>:
 8009154:	440a      	add	r2, r1
 8009156:	4291      	cmp	r1, r2
 8009158:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800915c:	d100      	bne.n	8009160 <memcpy+0xc>
 800915e:	4770      	bx	lr
 8009160:	b510      	push	{r4, lr}
 8009162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009166:	4291      	cmp	r1, r2
 8009168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916c:	d1f9      	bne.n	8009162 <memcpy+0xe>
 800916e:	bd10      	pop	{r4, pc}

08009170 <nan>:
 8009170:	2000      	movs	r0, #0
 8009172:	4901      	ldr	r1, [pc, #4]	@ (8009178 <nan+0x8>)
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	7ff80000 	.word	0x7ff80000

0800917c <__assert_func>:
 800917c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800917e:	4614      	mov	r4, r2
 8009180:	461a      	mov	r2, r3
 8009182:	4b09      	ldr	r3, [pc, #36]	@ (80091a8 <__assert_func+0x2c>)
 8009184:	4605      	mov	r5, r0
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68d8      	ldr	r0, [r3, #12]
 800918a:	b954      	cbnz	r4, 80091a2 <__assert_func+0x26>
 800918c:	4b07      	ldr	r3, [pc, #28]	@ (80091ac <__assert_func+0x30>)
 800918e:	461c      	mov	r4, r3
 8009190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009194:	9100      	str	r1, [sp, #0]
 8009196:	462b      	mov	r3, r5
 8009198:	4905      	ldr	r1, [pc, #20]	@ (80091b0 <__assert_func+0x34>)
 800919a:	f000 fba7 	bl	80098ec <fiprintf>
 800919e:	f000 fbb7 	bl	8009910 <abort>
 80091a2:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <__assert_func+0x38>)
 80091a4:	e7f4      	b.n	8009190 <__assert_func+0x14>
 80091a6:	bf00      	nop
 80091a8:	200000a8 	.word	0x200000a8
 80091ac:	0800a95d 	.word	0x0800a95d
 80091b0:	0800a92f 	.word	0x0800a92f
 80091b4:	0800a922 	.word	0x0800a922

080091b8 <_calloc_r>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	fba1 5402 	umull	r5, r4, r1, r2
 80091be:	b93c      	cbnz	r4, 80091d0 <_calloc_r+0x18>
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7fe f9db 	bl	800757c <_malloc_r>
 80091c6:	4606      	mov	r6, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <_calloc_r+0x1e>
 80091ca:	2600      	movs	r6, #0
 80091cc:	4630      	mov	r0, r6
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	220c      	movs	r2, #12
 80091d2:	6002      	str	r2, [r0, #0]
 80091d4:	e7f9      	b.n	80091ca <_calloc_r+0x12>
 80091d6:	462a      	mov	r2, r5
 80091d8:	4621      	mov	r1, r4
 80091da:	f7fd fa7a 	bl	80066d2 <memset>
 80091de:	e7f5      	b.n	80091cc <_calloc_r+0x14>

080091e0 <rshift>:
 80091e0:	6903      	ldr	r3, [r0, #16]
 80091e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091ea:	f100 0414 	add.w	r4, r0, #20
 80091ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091f2:	dd46      	ble.n	8009282 <rshift+0xa2>
 80091f4:	f011 011f 	ands.w	r1, r1, #31
 80091f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009200:	d10c      	bne.n	800921c <rshift+0x3c>
 8009202:	4629      	mov	r1, r5
 8009204:	f100 0710 	add.w	r7, r0, #16
 8009208:	42b1      	cmp	r1, r6
 800920a:	d335      	bcc.n	8009278 <rshift+0x98>
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	1eea      	subs	r2, r5, #3
 8009212:	4296      	cmp	r6, r2
 8009214:	bf38      	it	cc
 8009216:	2300      	movcc	r3, #0
 8009218:	4423      	add	r3, r4
 800921a:	e015      	b.n	8009248 <rshift+0x68>
 800921c:	46a1      	mov	r9, r4
 800921e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009222:	f1c1 0820 	rsb	r8, r1, #32
 8009226:	40cf      	lsrs	r7, r1
 8009228:	f105 0e04 	add.w	lr, r5, #4
 800922c:	4576      	cmp	r6, lr
 800922e:	46f4      	mov	ip, lr
 8009230:	d816      	bhi.n	8009260 <rshift+0x80>
 8009232:	1a9a      	subs	r2, r3, r2
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	3a04      	subs	r2, #4
 8009238:	3501      	adds	r5, #1
 800923a:	42ae      	cmp	r6, r5
 800923c:	bf38      	it	cc
 800923e:	2200      	movcc	r2, #0
 8009240:	18a3      	adds	r3, r4, r2
 8009242:	50a7      	str	r7, [r4, r2]
 8009244:	b107      	cbz	r7, 8009248 <rshift+0x68>
 8009246:	3304      	adds	r3, #4
 8009248:	42a3      	cmp	r3, r4
 800924a:	eba3 0204 	sub.w	r2, r3, r4
 800924e:	bf08      	it	eq
 8009250:	2300      	moveq	r3, #0
 8009252:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009256:	6102      	str	r2, [r0, #16]
 8009258:	bf08      	it	eq
 800925a:	6143      	streq	r3, [r0, #20]
 800925c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009260:	f8dc c000 	ldr.w	ip, [ip]
 8009264:	fa0c fc08 	lsl.w	ip, ip, r8
 8009268:	ea4c 0707 	orr.w	r7, ip, r7
 800926c:	f849 7b04 	str.w	r7, [r9], #4
 8009270:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009274:	40cf      	lsrs	r7, r1
 8009276:	e7d9      	b.n	800922c <rshift+0x4c>
 8009278:	f851 cb04 	ldr.w	ip, [r1], #4
 800927c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009280:	e7c2      	b.n	8009208 <rshift+0x28>
 8009282:	4623      	mov	r3, r4
 8009284:	e7e0      	b.n	8009248 <rshift+0x68>

08009286 <__hexdig_fun>:
 8009286:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800928a:	2b09      	cmp	r3, #9
 800928c:	d802      	bhi.n	8009294 <__hexdig_fun+0xe>
 800928e:	3820      	subs	r0, #32
 8009290:	b2c0      	uxtb	r0, r0
 8009292:	4770      	bx	lr
 8009294:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009298:	2b05      	cmp	r3, #5
 800929a:	d801      	bhi.n	80092a0 <__hexdig_fun+0x1a>
 800929c:	3847      	subs	r0, #71	@ 0x47
 800929e:	e7f7      	b.n	8009290 <__hexdig_fun+0xa>
 80092a0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092a4:	2b05      	cmp	r3, #5
 80092a6:	d801      	bhi.n	80092ac <__hexdig_fun+0x26>
 80092a8:	3827      	subs	r0, #39	@ 0x27
 80092aa:	e7f1      	b.n	8009290 <__hexdig_fun+0xa>
 80092ac:	2000      	movs	r0, #0
 80092ae:	4770      	bx	lr

080092b0 <__gethex>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	468a      	mov	sl, r1
 80092b6:	4690      	mov	r8, r2
 80092b8:	b085      	sub	sp, #20
 80092ba:	9302      	str	r3, [sp, #8]
 80092bc:	680b      	ldr	r3, [r1, #0]
 80092be:	9001      	str	r0, [sp, #4]
 80092c0:	1c9c      	adds	r4, r3, #2
 80092c2:	46a1      	mov	r9, r4
 80092c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092c8:	2830      	cmp	r0, #48	@ 0x30
 80092ca:	d0fa      	beq.n	80092c2 <__gethex+0x12>
 80092cc:	eba9 0303 	sub.w	r3, r9, r3
 80092d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80092d4:	f7ff ffd7 	bl	8009286 <__hexdig_fun>
 80092d8:	4605      	mov	r5, r0
 80092da:	2800      	cmp	r0, #0
 80092dc:	d168      	bne.n	80093b0 <__gethex+0x100>
 80092de:	2201      	movs	r2, #1
 80092e0:	4648      	mov	r0, r9
 80092e2:	499f      	ldr	r1, [pc, #636]	@ (8009560 <__gethex+0x2b0>)
 80092e4:	f7ff ff14 	bl	8009110 <strncmp>
 80092e8:	4607      	mov	r7, r0
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d167      	bne.n	80093be <__gethex+0x10e>
 80092ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092f2:	4626      	mov	r6, r4
 80092f4:	f7ff ffc7 	bl	8009286 <__hexdig_fun>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d062      	beq.n	80093c2 <__gethex+0x112>
 80092fc:	4623      	mov	r3, r4
 80092fe:	7818      	ldrb	r0, [r3, #0]
 8009300:	4699      	mov	r9, r3
 8009302:	2830      	cmp	r0, #48	@ 0x30
 8009304:	f103 0301 	add.w	r3, r3, #1
 8009308:	d0f9      	beq.n	80092fe <__gethex+0x4e>
 800930a:	f7ff ffbc 	bl	8009286 <__hexdig_fun>
 800930e:	fab0 f580 	clz	r5, r0
 8009312:	f04f 0b01 	mov.w	fp, #1
 8009316:	096d      	lsrs	r5, r5, #5
 8009318:	464a      	mov	r2, r9
 800931a:	4616      	mov	r6, r2
 800931c:	7830      	ldrb	r0, [r6, #0]
 800931e:	3201      	adds	r2, #1
 8009320:	f7ff ffb1 	bl	8009286 <__hexdig_fun>
 8009324:	2800      	cmp	r0, #0
 8009326:	d1f8      	bne.n	800931a <__gethex+0x6a>
 8009328:	2201      	movs	r2, #1
 800932a:	4630      	mov	r0, r6
 800932c:	498c      	ldr	r1, [pc, #560]	@ (8009560 <__gethex+0x2b0>)
 800932e:	f7ff feef 	bl	8009110 <strncmp>
 8009332:	2800      	cmp	r0, #0
 8009334:	d13f      	bne.n	80093b6 <__gethex+0x106>
 8009336:	b944      	cbnz	r4, 800934a <__gethex+0x9a>
 8009338:	1c74      	adds	r4, r6, #1
 800933a:	4622      	mov	r2, r4
 800933c:	4616      	mov	r6, r2
 800933e:	7830      	ldrb	r0, [r6, #0]
 8009340:	3201      	adds	r2, #1
 8009342:	f7ff ffa0 	bl	8009286 <__hexdig_fun>
 8009346:	2800      	cmp	r0, #0
 8009348:	d1f8      	bne.n	800933c <__gethex+0x8c>
 800934a:	1ba4      	subs	r4, r4, r6
 800934c:	00a7      	lsls	r7, r4, #2
 800934e:	7833      	ldrb	r3, [r6, #0]
 8009350:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009354:	2b50      	cmp	r3, #80	@ 0x50
 8009356:	d13e      	bne.n	80093d6 <__gethex+0x126>
 8009358:	7873      	ldrb	r3, [r6, #1]
 800935a:	2b2b      	cmp	r3, #43	@ 0x2b
 800935c:	d033      	beq.n	80093c6 <__gethex+0x116>
 800935e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009360:	d034      	beq.n	80093cc <__gethex+0x11c>
 8009362:	2400      	movs	r4, #0
 8009364:	1c71      	adds	r1, r6, #1
 8009366:	7808      	ldrb	r0, [r1, #0]
 8009368:	f7ff ff8d 	bl	8009286 <__hexdig_fun>
 800936c:	1e43      	subs	r3, r0, #1
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b18      	cmp	r3, #24
 8009372:	d830      	bhi.n	80093d6 <__gethex+0x126>
 8009374:	f1a0 0210 	sub.w	r2, r0, #16
 8009378:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800937c:	f7ff ff83 	bl	8009286 <__hexdig_fun>
 8009380:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009384:	fa5f fc8c 	uxtb.w	ip, ip
 8009388:	f1bc 0f18 	cmp.w	ip, #24
 800938c:	f04f 030a 	mov.w	r3, #10
 8009390:	d91e      	bls.n	80093d0 <__gethex+0x120>
 8009392:	b104      	cbz	r4, 8009396 <__gethex+0xe6>
 8009394:	4252      	negs	r2, r2
 8009396:	4417      	add	r7, r2
 8009398:	f8ca 1000 	str.w	r1, [sl]
 800939c:	b1ed      	cbz	r5, 80093da <__gethex+0x12a>
 800939e:	f1bb 0f00 	cmp.w	fp, #0
 80093a2:	bf0c      	ite	eq
 80093a4:	2506      	moveq	r5, #6
 80093a6:	2500      	movne	r5, #0
 80093a8:	4628      	mov	r0, r5
 80093aa:	b005      	add	sp, #20
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	2500      	movs	r5, #0
 80093b2:	462c      	mov	r4, r5
 80093b4:	e7b0      	b.n	8009318 <__gethex+0x68>
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	d1c7      	bne.n	800934a <__gethex+0x9a>
 80093ba:	4627      	mov	r7, r4
 80093bc:	e7c7      	b.n	800934e <__gethex+0x9e>
 80093be:	464e      	mov	r6, r9
 80093c0:	462f      	mov	r7, r5
 80093c2:	2501      	movs	r5, #1
 80093c4:	e7c3      	b.n	800934e <__gethex+0x9e>
 80093c6:	2400      	movs	r4, #0
 80093c8:	1cb1      	adds	r1, r6, #2
 80093ca:	e7cc      	b.n	8009366 <__gethex+0xb6>
 80093cc:	2401      	movs	r4, #1
 80093ce:	e7fb      	b.n	80093c8 <__gethex+0x118>
 80093d0:	fb03 0002 	mla	r0, r3, r2, r0
 80093d4:	e7ce      	b.n	8009374 <__gethex+0xc4>
 80093d6:	4631      	mov	r1, r6
 80093d8:	e7de      	b.n	8009398 <__gethex+0xe8>
 80093da:	4629      	mov	r1, r5
 80093dc:	eba6 0309 	sub.w	r3, r6, r9
 80093e0:	3b01      	subs	r3, #1
 80093e2:	2b07      	cmp	r3, #7
 80093e4:	dc0a      	bgt.n	80093fc <__gethex+0x14c>
 80093e6:	9801      	ldr	r0, [sp, #4]
 80093e8:	f7fe f954 	bl	8007694 <_Balloc>
 80093ec:	4604      	mov	r4, r0
 80093ee:	b940      	cbnz	r0, 8009402 <__gethex+0x152>
 80093f0:	4602      	mov	r2, r0
 80093f2:	21e4      	movs	r1, #228	@ 0xe4
 80093f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009564 <__gethex+0x2b4>)
 80093f6:	485c      	ldr	r0, [pc, #368]	@ (8009568 <__gethex+0x2b8>)
 80093f8:	f7ff fec0 	bl	800917c <__assert_func>
 80093fc:	3101      	adds	r1, #1
 80093fe:	105b      	asrs	r3, r3, #1
 8009400:	e7ef      	b.n	80093e2 <__gethex+0x132>
 8009402:	2300      	movs	r3, #0
 8009404:	f100 0a14 	add.w	sl, r0, #20
 8009408:	4655      	mov	r5, sl
 800940a:	469b      	mov	fp, r3
 800940c:	45b1      	cmp	r9, r6
 800940e:	d337      	bcc.n	8009480 <__gethex+0x1d0>
 8009410:	f845 bb04 	str.w	fp, [r5], #4
 8009414:	eba5 050a 	sub.w	r5, r5, sl
 8009418:	10ad      	asrs	r5, r5, #2
 800941a:	6125      	str	r5, [r4, #16]
 800941c:	4658      	mov	r0, fp
 800941e:	f7fe fa2b 	bl	8007878 <__hi0bits>
 8009422:	016d      	lsls	r5, r5, #5
 8009424:	f8d8 6000 	ldr.w	r6, [r8]
 8009428:	1a2d      	subs	r5, r5, r0
 800942a:	42b5      	cmp	r5, r6
 800942c:	dd54      	ble.n	80094d8 <__gethex+0x228>
 800942e:	1bad      	subs	r5, r5, r6
 8009430:	4629      	mov	r1, r5
 8009432:	4620      	mov	r0, r4
 8009434:	f7fe fdb3 	bl	8007f9e <__any_on>
 8009438:	4681      	mov	r9, r0
 800943a:	b178      	cbz	r0, 800945c <__gethex+0x1ac>
 800943c:	f04f 0901 	mov.w	r9, #1
 8009440:	1e6b      	subs	r3, r5, #1
 8009442:	1159      	asrs	r1, r3, #5
 8009444:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009448:	f003 021f 	and.w	r2, r3, #31
 800944c:	fa09 f202 	lsl.w	r2, r9, r2
 8009450:	420a      	tst	r2, r1
 8009452:	d003      	beq.n	800945c <__gethex+0x1ac>
 8009454:	454b      	cmp	r3, r9
 8009456:	dc36      	bgt.n	80094c6 <__gethex+0x216>
 8009458:	f04f 0902 	mov.w	r9, #2
 800945c:	4629      	mov	r1, r5
 800945e:	4620      	mov	r0, r4
 8009460:	f7ff febe 	bl	80091e0 <rshift>
 8009464:	442f      	add	r7, r5
 8009466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800946a:	42bb      	cmp	r3, r7
 800946c:	da42      	bge.n	80094f4 <__gethex+0x244>
 800946e:	4621      	mov	r1, r4
 8009470:	9801      	ldr	r0, [sp, #4]
 8009472:	f7fe f94f 	bl	8007714 <_Bfree>
 8009476:	2300      	movs	r3, #0
 8009478:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800947a:	25a3      	movs	r5, #163	@ 0xa3
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e793      	b.n	80093a8 <__gethex+0xf8>
 8009480:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009484:	2a2e      	cmp	r2, #46	@ 0x2e
 8009486:	d012      	beq.n	80094ae <__gethex+0x1fe>
 8009488:	2b20      	cmp	r3, #32
 800948a:	d104      	bne.n	8009496 <__gethex+0x1e6>
 800948c:	f845 bb04 	str.w	fp, [r5], #4
 8009490:	f04f 0b00 	mov.w	fp, #0
 8009494:	465b      	mov	r3, fp
 8009496:	7830      	ldrb	r0, [r6, #0]
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	f7ff fef4 	bl	8009286 <__hexdig_fun>
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	f000 000f 	and.w	r0, r0, #15
 80094a4:	4098      	lsls	r0, r3
 80094a6:	ea4b 0b00 	orr.w	fp, fp, r0
 80094aa:	3304      	adds	r3, #4
 80094ac:	e7ae      	b.n	800940c <__gethex+0x15c>
 80094ae:	45b1      	cmp	r9, r6
 80094b0:	d8ea      	bhi.n	8009488 <__gethex+0x1d8>
 80094b2:	2201      	movs	r2, #1
 80094b4:	4630      	mov	r0, r6
 80094b6:	492a      	ldr	r1, [pc, #168]	@ (8009560 <__gethex+0x2b0>)
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	f7ff fe29 	bl	8009110 <strncmp>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d1e1      	bne.n	8009488 <__gethex+0x1d8>
 80094c4:	e7a2      	b.n	800940c <__gethex+0x15c>
 80094c6:	4620      	mov	r0, r4
 80094c8:	1ea9      	subs	r1, r5, #2
 80094ca:	f7fe fd68 	bl	8007f9e <__any_on>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d0c2      	beq.n	8009458 <__gethex+0x1a8>
 80094d2:	f04f 0903 	mov.w	r9, #3
 80094d6:	e7c1      	b.n	800945c <__gethex+0x1ac>
 80094d8:	da09      	bge.n	80094ee <__gethex+0x23e>
 80094da:	1b75      	subs	r5, r6, r5
 80094dc:	4621      	mov	r1, r4
 80094de:	462a      	mov	r2, r5
 80094e0:	9801      	ldr	r0, [sp, #4]
 80094e2:	f7fe fb2d 	bl	8007b40 <__lshift>
 80094e6:	4604      	mov	r4, r0
 80094e8:	1b7f      	subs	r7, r7, r5
 80094ea:	f100 0a14 	add.w	sl, r0, #20
 80094ee:	f04f 0900 	mov.w	r9, #0
 80094f2:	e7b8      	b.n	8009466 <__gethex+0x1b6>
 80094f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094f8:	42bd      	cmp	r5, r7
 80094fa:	dd6f      	ble.n	80095dc <__gethex+0x32c>
 80094fc:	1bed      	subs	r5, r5, r7
 80094fe:	42ae      	cmp	r6, r5
 8009500:	dc34      	bgt.n	800956c <__gethex+0x2bc>
 8009502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d022      	beq.n	8009550 <__gethex+0x2a0>
 800950a:	2b03      	cmp	r3, #3
 800950c:	d024      	beq.n	8009558 <__gethex+0x2a8>
 800950e:	2b01      	cmp	r3, #1
 8009510:	d115      	bne.n	800953e <__gethex+0x28e>
 8009512:	42ae      	cmp	r6, r5
 8009514:	d113      	bne.n	800953e <__gethex+0x28e>
 8009516:	2e01      	cmp	r6, #1
 8009518:	d10b      	bne.n	8009532 <__gethex+0x282>
 800951a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800951e:	9a02      	ldr	r2, [sp, #8]
 8009520:	2562      	movs	r5, #98	@ 0x62
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	2301      	movs	r3, #1
 8009526:	6123      	str	r3, [r4, #16]
 8009528:	f8ca 3000 	str.w	r3, [sl]
 800952c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800952e:	601c      	str	r4, [r3, #0]
 8009530:	e73a      	b.n	80093a8 <__gethex+0xf8>
 8009532:	4620      	mov	r0, r4
 8009534:	1e71      	subs	r1, r6, #1
 8009536:	f7fe fd32 	bl	8007f9e <__any_on>
 800953a:	2800      	cmp	r0, #0
 800953c:	d1ed      	bne.n	800951a <__gethex+0x26a>
 800953e:	4621      	mov	r1, r4
 8009540:	9801      	ldr	r0, [sp, #4]
 8009542:	f7fe f8e7 	bl	8007714 <_Bfree>
 8009546:	2300      	movs	r3, #0
 8009548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800954a:	2550      	movs	r5, #80	@ 0x50
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e72b      	b.n	80093a8 <__gethex+0xf8>
 8009550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1f3      	bne.n	800953e <__gethex+0x28e>
 8009556:	e7e0      	b.n	800951a <__gethex+0x26a>
 8009558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1dd      	bne.n	800951a <__gethex+0x26a>
 800955e:	e7ee      	b.n	800953e <__gethex+0x28e>
 8009560:	0800a7b0 	.word	0x0800a7b0
 8009564:	0800a643 	.word	0x0800a643
 8009568:	0800a95e 	.word	0x0800a95e
 800956c:	1e6f      	subs	r7, r5, #1
 800956e:	f1b9 0f00 	cmp.w	r9, #0
 8009572:	d130      	bne.n	80095d6 <__gethex+0x326>
 8009574:	b127      	cbz	r7, 8009580 <__gethex+0x2d0>
 8009576:	4639      	mov	r1, r7
 8009578:	4620      	mov	r0, r4
 800957a:	f7fe fd10 	bl	8007f9e <__any_on>
 800957e:	4681      	mov	r9, r0
 8009580:	2301      	movs	r3, #1
 8009582:	4629      	mov	r1, r5
 8009584:	1b76      	subs	r6, r6, r5
 8009586:	2502      	movs	r5, #2
 8009588:	117a      	asrs	r2, r7, #5
 800958a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800958e:	f007 071f 	and.w	r7, r7, #31
 8009592:	40bb      	lsls	r3, r7
 8009594:	4213      	tst	r3, r2
 8009596:	4620      	mov	r0, r4
 8009598:	bf18      	it	ne
 800959a:	f049 0902 	orrne.w	r9, r9, #2
 800959e:	f7ff fe1f 	bl	80091e0 <rshift>
 80095a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095a6:	f1b9 0f00 	cmp.w	r9, #0
 80095aa:	d047      	beq.n	800963c <__gethex+0x38c>
 80095ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d015      	beq.n	80095e0 <__gethex+0x330>
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d017      	beq.n	80095e8 <__gethex+0x338>
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d109      	bne.n	80095d0 <__gethex+0x320>
 80095bc:	f019 0f02 	tst.w	r9, #2
 80095c0:	d006      	beq.n	80095d0 <__gethex+0x320>
 80095c2:	f8da 3000 	ldr.w	r3, [sl]
 80095c6:	ea49 0903 	orr.w	r9, r9, r3
 80095ca:	f019 0f01 	tst.w	r9, #1
 80095ce:	d10e      	bne.n	80095ee <__gethex+0x33e>
 80095d0:	f045 0510 	orr.w	r5, r5, #16
 80095d4:	e032      	b.n	800963c <__gethex+0x38c>
 80095d6:	f04f 0901 	mov.w	r9, #1
 80095da:	e7d1      	b.n	8009580 <__gethex+0x2d0>
 80095dc:	2501      	movs	r5, #1
 80095de:	e7e2      	b.n	80095a6 <__gethex+0x2f6>
 80095e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095e2:	f1c3 0301 	rsb	r3, r3, #1
 80095e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f0      	beq.n	80095d0 <__gethex+0x320>
 80095ee:	f04f 0c00 	mov.w	ip, #0
 80095f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095f6:	f104 0314 	add.w	r3, r4, #20
 80095fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009602:	4618      	mov	r0, r3
 8009604:	f853 2b04 	ldr.w	r2, [r3], #4
 8009608:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800960c:	d01b      	beq.n	8009646 <__gethex+0x396>
 800960e:	3201      	adds	r2, #1
 8009610:	6002      	str	r2, [r0, #0]
 8009612:	2d02      	cmp	r5, #2
 8009614:	f104 0314 	add.w	r3, r4, #20
 8009618:	d13c      	bne.n	8009694 <__gethex+0x3e4>
 800961a:	f8d8 2000 	ldr.w	r2, [r8]
 800961e:	3a01      	subs	r2, #1
 8009620:	42b2      	cmp	r2, r6
 8009622:	d109      	bne.n	8009638 <__gethex+0x388>
 8009624:	2201      	movs	r2, #1
 8009626:	1171      	asrs	r1, r6, #5
 8009628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800962c:	f006 061f 	and.w	r6, r6, #31
 8009630:	fa02 f606 	lsl.w	r6, r2, r6
 8009634:	421e      	tst	r6, r3
 8009636:	d13a      	bne.n	80096ae <__gethex+0x3fe>
 8009638:	f045 0520 	orr.w	r5, r5, #32
 800963c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800963e:	601c      	str	r4, [r3, #0]
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	601f      	str	r7, [r3, #0]
 8009644:	e6b0      	b.n	80093a8 <__gethex+0xf8>
 8009646:	4299      	cmp	r1, r3
 8009648:	f843 cc04 	str.w	ip, [r3, #-4]
 800964c:	d8d9      	bhi.n	8009602 <__gethex+0x352>
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	459b      	cmp	fp, r3
 8009652:	db17      	blt.n	8009684 <__gethex+0x3d4>
 8009654:	6861      	ldr	r1, [r4, #4]
 8009656:	9801      	ldr	r0, [sp, #4]
 8009658:	3101      	adds	r1, #1
 800965a:	f7fe f81b 	bl	8007694 <_Balloc>
 800965e:	4681      	mov	r9, r0
 8009660:	b918      	cbnz	r0, 800966a <__gethex+0x3ba>
 8009662:	4602      	mov	r2, r0
 8009664:	2184      	movs	r1, #132	@ 0x84
 8009666:	4b19      	ldr	r3, [pc, #100]	@ (80096cc <__gethex+0x41c>)
 8009668:	e6c5      	b.n	80093f6 <__gethex+0x146>
 800966a:	6922      	ldr	r2, [r4, #16]
 800966c:	f104 010c 	add.w	r1, r4, #12
 8009670:	3202      	adds	r2, #2
 8009672:	0092      	lsls	r2, r2, #2
 8009674:	300c      	adds	r0, #12
 8009676:	f7ff fd6d 	bl	8009154 <memcpy>
 800967a:	4621      	mov	r1, r4
 800967c:	9801      	ldr	r0, [sp, #4]
 800967e:	f7fe f849 	bl	8007714 <_Bfree>
 8009682:	464c      	mov	r4, r9
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	6122      	str	r2, [r4, #16]
 800968a:	2201      	movs	r2, #1
 800968c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009690:	615a      	str	r2, [r3, #20]
 8009692:	e7be      	b.n	8009612 <__gethex+0x362>
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	455a      	cmp	r2, fp
 8009698:	dd0b      	ble.n	80096b2 <__gethex+0x402>
 800969a:	2101      	movs	r1, #1
 800969c:	4620      	mov	r0, r4
 800969e:	f7ff fd9f 	bl	80091e0 <rshift>
 80096a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a6:	3701      	adds	r7, #1
 80096a8:	42bb      	cmp	r3, r7
 80096aa:	f6ff aee0 	blt.w	800946e <__gethex+0x1be>
 80096ae:	2501      	movs	r5, #1
 80096b0:	e7c2      	b.n	8009638 <__gethex+0x388>
 80096b2:	f016 061f 	ands.w	r6, r6, #31
 80096b6:	d0fa      	beq.n	80096ae <__gethex+0x3fe>
 80096b8:	4453      	add	r3, sl
 80096ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096be:	f7fe f8db 	bl	8007878 <__hi0bits>
 80096c2:	f1c6 0620 	rsb	r6, r6, #32
 80096c6:	42b0      	cmp	r0, r6
 80096c8:	dbe7      	blt.n	800969a <__gethex+0x3ea>
 80096ca:	e7f0      	b.n	80096ae <__gethex+0x3fe>
 80096cc:	0800a643 	.word	0x0800a643

080096d0 <L_shift>:
 80096d0:	f1c2 0208 	rsb	r2, r2, #8
 80096d4:	0092      	lsls	r2, r2, #2
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	f1c2 0620 	rsb	r6, r2, #32
 80096dc:	6843      	ldr	r3, [r0, #4]
 80096de:	6804      	ldr	r4, [r0, #0]
 80096e0:	fa03 f506 	lsl.w	r5, r3, r6
 80096e4:	432c      	orrs	r4, r5
 80096e6:	40d3      	lsrs	r3, r2
 80096e8:	6004      	str	r4, [r0, #0]
 80096ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80096ee:	4288      	cmp	r0, r1
 80096f0:	d3f4      	bcc.n	80096dc <L_shift+0xc>
 80096f2:	bd70      	pop	{r4, r5, r6, pc}

080096f4 <__match>:
 80096f4:	b530      	push	{r4, r5, lr}
 80096f6:	6803      	ldr	r3, [r0, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fe:	b914      	cbnz	r4, 8009706 <__match+0x12>
 8009700:	6003      	str	r3, [r0, #0]
 8009702:	2001      	movs	r0, #1
 8009704:	bd30      	pop	{r4, r5, pc}
 8009706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800970e:	2d19      	cmp	r5, #25
 8009710:	bf98      	it	ls
 8009712:	3220      	addls	r2, #32
 8009714:	42a2      	cmp	r2, r4
 8009716:	d0f0      	beq.n	80096fa <__match+0x6>
 8009718:	2000      	movs	r0, #0
 800971a:	e7f3      	b.n	8009704 <__match+0x10>

0800971c <__hexnan>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	2500      	movs	r5, #0
 8009722:	680b      	ldr	r3, [r1, #0]
 8009724:	4682      	mov	sl, r0
 8009726:	115e      	asrs	r6, r3, #5
 8009728:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800972c:	f013 031f 	ands.w	r3, r3, #31
 8009730:	bf18      	it	ne
 8009732:	3604      	addne	r6, #4
 8009734:	1f37      	subs	r7, r6, #4
 8009736:	4690      	mov	r8, r2
 8009738:	46b9      	mov	r9, r7
 800973a:	463c      	mov	r4, r7
 800973c:	46ab      	mov	fp, r5
 800973e:	b087      	sub	sp, #28
 8009740:	6801      	ldr	r1, [r0, #0]
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	f846 5c04 	str.w	r5, [r6, #-4]
 8009748:	9502      	str	r5, [sp, #8]
 800974a:	784a      	ldrb	r2, [r1, #1]
 800974c:	1c4b      	adds	r3, r1, #1
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	b342      	cbz	r2, 80097a4 <__hexnan+0x88>
 8009752:	4610      	mov	r0, r2
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	9204      	str	r2, [sp, #16]
 8009758:	f7ff fd95 	bl	8009286 <__hexdig_fun>
 800975c:	2800      	cmp	r0, #0
 800975e:	d151      	bne.n	8009804 <__hexnan+0xe8>
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	9905      	ldr	r1, [sp, #20]
 8009764:	2a20      	cmp	r2, #32
 8009766:	d818      	bhi.n	800979a <__hexnan+0x7e>
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	459b      	cmp	fp, r3
 800976c:	dd13      	ble.n	8009796 <__hexnan+0x7a>
 800976e:	454c      	cmp	r4, r9
 8009770:	d206      	bcs.n	8009780 <__hexnan+0x64>
 8009772:	2d07      	cmp	r5, #7
 8009774:	dc04      	bgt.n	8009780 <__hexnan+0x64>
 8009776:	462a      	mov	r2, r5
 8009778:	4649      	mov	r1, r9
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff ffa8 	bl	80096d0 <L_shift>
 8009780:	4544      	cmp	r4, r8
 8009782:	d952      	bls.n	800982a <__hexnan+0x10e>
 8009784:	2300      	movs	r3, #0
 8009786:	f1a4 0904 	sub.w	r9, r4, #4
 800978a:	f844 3c04 	str.w	r3, [r4, #-4]
 800978e:	461d      	mov	r5, r3
 8009790:	464c      	mov	r4, r9
 8009792:	f8cd b008 	str.w	fp, [sp, #8]
 8009796:	9903      	ldr	r1, [sp, #12]
 8009798:	e7d7      	b.n	800974a <__hexnan+0x2e>
 800979a:	2a29      	cmp	r2, #41	@ 0x29
 800979c:	d157      	bne.n	800984e <__hexnan+0x132>
 800979e:	3102      	adds	r1, #2
 80097a0:	f8ca 1000 	str.w	r1, [sl]
 80097a4:	f1bb 0f00 	cmp.w	fp, #0
 80097a8:	d051      	beq.n	800984e <__hexnan+0x132>
 80097aa:	454c      	cmp	r4, r9
 80097ac:	d206      	bcs.n	80097bc <__hexnan+0xa0>
 80097ae:	2d07      	cmp	r5, #7
 80097b0:	dc04      	bgt.n	80097bc <__hexnan+0xa0>
 80097b2:	462a      	mov	r2, r5
 80097b4:	4649      	mov	r1, r9
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff ff8a 	bl	80096d0 <L_shift>
 80097bc:	4544      	cmp	r4, r8
 80097be:	d936      	bls.n	800982e <__hexnan+0x112>
 80097c0:	4623      	mov	r3, r4
 80097c2:	f1a8 0204 	sub.w	r2, r8, #4
 80097c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80097ca:	429f      	cmp	r7, r3
 80097cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80097d0:	d2f9      	bcs.n	80097c6 <__hexnan+0xaa>
 80097d2:	1b3b      	subs	r3, r7, r4
 80097d4:	f023 0303 	bic.w	r3, r3, #3
 80097d8:	3304      	adds	r3, #4
 80097da:	3401      	adds	r4, #1
 80097dc:	3e03      	subs	r6, #3
 80097de:	42b4      	cmp	r4, r6
 80097e0:	bf88      	it	hi
 80097e2:	2304      	movhi	r3, #4
 80097e4:	2200      	movs	r2, #0
 80097e6:	4443      	add	r3, r8
 80097e8:	f843 2b04 	str.w	r2, [r3], #4
 80097ec:	429f      	cmp	r7, r3
 80097ee:	d2fb      	bcs.n	80097e8 <__hexnan+0xcc>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	b91b      	cbnz	r3, 80097fc <__hexnan+0xe0>
 80097f4:	4547      	cmp	r7, r8
 80097f6:	d128      	bne.n	800984a <__hexnan+0x12e>
 80097f8:	2301      	movs	r3, #1
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	2005      	movs	r0, #5
 80097fe:	b007      	add	sp, #28
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	3501      	adds	r5, #1
 8009806:	2d08      	cmp	r5, #8
 8009808:	f10b 0b01 	add.w	fp, fp, #1
 800980c:	dd06      	ble.n	800981c <__hexnan+0x100>
 800980e:	4544      	cmp	r4, r8
 8009810:	d9c1      	bls.n	8009796 <__hexnan+0x7a>
 8009812:	2300      	movs	r3, #0
 8009814:	2501      	movs	r5, #1
 8009816:	f844 3c04 	str.w	r3, [r4, #-4]
 800981a:	3c04      	subs	r4, #4
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	f000 000f 	and.w	r0, r0, #15
 8009822:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009826:	6020      	str	r0, [r4, #0]
 8009828:	e7b5      	b.n	8009796 <__hexnan+0x7a>
 800982a:	2508      	movs	r5, #8
 800982c:	e7b3      	b.n	8009796 <__hexnan+0x7a>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0dd      	beq.n	80097f0 <__hexnan+0xd4>
 8009834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009838:	f1c3 0320 	rsb	r3, r3, #32
 800983c:	40da      	lsrs	r2, r3
 800983e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009842:	4013      	ands	r3, r2
 8009844:	f846 3c04 	str.w	r3, [r6, #-4]
 8009848:	e7d2      	b.n	80097f0 <__hexnan+0xd4>
 800984a:	3f04      	subs	r7, #4
 800984c:	e7d0      	b.n	80097f0 <__hexnan+0xd4>
 800984e:	2004      	movs	r0, #4
 8009850:	e7d5      	b.n	80097fe <__hexnan+0xe2>

08009852 <__ascii_mbtowc>:
 8009852:	b082      	sub	sp, #8
 8009854:	b901      	cbnz	r1, 8009858 <__ascii_mbtowc+0x6>
 8009856:	a901      	add	r1, sp, #4
 8009858:	b142      	cbz	r2, 800986c <__ascii_mbtowc+0x1a>
 800985a:	b14b      	cbz	r3, 8009870 <__ascii_mbtowc+0x1e>
 800985c:	7813      	ldrb	r3, [r2, #0]
 800985e:	600b      	str	r3, [r1, #0]
 8009860:	7812      	ldrb	r2, [r2, #0]
 8009862:	1e10      	subs	r0, r2, #0
 8009864:	bf18      	it	ne
 8009866:	2001      	movne	r0, #1
 8009868:	b002      	add	sp, #8
 800986a:	4770      	bx	lr
 800986c:	4610      	mov	r0, r2
 800986e:	e7fb      	b.n	8009868 <__ascii_mbtowc+0x16>
 8009870:	f06f 0001 	mvn.w	r0, #1
 8009874:	e7f8      	b.n	8009868 <__ascii_mbtowc+0x16>

08009876 <_realloc_r>:
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	4680      	mov	r8, r0
 800987c:	4615      	mov	r5, r2
 800987e:	460c      	mov	r4, r1
 8009880:	b921      	cbnz	r1, 800988c <_realloc_r+0x16>
 8009882:	4611      	mov	r1, r2
 8009884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	f7fd be78 	b.w	800757c <_malloc_r>
 800988c:	b92a      	cbnz	r2, 800989a <_realloc_r+0x24>
 800988e:	f7fd fe03 	bl	8007498 <_free_r>
 8009892:	2400      	movs	r4, #0
 8009894:	4620      	mov	r0, r4
 8009896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989a:	f000 f840 	bl	800991e <_malloc_usable_size_r>
 800989e:	4285      	cmp	r5, r0
 80098a0:	4606      	mov	r6, r0
 80098a2:	d802      	bhi.n	80098aa <_realloc_r+0x34>
 80098a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098a8:	d8f4      	bhi.n	8009894 <_realloc_r+0x1e>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4640      	mov	r0, r8
 80098ae:	f7fd fe65 	bl	800757c <_malloc_r>
 80098b2:	4607      	mov	r7, r0
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0ec      	beq.n	8009892 <_realloc_r+0x1c>
 80098b8:	42b5      	cmp	r5, r6
 80098ba:	462a      	mov	r2, r5
 80098bc:	4621      	mov	r1, r4
 80098be:	bf28      	it	cs
 80098c0:	4632      	movcs	r2, r6
 80098c2:	f7ff fc47 	bl	8009154 <memcpy>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4640      	mov	r0, r8
 80098ca:	f7fd fde5 	bl	8007498 <_free_r>
 80098ce:	463c      	mov	r4, r7
 80098d0:	e7e0      	b.n	8009894 <_realloc_r+0x1e>

080098d2 <__ascii_wctomb>:
 80098d2:	4603      	mov	r3, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	b141      	cbz	r1, 80098ea <__ascii_wctomb+0x18>
 80098d8:	2aff      	cmp	r2, #255	@ 0xff
 80098da:	d904      	bls.n	80098e6 <__ascii_wctomb+0x14>
 80098dc:	228a      	movs	r2, #138	@ 0x8a
 80098de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	4770      	bx	lr
 80098e6:	2001      	movs	r0, #1
 80098e8:	700a      	strb	r2, [r1, #0]
 80098ea:	4770      	bx	lr

080098ec <fiprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b503      	push	{r0, r1, lr}
 80098f0:	4601      	mov	r1, r0
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	4805      	ldr	r0, [pc, #20]	@ (800990c <fiprintf+0x20>)
 80098f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f000 f83d 	bl	800997c <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	f85d eb04 	ldr.w	lr, [sp], #4
 8009908:	b003      	add	sp, #12
 800990a:	4770      	bx	lr
 800990c:	200000a8 	.word	0x200000a8

08009910 <abort>:
 8009910:	2006      	movs	r0, #6
 8009912:	b508      	push	{r3, lr}
 8009914:	f000 fa06 	bl	8009d24 <raise>
 8009918:	2001      	movs	r0, #1
 800991a:	f7f8 fbc0 	bl	800209e <_exit>

0800991e <_malloc_usable_size_r>:
 800991e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009922:	1f18      	subs	r0, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfbc      	itt	lt
 8009928:	580b      	ldrlt	r3, [r1, r0]
 800992a:	18c0      	addlt	r0, r0, r3
 800992c:	4770      	bx	lr

0800992e <__sfputc_r>:
 800992e:	6893      	ldr	r3, [r2, #8]
 8009930:	b410      	push	{r4}
 8009932:	3b01      	subs	r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	6093      	str	r3, [r2, #8]
 8009938:	da07      	bge.n	800994a <__sfputc_r+0x1c>
 800993a:	6994      	ldr	r4, [r2, #24]
 800993c:	42a3      	cmp	r3, r4
 800993e:	db01      	blt.n	8009944 <__sfputc_r+0x16>
 8009940:	290a      	cmp	r1, #10
 8009942:	d102      	bne.n	800994a <__sfputc_r+0x1c>
 8009944:	bc10      	pop	{r4}
 8009946:	f000 b931 	b.w	8009bac <__swbuf_r>
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	1c58      	adds	r0, r3, #1
 800994e:	6010      	str	r0, [r2, #0]
 8009950:	7019      	strb	r1, [r3, #0]
 8009952:	4608      	mov	r0, r1
 8009954:	bc10      	pop	{r4}
 8009956:	4770      	bx	lr

08009958 <__sfputs_r>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	4614      	mov	r4, r2
 8009960:	18d5      	adds	r5, r2, r3
 8009962:	42ac      	cmp	r4, r5
 8009964:	d101      	bne.n	800996a <__sfputs_r+0x12>
 8009966:	2000      	movs	r0, #0
 8009968:	e007      	b.n	800997a <__sfputs_r+0x22>
 800996a:	463a      	mov	r2, r7
 800996c:	4630      	mov	r0, r6
 800996e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009972:	f7ff ffdc 	bl	800992e <__sfputc_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d1f3      	bne.n	8009962 <__sfputs_r+0xa>
 800997a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800997c <_vfiprintf_r>:
 800997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	460d      	mov	r5, r1
 8009982:	4614      	mov	r4, r2
 8009984:	4698      	mov	r8, r3
 8009986:	4606      	mov	r6, r0
 8009988:	b09d      	sub	sp, #116	@ 0x74
 800998a:	b118      	cbz	r0, 8009994 <_vfiprintf_r+0x18>
 800998c:	6a03      	ldr	r3, [r0, #32]
 800998e:	b90b      	cbnz	r3, 8009994 <_vfiprintf_r+0x18>
 8009990:	f7fc fe06 	bl	80065a0 <__sinit>
 8009994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009996:	07d9      	lsls	r1, r3, #31
 8009998:	d405      	bmi.n	80099a6 <_vfiprintf_r+0x2a>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	059a      	lsls	r2, r3, #22
 800999e:	d402      	bmi.n	80099a6 <_vfiprintf_r+0x2a>
 80099a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099a2:	f7fc ff14 	bl	80067ce <__retarget_lock_acquire_recursive>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	071b      	lsls	r3, r3, #28
 80099aa:	d501      	bpl.n	80099b0 <_vfiprintf_r+0x34>
 80099ac:	692b      	ldr	r3, [r5, #16]
 80099ae:	b99b      	cbnz	r3, 80099d8 <_vfiprintf_r+0x5c>
 80099b0:	4629      	mov	r1, r5
 80099b2:	4630      	mov	r0, r6
 80099b4:	f000 f938 	bl	8009c28 <__swsetup_r>
 80099b8:	b170      	cbz	r0, 80099d8 <_vfiprintf_r+0x5c>
 80099ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099bc:	07dc      	lsls	r4, r3, #31
 80099be:	d504      	bpl.n	80099ca <_vfiprintf_r+0x4e>
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099c4:	b01d      	add	sp, #116	@ 0x74
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	0598      	lsls	r0, r3, #22
 80099ce:	d4f7      	bmi.n	80099c0 <_vfiprintf_r+0x44>
 80099d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099d2:	f7fc fefd 	bl	80067d0 <__retarget_lock_release_recursive>
 80099d6:	e7f3      	b.n	80099c0 <_vfiprintf_r+0x44>
 80099d8:	2300      	movs	r3, #0
 80099da:	9309      	str	r3, [sp, #36]	@ 0x24
 80099dc:	2320      	movs	r3, #32
 80099de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099e2:	2330      	movs	r3, #48	@ 0x30
 80099e4:	f04f 0901 	mov.w	r9, #1
 80099e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009b98 <_vfiprintf_r+0x21c>
 80099f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099f4:	4623      	mov	r3, r4
 80099f6:	469a      	mov	sl, r3
 80099f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fc:	b10a      	cbz	r2, 8009a02 <_vfiprintf_r+0x86>
 80099fe:	2a25      	cmp	r2, #37	@ 0x25
 8009a00:	d1f9      	bne.n	80099f6 <_vfiprintf_r+0x7a>
 8009a02:	ebba 0b04 	subs.w	fp, sl, r4
 8009a06:	d00b      	beq.n	8009a20 <_vfiprintf_r+0xa4>
 8009a08:	465b      	mov	r3, fp
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ffa2 	bl	8009958 <__sfputs_r>
 8009a14:	3001      	adds	r0, #1
 8009a16:	f000 80a7 	beq.w	8009b68 <_vfiprintf_r+0x1ec>
 8009a1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a1c:	445a      	add	r2, fp
 8009a1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a20:	f89a 3000 	ldrb.w	r3, [sl]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 809f 	beq.w	8009b68 <_vfiprintf_r+0x1ec>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a34:	f10a 0a01 	add.w	sl, sl, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a40:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a42:	4654      	mov	r4, sl
 8009a44:	2205      	movs	r2, #5
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	4853      	ldr	r0, [pc, #332]	@ (8009b98 <_vfiprintf_r+0x21c>)
 8009a4c:	f7fc fec1 	bl	80067d2 <memchr>
 8009a50:	9a04      	ldr	r2, [sp, #16]
 8009a52:	b9d8      	cbnz	r0, 8009a8c <_vfiprintf_r+0x110>
 8009a54:	06d1      	lsls	r1, r2, #27
 8009a56:	bf44      	itt	mi
 8009a58:	2320      	movmi	r3, #32
 8009a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a5e:	0713      	lsls	r3, r2, #28
 8009a60:	bf44      	itt	mi
 8009a62:	232b      	movmi	r3, #43	@ 0x2b
 8009a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a68:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6e:	d015      	beq.n	8009a9c <_vfiprintf_r+0x120>
 8009a70:	4654      	mov	r4, sl
 8009a72:	2000      	movs	r0, #0
 8009a74:	f04f 0c0a 	mov.w	ip, #10
 8009a78:	9a07      	ldr	r2, [sp, #28]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a80:	3b30      	subs	r3, #48	@ 0x30
 8009a82:	2b09      	cmp	r3, #9
 8009a84:	d94b      	bls.n	8009b1e <_vfiprintf_r+0x1a2>
 8009a86:	b1b0      	cbz	r0, 8009ab6 <_vfiprintf_r+0x13a>
 8009a88:	9207      	str	r2, [sp, #28]
 8009a8a:	e014      	b.n	8009ab6 <_vfiprintf_r+0x13a>
 8009a8c:	eba0 0308 	sub.w	r3, r0, r8
 8009a90:	fa09 f303 	lsl.w	r3, r9, r3
 8009a94:	4313      	orrs	r3, r2
 8009a96:	46a2      	mov	sl, r4
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	e7d2      	b.n	8009a42 <_vfiprintf_r+0xc6>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	1d19      	adds	r1, r3, #4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	9103      	str	r1, [sp, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfbb      	ittet	lt
 8009aa8:	425b      	neglt	r3, r3
 8009aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8009aae:	9307      	strge	r3, [sp, #28]
 8009ab0:	9307      	strlt	r3, [sp, #28]
 8009ab2:	bfb8      	it	lt
 8009ab4:	9204      	strlt	r2, [sp, #16]
 8009ab6:	7823      	ldrb	r3, [r4, #0]
 8009ab8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aba:	d10a      	bne.n	8009ad2 <_vfiprintf_r+0x156>
 8009abc:	7863      	ldrb	r3, [r4, #1]
 8009abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac0:	d132      	bne.n	8009b28 <_vfiprintf_r+0x1ac>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	3402      	adds	r4, #2
 8009ac6:	1d1a      	adds	r2, r3, #4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	9203      	str	r2, [sp, #12]
 8009acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ad0:	9305      	str	r3, [sp, #20]
 8009ad2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009b9c <_vfiprintf_r+0x220>
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	4650      	mov	r0, sl
 8009ada:	7821      	ldrb	r1, [r4, #0]
 8009adc:	f7fc fe79 	bl	80067d2 <memchr>
 8009ae0:	b138      	cbz	r0, 8009af2 <_vfiprintf_r+0x176>
 8009ae2:	2240      	movs	r2, #64	@ 0x40
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	eba0 000a 	sub.w	r0, r0, sl
 8009aea:	4082      	lsls	r2, r0
 8009aec:	4313      	orrs	r3, r2
 8009aee:	3401      	adds	r4, #1
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af6:	2206      	movs	r2, #6
 8009af8:	4829      	ldr	r0, [pc, #164]	@ (8009ba0 <_vfiprintf_r+0x224>)
 8009afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009afe:	f7fc fe68 	bl	80067d2 <memchr>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d03f      	beq.n	8009b86 <_vfiprintf_r+0x20a>
 8009b06:	4b27      	ldr	r3, [pc, #156]	@ (8009ba4 <_vfiprintf_r+0x228>)
 8009b08:	bb1b      	cbnz	r3, 8009b52 <_vfiprintf_r+0x1d6>
 8009b0a:	9b03      	ldr	r3, [sp, #12]
 8009b0c:	3307      	adds	r3, #7
 8009b0e:	f023 0307 	bic.w	r3, r3, #7
 8009b12:	3308      	adds	r3, #8
 8009b14:	9303      	str	r3, [sp, #12]
 8009b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b18:	443b      	add	r3, r7
 8009b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b1c:	e76a      	b.n	80099f4 <_vfiprintf_r+0x78>
 8009b1e:	460c      	mov	r4, r1
 8009b20:	2001      	movs	r0, #1
 8009b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b26:	e7a8      	b.n	8009a7a <_vfiprintf_r+0xfe>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f04f 0c0a 	mov.w	ip, #10
 8009b2e:	4619      	mov	r1, r3
 8009b30:	3401      	adds	r4, #1
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	4620      	mov	r0, r4
 8009b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b3a:	3a30      	subs	r2, #48	@ 0x30
 8009b3c:	2a09      	cmp	r2, #9
 8009b3e:	d903      	bls.n	8009b48 <_vfiprintf_r+0x1cc>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0c6      	beq.n	8009ad2 <_vfiprintf_r+0x156>
 8009b44:	9105      	str	r1, [sp, #20]
 8009b46:	e7c4      	b.n	8009ad2 <_vfiprintf_r+0x156>
 8009b48:	4604      	mov	r4, r0
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b50:	e7f0      	b.n	8009b34 <_vfiprintf_r+0x1b8>
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	462a      	mov	r2, r5
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4b13      	ldr	r3, [pc, #76]	@ (8009ba8 <_vfiprintf_r+0x22c>)
 8009b5c:	a904      	add	r1, sp, #16
 8009b5e:	f7fb fec5 	bl	80058ec <_printf_float>
 8009b62:	4607      	mov	r7, r0
 8009b64:	1c78      	adds	r0, r7, #1
 8009b66:	d1d6      	bne.n	8009b16 <_vfiprintf_r+0x19a>
 8009b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b6a:	07d9      	lsls	r1, r3, #31
 8009b6c:	d405      	bmi.n	8009b7a <_vfiprintf_r+0x1fe>
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	059a      	lsls	r2, r3, #22
 8009b72:	d402      	bmi.n	8009b7a <_vfiprintf_r+0x1fe>
 8009b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b76:	f7fc fe2b 	bl	80067d0 <__retarget_lock_release_recursive>
 8009b7a:	89ab      	ldrh	r3, [r5, #12]
 8009b7c:	065b      	lsls	r3, r3, #25
 8009b7e:	f53f af1f 	bmi.w	80099c0 <_vfiprintf_r+0x44>
 8009b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b84:	e71e      	b.n	80099c4 <_vfiprintf_r+0x48>
 8009b86:	ab03      	add	r3, sp, #12
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <_vfiprintf_r+0x22c>)
 8009b90:	a904      	add	r1, sp, #16
 8009b92:	f7fc f949 	bl	8005e28 <_printf_i>
 8009b96:	e7e4      	b.n	8009b62 <_vfiprintf_r+0x1e6>
 8009b98:	0800a909 	.word	0x0800a909
 8009b9c:	0800a90f 	.word	0x0800a90f
 8009ba0:	0800a913 	.word	0x0800a913
 8009ba4:	080058ed 	.word	0x080058ed
 8009ba8:	08009959 	.word	0x08009959

08009bac <__swbuf_r>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	460e      	mov	r6, r1
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	b118      	cbz	r0, 8009bbe <__swbuf_r+0x12>
 8009bb6:	6a03      	ldr	r3, [r0, #32]
 8009bb8:	b90b      	cbnz	r3, 8009bbe <__swbuf_r+0x12>
 8009bba:	f7fc fcf1 	bl	80065a0 <__sinit>
 8009bbe:	69a3      	ldr	r3, [r4, #24]
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	071a      	lsls	r2, r3, #28
 8009bc6:	d501      	bpl.n	8009bcc <__swbuf_r+0x20>
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	b943      	cbnz	r3, 8009bde <__swbuf_r+0x32>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f82a 	bl	8009c28 <__swsetup_r>
 8009bd4:	b118      	cbz	r0, 8009bde <__swbuf_r+0x32>
 8009bd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009bda:	4638      	mov	r0, r7
 8009bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	6922      	ldr	r2, [r4, #16]
 8009be2:	b2f6      	uxtb	r6, r6
 8009be4:	1a98      	subs	r0, r3, r2
 8009be6:	6963      	ldr	r3, [r4, #20]
 8009be8:	4637      	mov	r7, r6
 8009bea:	4283      	cmp	r3, r0
 8009bec:	dc05      	bgt.n	8009bfa <__swbuf_r+0x4e>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f7ff fa4b 	bl	800908c <_fflush_r>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d1ed      	bne.n	8009bd6 <__swbuf_r+0x2a>
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	60a3      	str	r3, [r4, #8]
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	6022      	str	r2, [r4, #0]
 8009c06:	701e      	strb	r6, [r3, #0]
 8009c08:	6962      	ldr	r2, [r4, #20]
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d004      	beq.n	8009c1a <__swbuf_r+0x6e>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	07db      	lsls	r3, r3, #31
 8009c14:	d5e1      	bpl.n	8009bda <__swbuf_r+0x2e>
 8009c16:	2e0a      	cmp	r6, #10
 8009c18:	d1df      	bne.n	8009bda <__swbuf_r+0x2e>
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7ff fa35 	bl	800908c <_fflush_r>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0d9      	beq.n	8009bda <__swbuf_r+0x2e>
 8009c26:	e7d6      	b.n	8009bd6 <__swbuf_r+0x2a>

08009c28 <__swsetup_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4b29      	ldr	r3, [pc, #164]	@ (8009cd0 <__swsetup_r+0xa8>)
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	460c      	mov	r4, r1
 8009c32:	b118      	cbz	r0, 8009c3c <__swsetup_r+0x14>
 8009c34:	6a03      	ldr	r3, [r0, #32]
 8009c36:	b90b      	cbnz	r3, 8009c3c <__swsetup_r+0x14>
 8009c38:	f7fc fcb2 	bl	80065a0 <__sinit>
 8009c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c40:	0719      	lsls	r1, r3, #28
 8009c42:	d422      	bmi.n	8009c8a <__swsetup_r+0x62>
 8009c44:	06da      	lsls	r2, r3, #27
 8009c46:	d407      	bmi.n	8009c58 <__swsetup_r+0x30>
 8009c48:	2209      	movs	r2, #9
 8009c4a:	602a      	str	r2, [r5, #0]
 8009c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	e033      	b.n	8009cc0 <__swsetup_r+0x98>
 8009c58:	0758      	lsls	r0, r3, #29
 8009c5a:	d512      	bpl.n	8009c82 <__swsetup_r+0x5a>
 8009c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c5e:	b141      	cbz	r1, 8009c72 <__swsetup_r+0x4a>
 8009c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c64:	4299      	cmp	r1, r3
 8009c66:	d002      	beq.n	8009c6e <__swsetup_r+0x46>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f7fd fc15 	bl	8007498 <_free_r>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6063      	str	r3, [r4, #4]
 8009c7e:	6923      	ldr	r3, [r4, #16]
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <__swsetup_r+0x7a>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c98:	d003      	beq.n	8009ca2 <__swsetup_r+0x7a>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 f882 	bl	8009da6 <__smakebuf_r>
 8009ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca6:	f013 0201 	ands.w	r2, r3, #1
 8009caa:	d00a      	beq.n	8009cc2 <__swsetup_r+0x9a>
 8009cac:	2200      	movs	r2, #0
 8009cae:	60a2      	str	r2, [r4, #8]
 8009cb0:	6962      	ldr	r2, [r4, #20]
 8009cb2:	4252      	negs	r2, r2
 8009cb4:	61a2      	str	r2, [r4, #24]
 8009cb6:	6922      	ldr	r2, [r4, #16]
 8009cb8:	b942      	cbnz	r2, 8009ccc <__swsetup_r+0xa4>
 8009cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cbe:	d1c5      	bne.n	8009c4c <__swsetup_r+0x24>
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	0799      	lsls	r1, r3, #30
 8009cc4:	bf58      	it	pl
 8009cc6:	6962      	ldrpl	r2, [r4, #20]
 8009cc8:	60a2      	str	r2, [r4, #8]
 8009cca:	e7f4      	b.n	8009cb6 <__swsetup_r+0x8e>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e7f7      	b.n	8009cc0 <__swsetup_r+0x98>
 8009cd0:	200000a8 	.word	0x200000a8

08009cd4 <_raise_r>:
 8009cd4:	291f      	cmp	r1, #31
 8009cd6:	b538      	push	{r3, r4, r5, lr}
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	d904      	bls.n	8009ce8 <_raise_r+0x14>
 8009cde:	2316      	movs	r3, #22
 8009ce0:	6003      	str	r3, [r0, #0]
 8009ce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cea:	b112      	cbz	r2, 8009cf2 <_raise_r+0x1e>
 8009cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cf0:	b94b      	cbnz	r3, 8009d06 <_raise_r+0x32>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f830 	bl	8009d58 <_getpid_r>
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d02:	f000 b817 	b.w	8009d34 <_kill_r>
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d00a      	beq.n	8009d20 <_raise_r+0x4c>
 8009d0a:	1c59      	adds	r1, r3, #1
 8009d0c:	d103      	bne.n	8009d16 <_raise_r+0x42>
 8009d0e:	2316      	movs	r3, #22
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	2001      	movs	r0, #1
 8009d14:	e7e7      	b.n	8009ce6 <_raise_r+0x12>
 8009d16:	2100      	movs	r1, #0
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d1e:	4798      	blx	r3
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7e0      	b.n	8009ce6 <_raise_r+0x12>

08009d24 <raise>:
 8009d24:	4b02      	ldr	r3, [pc, #8]	@ (8009d30 <raise+0xc>)
 8009d26:	4601      	mov	r1, r0
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f7ff bfd3 	b.w	8009cd4 <_raise_r>
 8009d2e:	bf00      	nop
 8009d30:	200000a8 	.word	0x200000a8

08009d34 <_kill_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	2300      	movs	r3, #0
 8009d38:	4d06      	ldr	r5, [pc, #24]	@ (8009d54 <_kill_r+0x20>)
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	f7f8 f99c 	bl	800207e <_kill>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	d102      	bne.n	8009d50 <_kill_r+0x1c>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	b103      	cbz	r3, 8009d50 <_kill_r+0x1c>
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	200005f8 	.word	0x200005f8

08009d58 <_getpid_r>:
 8009d58:	f7f8 b98a 	b.w	8002070 <_getpid>

08009d5c <__swhatbuf_r>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	460c      	mov	r4, r1
 8009d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d64:	4615      	mov	r5, r2
 8009d66:	2900      	cmp	r1, #0
 8009d68:	461e      	mov	r6, r3
 8009d6a:	b096      	sub	sp, #88	@ 0x58
 8009d6c:	da0c      	bge.n	8009d88 <__swhatbuf_r+0x2c>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	2100      	movs	r1, #0
 8009d72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d76:	bf14      	ite	ne
 8009d78:	2340      	movne	r3, #64	@ 0x40
 8009d7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d7e:	2000      	movs	r0, #0
 8009d80:	6031      	str	r1, [r6, #0]
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	b016      	add	sp, #88	@ 0x58
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	466a      	mov	r2, sp
 8009d8a:	f000 f849 	bl	8009e20 <_fstat_r>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	dbed      	blt.n	8009d6e <__swhatbuf_r+0x12>
 8009d92:	9901      	ldr	r1, [sp, #4]
 8009d94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d9c:	4259      	negs	r1, r3
 8009d9e:	4159      	adcs	r1, r3
 8009da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009da4:	e7eb      	b.n	8009d7e <__swhatbuf_r+0x22>

08009da6 <__smakebuf_r>:
 8009da6:	898b      	ldrh	r3, [r1, #12]
 8009da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009daa:	079d      	lsls	r5, r3, #30
 8009dac:	4606      	mov	r6, r0
 8009dae:	460c      	mov	r4, r1
 8009db0:	d507      	bpl.n	8009dc2 <__smakebuf_r+0x1c>
 8009db2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	6123      	str	r3, [r4, #16]
 8009dba:	2301      	movs	r3, #1
 8009dbc:	6163      	str	r3, [r4, #20]
 8009dbe:	b003      	add	sp, #12
 8009dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc2:	466a      	mov	r2, sp
 8009dc4:	ab01      	add	r3, sp, #4
 8009dc6:	f7ff ffc9 	bl	8009d5c <__swhatbuf_r>
 8009dca:	9f00      	ldr	r7, [sp, #0]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	4639      	mov	r1, r7
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7fd fbd3 	bl	800757c <_malloc_r>
 8009dd6:	b948      	cbnz	r0, 8009dec <__smakebuf_r+0x46>
 8009dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ddc:	059a      	lsls	r2, r3, #22
 8009dde:	d4ee      	bmi.n	8009dbe <__smakebuf_r+0x18>
 8009de0:	f023 0303 	bic.w	r3, r3, #3
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	e7e2      	b.n	8009db2 <__smakebuf_r+0xc>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	6020      	str	r0, [r4, #0]
 8009dfc:	b15b      	cbz	r3, 8009e16 <__smakebuf_r+0x70>
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e04:	f000 f81e 	bl	8009e44 <_isatty_r>
 8009e08:	b128      	cbz	r0, 8009e16 <__smakebuf_r+0x70>
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	431d      	orrs	r5, r3
 8009e1a:	81a5      	strh	r5, [r4, #12]
 8009e1c:	e7cf      	b.n	8009dbe <__smakebuf_r+0x18>
	...

08009e20 <_fstat_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	2300      	movs	r3, #0
 8009e24:	4d06      	ldr	r5, [pc, #24]	@ (8009e40 <_fstat_r+0x20>)
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f7f8 f985 	bl	800213c <_fstat>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d102      	bne.n	8009e3c <_fstat_r+0x1c>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b103      	cbz	r3, 8009e3c <_fstat_r+0x1c>
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	200005f8 	.word	0x200005f8

08009e44 <_isatty_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	2300      	movs	r3, #0
 8009e48:	4d05      	ldr	r5, [pc, #20]	@ (8009e60 <_isatty_r+0x1c>)
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f8 f983 	bl	800215a <_isatty>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_isatty_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_isatty_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	200005f8 	.word	0x200005f8

08009e64 <atan2>:
 8009e64:	f000 ba90 	b.w	800a388 <__ieee754_atan2>

08009e68 <sqrt>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	f000 f9b3 	bl	800a1d8 <__ieee754_sqrt>
 8009e72:	4632      	mov	r2, r6
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	463b      	mov	r3, r7
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	f7f6 fdc5 	bl	8000a0c <__aeabi_dcmpun>
 8009e82:	b990      	cbnz	r0, 8009eaa <sqrt+0x42>
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fd96 	bl	80009bc <__aeabi_dcmplt>
 8009e90:	b158      	cbz	r0, 8009eaa <sqrt+0x42>
 8009e92:	f7fc fc71 	bl	8006778 <__errno>
 8009e96:	2321      	movs	r3, #33	@ 0x21
 8009e98:	2200      	movs	r2, #0
 8009e9a:	6003      	str	r3, [r0, #0]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f7f6 fc43 	bl	800072c <__aeabi_ddiv>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eb0 <atan>:
 8009eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	4bbc      	ldr	r3, [pc, #752]	@ (800a1a8 <atan+0x2f8>)
 8009eb6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009eba:	429e      	cmp	r6, r3
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	d918      	bls.n	8009ef6 <atan+0x46>
 8009ec4:	4bb9      	ldr	r3, [pc, #740]	@ (800a1ac <atan+0x2fc>)
 8009ec6:	429e      	cmp	r6, r3
 8009ec8:	d801      	bhi.n	8009ece <atan+0x1e>
 8009eca:	d109      	bne.n	8009ee0 <atan+0x30>
 8009ecc:	b140      	cbz	r0, 8009ee0 <atan+0x30>
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 f949 	bl	800016c <__adddf3>
 8009eda:	4604      	mov	r4, r0
 8009edc:	460d      	mov	r5, r1
 8009ede:	e006      	b.n	8009eee <atan+0x3e>
 8009ee0:	f1bb 0f00 	cmp.w	fp, #0
 8009ee4:	f340 8123 	ble.w	800a12e <atan+0x27e>
 8009ee8:	a593      	add	r5, pc, #588	@ (adr r5, 800a138 <atan+0x288>)
 8009eea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef6:	4bae      	ldr	r3, [pc, #696]	@ (800a1b0 <atan+0x300>)
 8009ef8:	429e      	cmp	r6, r3
 8009efa:	d811      	bhi.n	8009f20 <atan+0x70>
 8009efc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009f00:	429e      	cmp	r6, r3
 8009f02:	d80a      	bhi.n	8009f1a <atan+0x6a>
 8009f04:	a38e      	add	r3, pc, #568	@ (adr r3, 800a140 <atan+0x290>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f92f 	bl	800016c <__adddf3>
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4ba8      	ldr	r3, [pc, #672]	@ (800a1b4 <atan+0x304>)
 8009f12:	f7f6 fd71 	bl	80009f8 <__aeabi_dcmpgt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d1e9      	bne.n	8009eee <atan+0x3e>
 8009f1a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f1e:	e027      	b.n	8009f70 <atan+0xc0>
 8009f20:	f000 f956 	bl	800a1d0 <fabs>
 8009f24:	4ba4      	ldr	r3, [pc, #656]	@ (800a1b8 <atan+0x308>)
 8009f26:	4604      	mov	r4, r0
 8009f28:	429e      	cmp	r6, r3
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	f200 80b8 	bhi.w	800a0a0 <atan+0x1f0>
 8009f30:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009f34:	429e      	cmp	r6, r3
 8009f36:	f200 809c 	bhi.w	800a072 <atan+0x1c2>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	f7f6 f915 	bl	800016c <__adddf3>
 8009f42:	2200      	movs	r2, #0
 8009f44:	4b9b      	ldr	r3, [pc, #620]	@ (800a1b4 <atan+0x304>)
 8009f46:	f7f6 f90f 	bl	8000168 <__aeabi_dsub>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 f908 	bl	800016c <__adddf3>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fbe2 	bl	800072c <__aeabi_ddiv>
 8009f68:	f04f 0a00 	mov.w	sl, #0
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	4622      	mov	r2, r4
 8009f72:	462b      	mov	r3, r5
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 faae 	bl	80004d8 <__aeabi_dmul>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4680      	mov	r8, r0
 8009f82:	4689      	mov	r9, r1
 8009f84:	f7f6 faa8 	bl	80004d8 <__aeabi_dmul>
 8009f88:	a36f      	add	r3, pc, #444	@ (adr r3, 800a148 <atan+0x298>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460f      	mov	r7, r1
 8009f92:	f7f6 faa1 	bl	80004d8 <__aeabi_dmul>
 8009f96:	a36e      	add	r3, pc, #440	@ (adr r3, 800a150 <atan+0x2a0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 f8e6 	bl	800016c <__adddf3>
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	463b      	mov	r3, r7
 8009fa4:	f7f6 fa98 	bl	80004d8 <__aeabi_dmul>
 8009fa8:	a36b      	add	r3, pc, #428	@ (adr r3, 800a158 <atan+0x2a8>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 f8dd 	bl	800016c <__adddf3>
 8009fb2:	4632      	mov	r2, r6
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	f7f6 fa8f 	bl	80004d8 <__aeabi_dmul>
 8009fba:	a369      	add	r3, pc, #420	@ (adr r3, 800a160 <atan+0x2b0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f8d4 	bl	800016c <__adddf3>
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	f7f6 fa86 	bl	80004d8 <__aeabi_dmul>
 8009fcc:	a366      	add	r3, pc, #408	@ (adr r3, 800a168 <atan+0x2b8>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 f8cb 	bl	800016c <__adddf3>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	f7f6 fa7d 	bl	80004d8 <__aeabi_dmul>
 8009fde:	a364      	add	r3, pc, #400	@ (adr r3, 800a170 <atan+0x2c0>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 f8c2 	bl	800016c <__adddf3>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 fa74 	bl	80004d8 <__aeabi_dmul>
 8009ff0:	a361      	add	r3, pc, #388	@ (adr r3, 800a178 <atan+0x2c8>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	4689      	mov	r9, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 fa6b 	bl	80004d8 <__aeabi_dmul>
 800a002:	a35f      	add	r3, pc, #380	@ (adr r3, 800a180 <atan+0x2d0>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 f8ae 	bl	8000168 <__aeabi_dsub>
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	f7f6 fa62 	bl	80004d8 <__aeabi_dmul>
 800a014:	a35c      	add	r3, pc, #368	@ (adr r3, 800a188 <atan+0x2d8>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f7f6 f8a5 	bl	8000168 <__aeabi_dsub>
 800a01e:	4632      	mov	r2, r6
 800a020:	463b      	mov	r3, r7
 800a022:	f7f6 fa59 	bl	80004d8 <__aeabi_dmul>
 800a026:	a35a      	add	r3, pc, #360	@ (adr r3, 800a190 <atan+0x2e0>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 f89c 	bl	8000168 <__aeabi_dsub>
 800a030:	4632      	mov	r2, r6
 800a032:	463b      	mov	r3, r7
 800a034:	f7f6 fa50 	bl	80004d8 <__aeabi_dmul>
 800a038:	a357      	add	r3, pc, #348	@ (adr r3, 800a198 <atan+0x2e8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f893 	bl	8000168 <__aeabi_dsub>
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	f7f6 fa47 	bl	80004d8 <__aeabi_dmul>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 f88b 	bl	800016c <__adddf3>
 800a056:	4622      	mov	r2, r4
 800a058:	462b      	mov	r3, r5
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	d144      	bne.n	800a0f2 <atan+0x242>
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f87c 	bl	8000168 <__aeabi_dsub>
 800a070:	e733      	b.n	8009eda <atan+0x2a>
 800a072:	2200      	movs	r2, #0
 800a074:	4b4f      	ldr	r3, [pc, #316]	@ (800a1b4 <atan+0x304>)
 800a076:	f7f6 f877 	bl	8000168 <__aeabi_dsub>
 800a07a:	2200      	movs	r2, #0
 800a07c:	4606      	mov	r6, r0
 800a07e:	460f      	mov	r7, r1
 800a080:	4620      	mov	r0, r4
 800a082:	4629      	mov	r1, r5
 800a084:	4b4b      	ldr	r3, [pc, #300]	@ (800a1b4 <atan+0x304>)
 800a086:	f7f6 f871 	bl	800016c <__adddf3>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 fb4b 	bl	800072c <__aeabi_ddiv>
 800a096:	f04f 0a01 	mov.w	sl, #1
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	e767      	b.n	8009f70 <atan+0xc0>
 800a0a0:	4b46      	ldr	r3, [pc, #280]	@ (800a1bc <atan+0x30c>)
 800a0a2:	429e      	cmp	r6, r3
 800a0a4:	d21a      	bcs.n	800a0dc <atan+0x22c>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4b45      	ldr	r3, [pc, #276]	@ (800a1c0 <atan+0x310>)
 800a0aa:	f7f6 f85d 	bl	8000168 <__aeabi_dsub>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4b41      	ldr	r3, [pc, #260]	@ (800a1c0 <atan+0x310>)
 800a0ba:	f7f6 fa0d 	bl	80004d8 <__aeabi_dmul>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a1b4 <atan+0x304>)
 800a0c2:	f7f6 f853 	bl	800016c <__adddf3>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 fb2d 	bl	800072c <__aeabi_ddiv>
 800a0d2:	f04f 0a02 	mov.w	sl, #2
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	e749      	b.n	8009f70 <atan+0xc0>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	4938      	ldr	r1, [pc, #224]	@ (800a1c4 <atan+0x314>)
 800a0e4:	f7f6 fb22 	bl	800072c <__aeabi_ddiv>
 800a0e8:	f04f 0a03 	mov.w	sl, #3
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	e73e      	b.n	8009f70 <atan+0xc0>
 800a0f2:	4b35      	ldr	r3, [pc, #212]	@ (800a1c8 <atan+0x318>)
 800a0f4:	4e35      	ldr	r6, [pc, #212]	@ (800a1cc <atan+0x31c>)
 800a0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f7f6 f833 	bl	8000168 <__aeabi_dsub>
 800a102:	4622      	mov	r2, r4
 800a104:	462b      	mov	r3, r5
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a116:	f7f6 f827 	bl	8000168 <__aeabi_dsub>
 800a11a:	f1bb 0f00 	cmp.w	fp, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	460d      	mov	r5, r1
 800a122:	f6bf aee4 	bge.w	8009eee <atan+0x3e>
 800a126:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a12a:	461d      	mov	r5, r3
 800a12c:	e6df      	b.n	8009eee <atan+0x3e>
 800a12e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a1a0 <atan+0x2f0>)
 800a130:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a134:	e6db      	b.n	8009eee <atan+0x3e>
 800a136:	bf00      	nop
 800a138:	54442d18 	.word	0x54442d18
 800a13c:	3ff921fb 	.word	0x3ff921fb
 800a140:	8800759c 	.word	0x8800759c
 800a144:	7e37e43c 	.word	0x7e37e43c
 800a148:	e322da11 	.word	0xe322da11
 800a14c:	3f90ad3a 	.word	0x3f90ad3a
 800a150:	24760deb 	.word	0x24760deb
 800a154:	3fa97b4b 	.word	0x3fa97b4b
 800a158:	a0d03d51 	.word	0xa0d03d51
 800a15c:	3fb10d66 	.word	0x3fb10d66
 800a160:	c54c206e 	.word	0xc54c206e
 800a164:	3fb745cd 	.word	0x3fb745cd
 800a168:	920083ff 	.word	0x920083ff
 800a16c:	3fc24924 	.word	0x3fc24924
 800a170:	5555550d 	.word	0x5555550d
 800a174:	3fd55555 	.word	0x3fd55555
 800a178:	2c6a6c2f 	.word	0x2c6a6c2f
 800a17c:	bfa2b444 	.word	0xbfa2b444
 800a180:	52defd9a 	.word	0x52defd9a
 800a184:	3fadde2d 	.word	0x3fadde2d
 800a188:	af749a6d 	.word	0xaf749a6d
 800a18c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a190:	fe231671 	.word	0xfe231671
 800a194:	3fbc71c6 	.word	0x3fbc71c6
 800a198:	9998ebc4 	.word	0x9998ebc4
 800a19c:	3fc99999 	.word	0x3fc99999
 800a1a0:	54442d18 	.word	0x54442d18
 800a1a4:	bff921fb 	.word	0xbff921fb
 800a1a8:	440fffff 	.word	0x440fffff
 800a1ac:	7ff00000 	.word	0x7ff00000
 800a1b0:	3fdbffff 	.word	0x3fdbffff
 800a1b4:	3ff00000 	.word	0x3ff00000
 800a1b8:	3ff2ffff 	.word	0x3ff2ffff
 800a1bc:	40038000 	.word	0x40038000
 800a1c0:	3ff80000 	.word	0x3ff80000
 800a1c4:	bff00000 	.word	0xbff00000
 800a1c8:	0800a9c0 	.word	0x0800a9c0
 800a1cc:	0800a9e0 	.word	0x0800a9e0

0800a1d0 <fabs>:
 800a1d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <__ieee754_sqrt>:
 800a1d8:	4a67      	ldr	r2, [pc, #412]	@ (800a378 <__ieee754_sqrt+0x1a0>)
 800a1da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1de:	438a      	bics	r2, r1
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	d10e      	bne.n	800a208 <__ieee754_sqrt+0x30>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	f7f6 f974 	bl	80004d8 <__aeabi_dmul>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	f7f5 ffb8 	bl	800016c <__adddf3>
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	2900      	cmp	r1, #0
 800a20a:	dc0c      	bgt.n	800a226 <__ieee754_sqrt+0x4e>
 800a20c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a210:	4302      	orrs	r2, r0
 800a212:	d0f5      	beq.n	800a200 <__ieee754_sqrt+0x28>
 800a214:	b189      	cbz	r1, 800a23a <__ieee754_sqrt+0x62>
 800a216:	4602      	mov	r2, r0
 800a218:	f7f5 ffa6 	bl	8000168 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	f7f6 fa84 	bl	800072c <__aeabi_ddiv>
 800a224:	e7ea      	b.n	800a1fc <__ieee754_sqrt+0x24>
 800a226:	150a      	asrs	r2, r1, #20
 800a228:	d115      	bne.n	800a256 <__ieee754_sqrt+0x7e>
 800a22a:	2100      	movs	r1, #0
 800a22c:	e009      	b.n	800a242 <__ieee754_sqrt+0x6a>
 800a22e:	0ae3      	lsrs	r3, r4, #11
 800a230:	3a15      	subs	r2, #21
 800a232:	0564      	lsls	r4, r4, #21
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0fa      	beq.n	800a22e <__ieee754_sqrt+0x56>
 800a238:	e7f7      	b.n	800a22a <__ieee754_sqrt+0x52>
 800a23a:	460a      	mov	r2, r1
 800a23c:	e7fa      	b.n	800a234 <__ieee754_sqrt+0x5c>
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	3101      	adds	r1, #1
 800a242:	02d8      	lsls	r0, r3, #11
 800a244:	d5fb      	bpl.n	800a23e <__ieee754_sqrt+0x66>
 800a246:	1e48      	subs	r0, r1, #1
 800a248:	1a12      	subs	r2, r2, r0
 800a24a:	f1c1 0020 	rsb	r0, r1, #32
 800a24e:	fa24 f000 	lsr.w	r0, r4, r0
 800a252:	4303      	orrs	r3, r0
 800a254:	408c      	lsls	r4, r1
 800a256:	2600      	movs	r6, #0
 800a258:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a25c:	2116      	movs	r1, #22
 800a25e:	07d2      	lsls	r2, r2, #31
 800a260:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a264:	4632      	mov	r2, r6
 800a266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a26e:	bf5c      	itt	pl
 800a270:	005b      	lslpl	r3, r3, #1
 800a272:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a27a:	bf58      	it	pl
 800a27c:	0064      	lslpl	r4, r4, #1
 800a27e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a282:	107f      	asrs	r7, r7, #1
 800a284:	0064      	lsls	r4, r4, #1
 800a286:	1815      	adds	r5, r2, r0
 800a288:	429d      	cmp	r5, r3
 800a28a:	bfde      	ittt	le
 800a28c:	182a      	addle	r2, r5, r0
 800a28e:	1b5b      	suble	r3, r3, r5
 800a290:	1836      	addle	r6, r6, r0
 800a292:	0fe5      	lsrs	r5, r4, #31
 800a294:	3901      	subs	r1, #1
 800a296:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a29a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a29e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a2a2:	d1f0      	bne.n	800a286 <__ieee754_sqrt+0xae>
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	f04f 0a20 	mov.w	sl, #32
 800a2aa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	eb01 0c00 	add.w	ip, r1, r0
 800a2b4:	db02      	blt.n	800a2bc <__ieee754_sqrt+0xe4>
 800a2b6:	d113      	bne.n	800a2e0 <__ieee754_sqrt+0x108>
 800a2b8:	45a4      	cmp	ip, r4
 800a2ba:	d811      	bhi.n	800a2e0 <__ieee754_sqrt+0x108>
 800a2bc:	f1bc 0f00 	cmp.w	ip, #0
 800a2c0:	eb0c 0100 	add.w	r1, ip, r0
 800a2c4:	da42      	bge.n	800a34c <__ieee754_sqrt+0x174>
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	db40      	blt.n	800a34c <__ieee754_sqrt+0x174>
 800a2ca:	f102 0e01 	add.w	lr, r2, #1
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	4672      	mov	r2, lr
 800a2d2:	45a4      	cmp	ip, r4
 800a2d4:	bf88      	it	hi
 800a2d6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a2da:	eba4 040c 	sub.w	r4, r4, ip
 800a2de:	4405      	add	r5, r0
 800a2e0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a2e4:	f1ba 0a01 	subs.w	sl, sl, #1
 800a2e8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a2ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a2f0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a2f4:	d1db      	bne.n	800a2ae <__ieee754_sqrt+0xd6>
 800a2f6:	431c      	orrs	r4, r3
 800a2f8:	d01a      	beq.n	800a330 <__ieee754_sqrt+0x158>
 800a2fa:	4c20      	ldr	r4, [pc, #128]	@ (800a37c <__ieee754_sqrt+0x1a4>)
 800a2fc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a380 <__ieee754_sqrt+0x1a8>
 800a300:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a304:	e9db 2300 	ldrd	r2, r3, [fp]
 800a308:	f7f5 ff2e 	bl	8000168 <__aeabi_dsub>
 800a30c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4640      	mov	r0, r8
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 fb5a 	bl	80009d0 <__aeabi_dcmple>
 800a31c:	b140      	cbz	r0, 800a330 <__ieee754_sqrt+0x158>
 800a31e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a322:	e9db 2300 	ldrd	r2, r3, [fp]
 800a326:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a32a:	d111      	bne.n	800a350 <__ieee754_sqrt+0x178>
 800a32c:	4655      	mov	r5, sl
 800a32e:	3601      	adds	r6, #1
 800a330:	1072      	asrs	r2, r6, #1
 800a332:	086b      	lsrs	r3, r5, #1
 800a334:	07f1      	lsls	r1, r6, #31
 800a336:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a33a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a33e:	bf48      	it	mi
 800a340:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a344:	4618      	mov	r0, r3
 800a346:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a34a:	e757      	b.n	800a1fc <__ieee754_sqrt+0x24>
 800a34c:	4696      	mov	lr, r2
 800a34e:	e7be      	b.n	800a2ce <__ieee754_sqrt+0xf6>
 800a350:	f7f5 ff0c 	bl	800016c <__adddf3>
 800a354:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4640      	mov	r0, r8
 800a35e:	4649      	mov	r1, r9
 800a360:	f7f6 fb2c 	bl	80009bc <__aeabi_dcmplt>
 800a364:	b120      	cbz	r0, 800a370 <__ieee754_sqrt+0x198>
 800a366:	1ca8      	adds	r0, r5, #2
 800a368:	bf08      	it	eq
 800a36a:	3601      	addeq	r6, #1
 800a36c:	3502      	adds	r5, #2
 800a36e:	e7df      	b.n	800a330 <__ieee754_sqrt+0x158>
 800a370:	1c6b      	adds	r3, r5, #1
 800a372:	f023 0501 	bic.w	r5, r3, #1
 800a376:	e7db      	b.n	800a330 <__ieee754_sqrt+0x158>
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	20000270 	.word	0x20000270
 800a380:	20000268 	.word	0x20000268
 800a384:	00000000 	.word	0x00000000

0800a388 <__ieee754_atan2>:
 800a388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	4617      	mov	r7, r2
 800a38e:	4690      	mov	r8, r2
 800a390:	4699      	mov	r9, r3
 800a392:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a396:	427b      	negs	r3, r7
 800a398:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800a520 <__ieee754_atan2+0x198>
 800a39c:	433b      	orrs	r3, r7
 800a39e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a3a2:	4553      	cmp	r3, sl
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	d809      	bhi.n	800a3be <__ieee754_atan2+0x36>
 800a3aa:	4246      	negs	r6, r0
 800a3ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3b0:	4306      	orrs	r6, r0
 800a3b2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a3b6:	4556      	cmp	r6, sl
 800a3b8:	468e      	mov	lr, r1
 800a3ba:	4683      	mov	fp, r0
 800a3bc:	d908      	bls.n	800a3d0 <__ieee754_atan2+0x48>
 800a3be:	4642      	mov	r2, r8
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7f5 fed1 	bl	800016c <__adddf3>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	e016      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a3d0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800a3d4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a3d8:	433e      	orrs	r6, r7
 800a3da:	d103      	bne.n	800a3e4 <__ieee754_atan2+0x5c>
 800a3dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	f7ff bd66 	b.w	8009eb0 <atan>
 800a3e4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a3e8:	f006 0602 	and.w	r6, r6, #2
 800a3ec:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a3f0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a3f4:	d107      	bne.n	800a406 <__ieee754_atan2+0x7e>
 800a3f6:	2e02      	cmp	r6, #2
 800a3f8:	d064      	beq.n	800a4c4 <__ieee754_atan2+0x13c>
 800a3fa:	2e03      	cmp	r6, #3
 800a3fc:	d066      	beq.n	800a4cc <__ieee754_atan2+0x144>
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a406:	4317      	orrs	r7, r2
 800a408:	d106      	bne.n	800a418 <__ieee754_atan2+0x90>
 800a40a:	f1be 0f00 	cmp.w	lr, #0
 800a40e:	da68      	bge.n	800a4e2 <__ieee754_atan2+0x15a>
 800a410:	a537      	add	r5, pc, #220	@ (adr r5, 800a4f0 <__ieee754_atan2+0x168>)
 800a412:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a416:	e7f2      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a418:	4552      	cmp	r2, sl
 800a41a:	d10f      	bne.n	800a43c <__ieee754_atan2+0xb4>
 800a41c:	4293      	cmp	r3, r2
 800a41e:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800a422:	d107      	bne.n	800a434 <__ieee754_atan2+0xac>
 800a424:	2e02      	cmp	r6, #2
 800a426:	d855      	bhi.n	800a4d4 <__ieee754_atan2+0x14c>
 800a428:	4b3e      	ldr	r3, [pc, #248]	@ (800a524 <__ieee754_atan2+0x19c>)
 800a42a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a42e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a432:	e7e4      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a434:	2e02      	cmp	r6, #2
 800a436:	d851      	bhi.n	800a4dc <__ieee754_atan2+0x154>
 800a438:	4b3b      	ldr	r3, [pc, #236]	@ (800a528 <__ieee754_atan2+0x1a0>)
 800a43a:	e7f6      	b.n	800a42a <__ieee754_atan2+0xa2>
 800a43c:	4553      	cmp	r3, sl
 800a43e:	d0e4      	beq.n	800a40a <__ieee754_atan2+0x82>
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a446:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a44a:	da21      	bge.n	800a490 <__ieee754_atan2+0x108>
 800a44c:	f1b9 0f00 	cmp.w	r9, #0
 800a450:	da01      	bge.n	800a456 <__ieee754_atan2+0xce>
 800a452:	323c      	adds	r2, #60	@ 0x3c
 800a454:	db20      	blt.n	800a498 <__ieee754_atan2+0x110>
 800a456:	4642      	mov	r2, r8
 800a458:	464b      	mov	r3, r9
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7f6 f965 	bl	800072c <__aeabi_ddiv>
 800a462:	f7ff feb5 	bl	800a1d0 <fabs>
 800a466:	f7ff fd23 	bl	8009eb0 <atan>
 800a46a:	4604      	mov	r4, r0
 800a46c:	460d      	mov	r5, r1
 800a46e:	2e01      	cmp	r6, #1
 800a470:	d015      	beq.n	800a49e <__ieee754_atan2+0x116>
 800a472:	2e02      	cmp	r6, #2
 800a474:	d017      	beq.n	800a4a6 <__ieee754_atan2+0x11e>
 800a476:	2e00      	cmp	r6, #0
 800a478:	d0c1      	beq.n	800a3fe <__ieee754_atan2+0x76>
 800a47a:	a31f      	add	r3, pc, #124	@ (adr r3, 800a4f8 <__ieee754_atan2+0x170>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 fe70 	bl	8000168 <__aeabi_dsub>
 800a488:	a31d      	add	r3, pc, #116	@ (adr r3, 800a500 <__ieee754_atan2+0x178>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	e016      	b.n	800a4be <__ieee754_atan2+0x136>
 800a490:	a51d      	add	r5, pc, #116	@ (adr r5, 800a508 <__ieee754_atan2+0x180>)
 800a492:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a496:	e7ea      	b.n	800a46e <__ieee754_atan2+0xe6>
 800a498:	2400      	movs	r4, #0
 800a49a:	2500      	movs	r5, #0
 800a49c:	e7e7      	b.n	800a46e <__ieee754_atan2+0xe6>
 800a49e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800a4a2:	461d      	mov	r5, r3
 800a4a4:	e7ab      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4a6:	a314      	add	r3, pc, #80	@ (adr r3, 800a4f8 <__ieee754_atan2+0x170>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f5 fe5a 	bl	8000168 <__aeabi_dsub>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	a111      	add	r1, pc, #68	@ (adr r1, 800a500 <__ieee754_atan2+0x178>)
 800a4ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4be:	f7f5 fe53 	bl	8000168 <__aeabi_dsub>
 800a4c2:	e782      	b.n	800a3ca <__ieee754_atan2+0x42>
 800a4c4:	a50e      	add	r5, pc, #56	@ (adr r5, 800a500 <__ieee754_atan2+0x178>)
 800a4c6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4ca:	e798      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4cc:	a510      	add	r5, pc, #64	@ (adr r5, 800a510 <__ieee754_atan2+0x188>)
 800a4ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4d2:	e794      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4d4:	a510      	add	r5, pc, #64	@ (adr r5, 800a518 <__ieee754_atan2+0x190>)
 800a4d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4da:	e790      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4dc:	2400      	movs	r4, #0
 800a4de:	2500      	movs	r5, #0
 800a4e0:	e78d      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4e2:	a509      	add	r5, pc, #36	@ (adr r5, 800a508 <__ieee754_atan2+0x180>)
 800a4e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4e8:	e789      	b.n	800a3fe <__ieee754_atan2+0x76>
 800a4ea:	bf00      	nop
 800a4ec:	f3af 8000 	nop.w
 800a4f0:	54442d18 	.word	0x54442d18
 800a4f4:	bff921fb 	.word	0xbff921fb
 800a4f8:	33145c07 	.word	0x33145c07
 800a4fc:	3ca1a626 	.word	0x3ca1a626
 800a500:	54442d18 	.word	0x54442d18
 800a504:	400921fb 	.word	0x400921fb
 800a508:	54442d18 	.word	0x54442d18
 800a50c:	3ff921fb 	.word	0x3ff921fb
 800a510:	54442d18 	.word	0x54442d18
 800a514:	c00921fb 	.word	0xc00921fb
 800a518:	54442d18 	.word	0x54442d18
 800a51c:	3fe921fb 	.word	0x3fe921fb
 800a520:	7ff00000 	.word	0x7ff00000
 800a524:	0800aa18 	.word	0x0800aa18
 800a528:	0800aa00 	.word	0x0800aa00

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
